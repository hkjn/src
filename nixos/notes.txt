# after adding packages or otherwise editing configuration.nix, build new
# configuration and switch to it for next boot:
nixos-rebuild switch

# rebuild but do not switch to new config next boot:
nixos-rebuild test

# after installation, copy .Xresources to ~/ and do:
xrdb -merge .Xresources

# search for packages:
nix search <pattern>

# list all generations:
nix-env --list-generations

# using filesystem, list all generations in the system profile:
ls -l /nix/var/nix/profiles/system-*-link

# switch generations:
nix-env --switch-generation 43

# query for package:
nix-env -q <pattern>

# rebuild VM:
nixos-rebuild build-vm

# check nixos version:
nixos-version

# bitcoind and lightningd can both be installed via official stable packages,
# but installs versions v0.17.1.0 and v0.6.3, should fork repo from
# https://github.com/NixOS/nixpkgs and update locally to later versions, and
# add to local user packages, not configuration.nix

# rebuilding from local packages, branched from nixos-19.03
nixos-rebuild switch -I nixpkgs=~/src/hkjn.me/nixpkgs
ln -s ~/src/hkjn.me/src/nixpkgs ~/.nix-defexpr/nixpkgs
nix -i bitcoin

# switched Makefile to do nixos-rebuild switch towards ~/src/hkjn.me/nixpkgs,
# from branch in fork of nixpkgs based on nixos-19.03 but with patches
# from nixos-unstable to bring bitcoin.nix and clightning.nix to newer
# versions

# uninstall packages:
nix-env -e irssi

# backlight seems to work, however setting the value also affects
# display brightness
cat /sys/class/backlight/intel_backlight/max_brightness
echo "100" | sudo tee /sys/class/backlight/intel_backlight/brightness

# build package from .nix config:
git clone foobar
cat >default.nix <<EOF
with import <nixpkgs> { };
stdenv.lib.overrideDerivation foobar (oldAttrs : {
  src = ./foobar;
})
EOF
nix-build

# useful info at https://nixos.wiki/wiki/Cheatsheet

# nix-shell builds dependencies in specified derivation, then starts an
# interactive shell in which the dependencies of the derivation are installed:
nix-shell -p sqlite xorg.libX11

# nix-shell can be used as script interpreter to install dependencies for the
# actual script:

#! /usr/bin/env nix-shell
#! nix-shell -i python -p python pythonPackages.prettytable

import prettytable
t = prettytable.PrettyTable(["N", "N^2"])
for n in range(1, 10): t.add_row([n, n * n])
print t

# reading about https://nixos.wiki/wiki/Overlays, nix-bitcoin uses it to define
# overlay.nix

# the nix-bitcoin repo links to https://github.com/nix-community/NUR, which
# explains that the packageOverrides stanza can be used either in
# ~/.config/nixpkgs/config.nix or /etc/nixos/configuration.nix to fetch
# packages from that repo, and default.nix in nix-bitcoin is derived from
# the template and docs described in nix-community/NUR

# the default.nix in nix-bitcoin refers to directories like pkgs/electrs/,
# containing default.nix, which seems to have been generated by the rust tool
# crate2nix

# from the nix-bitcoin repo root, the following command builds the electrs
# derivation:
nix-build --arg pkgs 'import <nixpkgs> {}' -A electrs
# after successful build, electrs can be started with ./result/bin/electrs
# built results can be installed with nix-env, using output from nix-build command:
nix-env -i /nix/store/1aqydk16mih4jcqnxsd8567b916vhna8-electrs-0.6.2

# nix-env operates on profiles, which are sequences of generations

# removing old and unreferenced packages:
nix-collect-garbage

# also delete everything not used by the current generations of each
# profile:
nix-collect-garbage -d

# seek out identical files and replace them with hard links to a single copy:
nix-store --optimise

# lock password to root account, since sudo is used instead:
sudo passwd -l root

# build nixos package closure and install it in the system profile:
nix-env -p /nix/var/nix/profiles/system -f '<nixpkgs/nixos>' -I nixos-config=/etc/nixos/configuration.nix -iA system

# delete specific generations:
nix-env --dry-run --delete-generations 2 3 4 5
nix-env --delete-generations 2 3 4 5
nix-collect-garbage

# install using a specific attribute:
nix-env -i -A gcc40mips
nix-env -i -A xorg.xorgserver

# install all derivations in the Nix expression foo.nix:
nix-env -f ~/foo.nix -i '.*'

# install from a Nix expression specified on the command-line:
nix-env -f ./foo.nix -i -E 'f: (f {system = "i686-linux";}).subversionWithJava'

# enabled systemd.user.services.bitcoin, and after rebuilding service is running:
systemctl --user status bitcoin

# tried enabling systemd.user.services.clightning, but lightningd process can't
# find bitcoin-cli on PATH, since it needs to know where under /nix/store the symlink
# is pointing:
systemctl --user status clightning

# tried enabling systemd.user.services.electrs, but ${pkgs.electrs} is not defined,
# and listing electrs in environment.systemPackages produces an error, despite
# nix-env saying the package is installed:
nix-env -q electrs

# got error around GLX when starting electrum after updating:
# qt.glx: qglx_findConfig: Failed to finding matching FBConfig (1 1 1 0)
# Could not initialize GLX
# Aborted

# installed glxinfo in attempt to debug, but had separate issue so uninstalled
# again:
nix-env -i glxinfo
nix-env -e glxinfo

# after upgrading from electrum-3.3.7 to electrum-3.3.8 via following command,
# electrum starts fine again:
nix-env -i electrum

# installed tor package, but seems that some extra configuration is needed to
# make it do anything:
# [warn] SocksPort, TransPort, NATDPort, DNSPort, and ORPort are all undefined,
# and there aren't any hidden services configured.  Tor will still run, but
# probably won't do anything.

# from the nix-bitcoin repo root, used following command to build and install
# hwi tools:
nix-build --arg pkgs 'import <nixpkgs> {}' -A hwi
nix-env -i /nix/store/6y6c6zjn5brlwcha3l5zq61a319mwwrv-python3.5-hwi-1.0.1

# via lsusb and /dev/bus/usb, seems that permissions were wrong, so changed
# them manually:
sudo chown user:users /dev/bus/usb/001/007

# added services.udev.extraRules for coldcard to configuration.nix
# via http://docs.electrum.org/en/latest/hardware-linux.html, package to
# install for cold card is:
# python3 -m pip install ckcc-protocol
# trying to find how to use pip with nixos, seems via
# https://unix.stackexchange.com/questions/519110/how-to-install-python-pip-on-nixos
# that it can be installed with:
nix-env -i python3.7-pip-19.1.1

# attempting to install ckcc-protocol failed due to 'No module named setuptools',
# which doesn't change by adding it explicitly:
pip install setuptools
pip install ckcc-protocol

# attempting to set up a virtualenv instead makes some progress, but then fails
# due to not having gcc, binutils, and crtio.o (seems to be provided by libc6-dev
# package on debian, but not clear how to fetch it on nixos):
nix-env -i python3.7-virtualenv-16.4.3
nix-env -i gcc
nix-env -i binutils-2.31.1
echo ckcc-protocol > requirements.txt
virtualenv python-env
source python-env/bin/activate
pip install -r requirements.txt

# better would be to have electrum directly use hwi binary instead of importing
# python libraries, since both electrum and hwi have .nix packages, should file
# issue in electrum to suggest that and offer to help, to get a sense for how
# far away hwi is from fully supporting everything electrum needs

# there is also many pip packages defined in nixpkgs/pkgs/top-level/python-packages.nix,
# as documented at https://nixos.org/nixpkgs/manual/#contributing-guidelines, so
# perhaps ckcc-protocol etc could be referenced there, and defined in
# pkgs/development/python-modules/ckcc-protocol/default.nix

# also seems that there's a package definition for pip2nix tool, which might
# be useful to convert ckcc-protocol's requirements.txt into .nix derivation:
# ./pkgs/development/python-modules/pip2nix/default.nix

# also there is a pypi2nix package, which seems like it could potentially help
# convert ckcc-protocol's requirements.txt into .nix:
nix-env -i pypi2nix
cd ~/src/github.com/Coldcard/ckcc-protocol
pypi2nix --python-version 3
nix-shell requirements.nix -A interpreter

# however, build fails, seemingly due to libusb.h not being included as
# dependency in the generated .nix package

# docs at github for pypi2nix mention that non-python dependencies can
# be added like -E libusb:
pypi2nix --python-version 3 -E libusb -E libffi

# although following command does build result/bin/python where ckcc can
# be imported, dir(ckcc) shows no attributes so seems to be some further
# issue:
nix build -f requirements.nix interpreter

# should create electrs.service file via configuration.nix, currently started
# with:
cd .config/electrs && electrs -vvvv

# coldcard udev rules don't seem to be taking effect, /dev/bus/usb/m/n still
# is readable only by root, despite /etc/udev/rules.d/99-local.rules being
# updated based on services.udev.extraRules

# after changing permissions manually, hwi tool allows fetching xpub at
# arbitrary paths:
hwi --fingerprint $FINGERPRINT getxpub "m/84'/0'/0'"

# using local checkout of https://github.com/jlopp/xpub-converter, the
# xpub can be re-encoded as zpub which allows importing as watchonly
# in electrum, but would be better if electrum supported descriptor
# language:
# https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md

# not clear how to make hardware wallet display xpub, but individual
# p2wpkh addresses can be shown and verified on the device:
hwi --fingerprint $FINGERPRINT displayaddress --path "m/84'/0'/0'/0/0" --wpkh

# bitcoin-cli commands failed to connect after reboot, but doing
# systemctl --user restart bitcoin it worked again

# fetching keys for import in bitcoin core using getkeypool, without
# --path seems to be same as doing --path "m/84'/0'/0'/*" and
# --path "m/84'/0'/1'/*" --internal and combining results:
hwi --fingerprint $FINGERPRINT getkeypool --wpkh --keypool 0 1000

# creating a new watchonly wallet $WALLET in bitcoin core using:
bitcoin-cli createwallet "$WALLET" true

# attempting to import the keys throws error 'Invalid scriptPubKey':
bitcoin-cli -rpcwallet=$WALLET importmulti "$KEYS"

# after rebuilding from v0.18.0, which should have been the previous
# version as well, bitcoin-cli help importmulti does show up the
# desc field for the bitcoin core descriptor language, and now
# the importmulti command does succeed

# after import finished, since the addresses have earlier transactions,
# blockchain has to be rescanned for core to find out about them and
# show the correct balance, using a height before the first tx:
bitcoin-cli -rpcwallet=$WALLET rescanblockchain 581400

# after rescan, getnewaddress does return the expected first free
# address, and getwalletinfo shows a txcount of 6 as expected, however
# balance is still listed as 0.0

# after restart of bitcoind, wallet has to be loaded with:
bitcoin-cli loadwallet $WALLET

# however balance still shows up as 0.0 after restart

# the generations listed at nix-env --list-generations lists the current
# one as 49 still, but with the UEFI boot menu, the latest is 80+
# via https://nixos.wiki/wiki/Bootloader, seems like the following command
# is needed when doing rebuilds to update bootloader, however via manpage,
# seems that nixos-rebuild switch should do the same as nixos-rebuild boot,
# and in additionally should switch to the new configuration immediately:
sudo nixos-rebuild boot

# may also help to reinstall bootloader with:
sudo nixos-rebuild --install-bootloader switch

# after rebooting, some more recent generations between 50-53 shows up with
# nix-env --list-generations

# via the filesystem, seems that the generations listed in uefi boot
# menu up to 86 actually exist:
ls -l /nix/var/nix/profiles/

# even with a new tx to a fresh address generated with getnewaddress,
# the balance reported by getwalletinfo is 0.0

# despite balance showing as 0.0 in getwalletinfo, with bitcoin-qt, the
# expected balance does show up, so might be a bug with the rpc call?
# trying to import another watchonly wallet from a ledger nano device,
# the behavior differs but still seems buggy; both bitcoind and
# bitcoin-qt shows 0.0 balance, despite showing expected transactions
# adding up to > 0.0
# after restarting bitcoin-qt, expected balance shows for ledger nano
# wallet and coldcard wallet in gui, but still both shows 0.0 with
# bitcoin-cli getwalletinfo

# wasabi should have .nix package contributed, either as part of
# main https://github.com/zkSNACKs/WalletWasabi/releases or nix-bitcoin
# repo

# bug: while doing bitcoin-cli importmulti, the bitcoin-qt gui seems to stop
# redrawing.. perhaps doing heavy work on ui thread?

# seems that X11 docker containers for some reason can't connect to x
# socket on nixos, giving error 'Error: Can't open display: :0'

# creating psbt and signing using hwi:
bitcoin-cli -rpcwallet=$WALLET walletcreatefundedpsbt '[]' '[{"$RECIPIENT_ADDR":0.01}]' 0 '{"includeWatching":true}' true
hwi --fingerprint $FINGERPRINT signtx $PSBT
bitcoin-cli finalizepsbt $SIGNED_PSBT
bitcoin-cli decoderawtransaction $RAW_TX
bitcoin-cli sendrawtransaction $RAW_TX

# rebuild with different profile than system:
nixos-rebuild switch -I nixpkgs=/home/user/src/hkjn.me/nixpkgs -p test0

# query for all available derivations in the active nix expression:
nix-env -qaf /home/user/src/hkjn.me/nixpkgs

# following https://nixos.org/nix/manual/#chap-writing-nix-expressions,
# along with https://github.com/NixOS/nix/issues/2259 when doing a build
# of the basic hello derivation did not succeed, but does build when
# called as:
nix-build -E '(import <nixpkgs> {}).callPackage ./default.nix {}'

# docs at https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/python.section.md
# are useful for understanding how to work with python packages on nixos

# shell can be entered with python packages installed with:
nix-shell -p 'python35.withPackages(ps: with ps; [ nose ])'

# a local ~/.config/nixpkgs/config.nix can be used to define additional
# packages via overrides, like tools containing python packages and
# tools for interacting with hardware wallets

# seems like udev rules can be added as package inputs, like for
# pkgs/applications/misc/digitalbitbox/:
# , udevRule51 ? ''
# ,   SUBSYSTEM=="usb", TAG+="uaccess", TAG+="udev-acl", SYMLINK+="dbb%n", ATTRS{idVendor}=="03eb", ATTRS{idProduct}=="2402"
# , ''
# seems like udev packages also can be added to system.udev.packages:
#     system.udev.packages = [ pkgs.digitalbitbox ];

# seems that fort-nix/nix-bitcoin has udev rules for trezor and ledger
# in modules/hardware-wallets.nix which should be usable to figure out
# why permissions are not being set automatically, docs at
# https://nixos.wiki/wiki/Module might help

# the sha256 hashes needed for fetchurl stanzas:
nix-prefetch-url --unpack https://github.com/zkSNACKs/WalletWasabi/archive/v1.1.6.zip

# after setting virtualisation.libvirtd.enable = true and rebuilding, the virsh command
# is available to interact with Xen, QEMU, KVM, LXC, OpenVZ, VirtualBox and VMWare ESX,
# and a service has been started:
systemctl status libvirtd

# list all vms in inactive and active domains:
virsh list --all

# list networks:
virsh net-list

# create empty 10GiB image for vm data:
sudo mkdir /var/lib/libvirt/images/
dd if=/dev/zero of=/var/lib/libvirt/images/debian0.img bs=1M count=10240
virt-install --virt-type kvm --name debian0 --ram 2048 --vcpus=2 --disk path=/var/lib/libvirt/images/debian0.img --network bridge=br0 --graphics vnc --cdrom /home/user/media/os_images/debian-9.8.0-amd64-xfce-CD-1.iso --os-variant=debian9
# valid options for --os-variant can be listed with command below, or set to "auto"
# for autodetection:
osinfo-query os

# command above gives error around /usr/libexec/qemu-bridge-helper not existing, which
# via searching online and finding https://github.com/NixOS/nixpkgs/issues/34972,
# seems to be a known issue but not believed to prevent qemu or kvm vms on nixos

# installed and tried virt-manager, and added kvm-intel to kernelmodules, but still
# gives same error around "could not detect a default hypervisor":
virt-manager

# however, after selecting File > Add Connection > QEMU/KVM user session manually,
# seems like debian vm can be created

# available nixos options can be viewed at https://nixos.org/nixos/options.html

# after setting services.tor.client.enable to true, 127.0.0.1:9050 now is open,
# serving SOCKS5, but still not clear how to set options like ControlPort 9051
# to torrc with nixos

# via systemd logs, seems like torrc used is something like
# /nix/store/82598wz91g76wcqgqm8ha1i2sc9v9fxi-torrc

# turns out it's possible to just set services.tor.controlPort etc, referencing
# nixpkgs/nixos/modules/services/security/tor.nix

# now only remaining part is to figure out format for services.tor.hiddenServices
# by referencing nix-bitcoin.nix, correct map format was found and lightningd
# hidden service was defined, after which .lightning/config could be updated
# to add bind-addr and announce-addr

# .bitcoin/bitcoin.conf also has proxy=127.0.0.1:9050 and bind=127.0.0.1, with
# no further configuration necessary, assuming tor control port on 127.0.0.1:9051
# has been enabled

# since wasabi uses large key depths due to the CJ implementation, for electrum
# wallet's gap limit should be raised:
wallet.gap_limit_for_change = 100
wallet.gap_limit = 100

# installing spark-wallet is simple via nix-bitcoin:
nix-build --arg pkgs 'import <nixpkgs> {}' -A spark-wallet
nix-env -i /nix/store/xrpqwni739bs8c1qphal5593sc6vf7ca-node-spark-wallet-0.2.8

# bug: electrum behavior when bumping fee on one-input-one-output txns is
# to include another input, and to create a change output, while the expected
# behavior is to decrease the size of the only input to make more room for fee

# QEMU disk image for VM:
file /home/user/.local/share/libvirt/images/${VMNAME}.qcow2

# trying to get X to automatically lock, after installing xautolock, the
# following added to i3_config works:
exec_always --no-startup-id xautolock -time 10 -locker i3lock

# running the command manually does lock after specified amount of time,
# so one gotcha is having the manually executed command preventing the
# one in exec_always from being started:
xautolock -time 10 -locker i3lock

# can also suspend to memory with:
systemctl suspend

# seems like increasing gap limits leads to many more addresses being
# watched, which triggers the unresponsive electrs state seen before:
# https://github.com/romanz/electrs/issues/163
# lowered gap limits for specific wasabi and whirlpool wallets, so
# fewer addresses should be watched in the future

# trying to set --onion for spark-wallet crashes due to trying to
# write to a read-only directory:
# https://github.com/shesek/spark-wallet/issues/108
