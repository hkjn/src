# after adding packages or otherwise editing configuration.nix, build new
# configuration and switch to it for next boot:
nixos-rebuild switch

# rebuild but do not switch to new config next boot:
nixos-rebuild test

# after installation, copy .Xresources to ~/ and do:
xrdb -merge .Xresources

# search for packages:
nix search <pattern>

# list all generations:
nix-env --list-generations

# using filesystem, list all generations in the system profile:
ls -l /nix/var/nix/profiles/system-*-link

# switch generations:
nix-env --switch-generation 43

# query for package:
nix-env -q <pattern>

# rebuild VM:
nixos-rebuild build-vm

# check nixos version:
nixos-version

# bitcoind and lightningd can both be installed via official stable packages,
# but installs versions v0.17.1.0 and v0.6.3, should fork repo from
# https://github.com/NixOS/nixpkgs and update locally to later versions, and
# add to local user packages, not configuration.nix

# rebuilding from local packages, branched from nixos-19.03
nixos-rebuild switch -I nixpkgs=~/src/hkjn.me/nixpkgs
ln -s ~/src/hkjn.me/src/nixpkgs ~/.nix-defexpr/nixpkgs
nix -i bitcoin

# switched Makefile to do nixos-rebuild switch towards ~/src/hkjn.me/nixpkgs,
# from branch in fork of nixpkgs based on nixos-19.03 but with patches
# from nixos-unstable to bring bitcoin.nix and clightning.nix to newer
# versions

# uninstall packages:
nix-env -e irssi

# backlight seems to work, however setting the value also affects
# display brightness
cat /sys/class/backlight/intel_backlight/max_brightness
echo "100" | sudo tee /sys/class/backlight/intel_backlight/brightness

# build package from .nix config:
git clone foobar
cat >default.nix <<EOF
with import <nixpkgs> { };
stdenv.lib.overrideDerivation foobar (oldAttrs : {
  src = ./foobar;
})
EOF
nix-build

# useful info at https://nixos.wiki/wiki/Cheatsheet

# nix-shell builds dependencies in specified derivation, then starts an
# interactive shell in which the dependencies of the derivation are installed:
nix-shell -p sqlite xorg.libX11

# nix-shell can be used as script interpreter to install dependencies for the
# actual script:

#! /usr/bin/env nix-shell
#! nix-shell -i python -p python pythonPackages.prettytable

import prettytable
t = prettytable.PrettyTable(["N", "N^2"])
for n in range(1, 10): t.add_row([n, n * n])
print t

# reading about https://nixos.wiki/wiki/Overlays, nix-bitcoin uses it to define
# overlay.nix

# the nix-bitcoin repo links to https://github.com/nix-community/NUR, which
# explains that the packageOverrides stanza can be used either in
# ~/.config/nixpkgs/config.nix or /etc/nixos/configuration.nix to fetch
# packages from that repo, and default.nix in nix-bitcoin is derived from
# the template and docs described in nix-community/NUR

# the default.nix in nix-bitcoin refers to directories like pkgs/electrs/,
# containing default.nix, which seems to have been generated by the rust tool
# crate2nix

# from the nix-bitcoin repo root, the following command builds the electrs
# derivation:
nix-build --arg pkgs 'import <nixpkgs> {}' -A electrs
# build finishes successfully, how to easiest install electrs?
# after successful build, electrs can be started with ./result/bin/electrs

# built results can be installed with:
nix-env -i /nix/store/1aqydk16mih4jcqnxsd8567b916vhna8-electrs-0.6.2


# nix-env operates on profiles, which are sequences of generations

# removing old and unreferenced packages:
nix-collect-garbage

# seek out identical files and replace them with hard links to a single copy:
nix-store --optimise

# lock password to root account, since sudo is used instead:
sudo passwd -l root

# build nixos package closure and install it in the system profile:
nix-env -p /nix/var/nix/profiles/system -f '<nixpkgs/nixos>' -I nixos-config=/etc/nixos/configuration.nix -iA system

# delete specific generations:
nix-env --dry-run --delete-generations 2 3 4 5
nix-env --delete-generations 2 3 4 5
nix-collect-garbage

# install using a specific attribute:
nix-env -i -A gcc40mips
nix-env -i -A xorg.xorgserver

# install all derivations in the Nix expression foo.nix:
nix-env -f ~/foo.nix -i '.*'

# install from a Nix expression specified on the command-line:
nix-env -f ./foo.nix -i -E 'f: (f {system = "i686-linux";}).subversionWithJava'

# enabled systemd.user.services.bitcoin, and after rebuilding service is running:
systemctl --user status bitcoin

# tried enabling systemd.user.services.clightning, but lightningd process can't
# find bitcoin-cli on PATH, since it needs to know where under /nix/store the symlink
# is pointing:
systemctl --user status clightning

# tried enabling systemd.user.services.electrs, but ${pkgs.electrs} is not defined,
# and listing electrs in environment.systemPackages produces an error, despite
# nix-env saying the package is installed:
nix-env -q electrs
