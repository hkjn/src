// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x8f\xdb\x36\x10\x3d\xdb\xbf\x62\xea\x7b\x44\x24\xb9\x15\x2c\x81\x4d\x80\xa2\x06\xd2\x74\x51\x7b\x5b\xf4\x48\x8b\x63\x93\x35\x45\xaa\xe4\x68\xbd\x86\xe0\xff\x5e\x90\xa2\x6d\xf9\x63\x17\x0b\xe4\x64\x69\x66\xde\xbc\x37\x5f\x16\xd7\xd4\x58\x31\xe5\x2b\xaf\xf6\x62\x3a\xe1\xfa\xa3\xf8\x0d\xad\xf5\x3f\x71\xa6\x3f\x8a\xe9\x74\xc2\x5b\xb1\xd4\x26\x82\x89\x20\x1d\xe0\x4b\x8b\xc1\x34\xe8\x08\x76\x86\x34\x7c\x33\x1b\x4d\xce\xb8\x0d\x7c\x47\xda\xf9\xb0\x85\xd0\xb9\xfc\x2e\x09\x78\xed\x15\x0a\xeb\x2a\xbd\xfd\xd7\x55\x0d\x72\x96\x0d\xb0\xda\x03\x97\xa0\x03\xae\x7f\x99\x69\xa2\x36\xfe\xcc\x58\x09\x99\x89\xf4\xc0\x99\x14\x15\x67\xed\x98\x7f\x87\x2b\x88\x18\x9e\x31\x00\xbe\x98\x48\x11\x1a\x69\x9c\xdd\x03\xf9\xc1\x0e\xa4\xf1\x9c\x97\x35\x48\xc1\xd4\x71\x26\x8e\x4f\x29\x29\xa0\x53\xad\x37\x8e\x60\xed\x03\x3c\x06\xdf\x20\x69\xec\x62\x4a\x52\x7b\x6b\xb1\x26\x50\x92\xe4\x74\x92\xfc\xff\x75\x18\x0c\xa6\xba\x15\x6c\x82\x6c\x75\xcc\xb0\xdb\x9a\x0b\xc3\x48\xf2\x3f\xbe\x83\x46\xee\x41\xda\xe8\x61\x85\x60\x1c\x61\xc0\x48\xa8\xc0\xb8\x4b\xa5\xc7\x0e\x9c\xfb\xc4\x66\x62\x24\x4d\xc9\xa8\x57\x5e\x06\x95\x0b\x88\x75\x90\x6d\xe2\x2e\x32\x83\x6f\x80\x52\x7f\xc8\x7b\x7b\x12\xa0\x3f\x89\xd2\xfc\xa3\x56\x75\x6c\xbe\x71\x6b\xcf\x99\xfe\x24\xa6\x93\xbe\x07\xb3\x86\x6a\x1e\xff\x2c\x33\xfb\x70\x38\x64\xf5\xaf\x62\x23\xf0\x48\xc1\xbb\x8d\x28\x63\xe6\xac\xbc\x67\xe6\x84\xfd\xa3\x0b\x60\x54\x0e\xcd\xa0\xbe\x87\x6a\xee\xd6\xbe\xfa\xee\x15\xce\xd5\xe1\x50\x92\x0d\x5a\x93\x86\xbc\x48\xd5\x83\x35\x32\x9e\x14\xa4\x2c\x32\x5b\x2e\x12\xc1\x1d\x38\xda\x88\x50\x60\x4f\x6e\xeb\xfc\xce\x15\x68\x1a\x96\xef\x02\x24\x8b\xf3\x0a\x4f\x98\x0f\x69\x0f\x60\x4c\xa5\x54\xc0\x98\xc9\x6e\x85\x3f\x14\xe7\x35\x77\xc1\x3e\x63\x88\xc6\xbb\xfb\xd8\xbf\x8a\xf3\x15\xec\xca\xfa\x7a\xab\x31\x35\xfa\x3e\xfe\xcb\x28\xe0\x4e\x8e\xbf\x11\x52\xc1\xe0\xd7\xd0\xf7\x60\xd1\x41\x6e\x73\xd2\x9a\x2b\x8e\x79\xdb\x3c\x49\xfb\x26\xe6\xab\x96\xce\xa1\xcd\xb0\xfa\xf8\xfc\x2e\x64\x66\xab\x1e\x11\xc3\x88\x93\xb4\x24\x90\x01\x73\xf3\xdb\xe4\x3b\x2f\xe6\x67\x91\x83\x39\xd3\x9f\xb3\x81\xe4\xca\xa2\x98\x4e\x26\x9c\x42\xfa\x99\x70\xd2\x62\xae\x38\x23\x7d\x7a\xcd\xab\x71\x61\xf9\x26\x23\x41\x44\x74\x17\xd6\x52\x06\x44\x92\x84\x17\x9e\x5f\x3b\xa7\xf2\x91\x77\xf1\xbe\x9d\x34\x36\x47\x0f\x67\x83\x94\xbe\x87\x20\xdd\x06\x2f\xab\xcc\x1b\x3a\x52\xab\xc4\x79\x64\xc3\x8a\x57\x0b\xed\xc3\x68\x5c\x9c\x91\x3a\x05\xa7\xb0\x61\xd5\x93\xff\xca\x91\xca\x5a\x9a\x06\x23\xc9\xa6\xad\x16\xc6\xd5\x78\x1d\x76\x26\x3b\x0e\xad\x5a\xa4\x72\x5f\xa7\x4b\x27\x3e\x1e\xf0\x05\xf6\x77\x63\xad\x59\x48\xf2\x51\x9b\xa5\x7f\x8a\xd5\x43\xfc\xb2\xfc\x5a\xc2\x86\x23\xf9\x81\x7c\x4b\x8d\xcd\x1b\x19\xcf\x8d\x1e\x1d\x24\x2b\x1b\x71\x73\xdb\xef\xf8\x53\x72\x9e\xe0\xfa\x8f\xe9\xf6\xe8\x39\x1b\x3e\x76\x9c\x0d\xdf\xbe\xff\x03\x00\x00\xff\xff\x98\x9b\x4c\x97\x03\x07\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1795, mode: os.FileMode(436), modTime: time.Unix(1518099574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

