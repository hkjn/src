// Code generated by go-bindata.
// sources:
// index.tmpl
// node.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xcf\x6f\xdb\xb8\x12\x3e\x5b\x7f\xc5\xc0\xb9\xbc\x07\xd4\x12\xd2\x5e\x1e\x5c\x55\x0f\xfd\xb1\x87\x00\x6d\x36\x68\xd2\x05\xf6\x48\x89\x63\x93\x1b\x8a\xd4\x92\xe3\x38\x86\xe1\xff\x7d\x41\x8a\x92\x2d\x5b\x76\xd2\x1e\xf6\xd2\x2a\x33\xe4\xc7\x6f\x66\xbe\x19\xd2\xb9\xa0\x5a\x15\x49\x2e\x90\xf1\x22\xc9\x1d\x6d\x14\x16\x49\x69\xf8\x06\xb6\xc9\x64\x61\x34\xcd\x16\xac\x96\x6a\x33\x87\x8f\x56\x32\xf5\x3e\xd9\x25\x09\x7b\x03\x6c\xfe\x24\x9d\x24\xe4\x7e\x19\xe1\x33\xcd\x38\x56\xc6\x32\x92\x46\xcf\x41\x1b\x8d\xef\xe3\xf6\x35\xca\xa5\xa0\x39\x94\x46\xf1\xf7\xc9\xa4\x32\xca\xd8\x39\x94\x8a\x55\x8f\x1e\x8c\x58\xa9\xd0\x83\xd4\xcc\x2e\xa5\x9e\x91\x69\xe6\x70\x8d\x75\x38\xa8\x75\x12\x7f\x03\xf1\x4b\xf8\x95\xa5\xb1\x1c\xed\x1c\xae\x9b\x67\x70\x46\x49\x0e\x57\x9c\x7b\xec\x86\x71\x2e\xf5\x72\x0e\xff\x6b\x9e\x0f\xf7\xdb\xb9\x26\x31\xab\x84\x54\xfc\x3f\xf8\x84\xfa\xbf\x01\x85\x55\x8f\x4b\x6b\x56\x9a\xcf\x22\xa7\x2b\x44\x3c\xdc\x16\x0e\x8b\x98\x91\xd7\x5b\x0f\xdc\xdb\x4a\x43\x64\xea\xde\x1c\xd2\xc0\x94\x5c\xea\x39\x28\x5c\x90\xc7\xca\xb3\x98\xd2\x3c\x8b\x29\xf6\xb9\x2d\x92\x49\x2e\xae\x8b\x9c\x81\xb0\xb8\xf8\x30\xbd\x9a\x16\x79\x65\x38\x16\x4a\xd7\x46\xe7\x59\xf8\xce\x33\x56\xe4\x99\xb8\x2e\x92\x64\x92\x37\xc5\x83\x90\x0e\xa4\x03\x06\xb5\xd1\x92\x8c\x95\x7a\x09\x9c\x39\x51\x1a\x66\x39\x2c\x8c\x05\x12\x08\x5f\x7d\xb6\xb5\xf7\xdd\x22\xad\x8d\x7d\x04\xbb\xd2\xfe\xef\x64\xc2\x08\xba\x53\x52\xf1\xf8\x97\x4e\x6b\x8c\x47\x41\xb9\x81\x9e\x8c\x20\x6a\xdc\x3c\xcb\xe2\x92\x69\xe1\x3f\x3c\x99\x34\xcf\x9a\x43\x32\x6b\x2c\xc1\xa1\x7d\x42\x0b\xf8\x2c\x1d\x39\xa8\x99\xd4\x6a\x03\x64\x5a\x7b\x32\xf1\x8c\x7a\xe0\xac\x46\xb2\xb2\x72\xd3\xa2\xfb\xf2\xa8\x80\x9a\x37\x46\x6a\x0a\x21\xdc\x59\x53\x23\x09\x5c\xb9\x64\x42\x06\x2a\xa3\x14\x56\x04\x9c\x11\x0b\xfe\xbf\x57\x68\x25\x3a\x60\x9a\xc3\xd2\xb2\x46\xb8\x60\xee\xa3\x4e\x26\x5d\xd8\xf1\x88\x03\xd2\x7f\x9a\x15\xd4\x6c\x03\x4c\x39\x03\x25\x82\xd4\x84\x16\x9d\x17\xb1\xd4\x3e\x79\xc9\x64\xcf\x75\x5a\xec\xa9\xec\xd3\x1c\x08\xbb\xca\xb2\xa6\xcd\xbe\x67\x65\x4d\x0d\x24\x64\x20\x6c\x54\x7f\x5e\x10\x51\x91\x4c\x26\x39\x59\xff\xdf\x24\x27\xd1\xd6\x17\x9e\xd0\x3a\xe9\xeb\x4c\x22\x7a\x78\xac\xff\x76\x0b\xe9\x37\xa3\xff\x68\x17\xc0\x6e\xd7\x6b\x81\x78\xc0\xca\x5a\xb0\x01\x66\x17\x3b\xef\x4a\xfd\xff\x33\xc8\x37\xee\x7b\xbb\xe0\xa7\x81\x2f\x33\xbe\xd1\x0b\x93\xfe\x14\xe7\x5b\xc3\x11\x24\x1f\xc1\xeb\x2b\xa0\x0d\xc7\xac\x47\xf7\x1b\x6e\x38\xec\x76\xd3\xe2\xd4\x06\xbd\xe9\x23\xe7\x16\x9d\x0b\x24\x7c\xf7\xbc\x48\xe4\xa3\x92\xcc\x0d\x68\x6c\xb7\xb0\x96\x24\x20\x0d\x2e\x98\xed\x76\xfb\x40\xf7\xc1\x6d\xb7\x80\xca\x21\xec\x76\x3f\xf4\xa3\x36\x6b\x0d\xcc\x2f\xdf\x6e\x67\x5e\xcf\x61\xdd\xf9\x43\x3f\x29\x53\x3d\x8a\x30\x17\x8f\x8f\x6e\xc3\x38\x58\xf0\x02\xd4\x83\x21\xa6\xc0\xe7\xea\x24\x8a\xf4\x76\x55\xfb\x14\xb9\x57\x41\x54\x82\x69\x8d\x6a\x14\xe5\x73\xf4\xbd\x00\x74\xbb\xaa\x4b\xb4\x60\x16\xd0\x20\xda\x13\x24\x85\x1a\xd2\x3b\xef\x79\x35\x8e\x36\xb6\x3e\xe0\xd6\x16\x66\x14\xbc\x05\x6e\x43\xf6\x7b\xce\x53\xce\xb3\xd8\x99\x7e\x06\xbf\x05\xc9\x3f\x4c\x03\xe2\xf4\x60\x1c\x47\xc3\x5d\x7b\x52\x18\xc3\x6f\xcf\x37\xf5\xcd\xa1\x8e\x4f\x25\x25\x8a\xaf\xcc\x11\x38\x44\x3d\xb0\x5e\x8d\xe5\x5c\x14\x91\x39\x38\x62\x84\x43\xd7\xef\x2b\x0b\x25\x53\x4c\x57\x38\xb0\x3f\x08\x94\x27\x9e\x2e\xb3\xdb\x2d\x58\xa6\x97\xd8\xe5\x7e\xb6\xdb\x0d\xf8\x9f\x6f\xbc\xa3\x9e\x6b\xff\x4c\xef\x85\xb1\x34\xde\x60\x7d\x31\xda\xd6\xd9\xa7\xbe\x77\xf8\x4c\x3c\xc8\x1a\x1d\xb1\xba\x49\xef\xa5\xae\x70\x64\x59\x50\xca\x48\x05\x7b\x98\xce\x97\x7e\x41\x57\xdd\xfb\x44\x5d\x5c\xf5\xa9\xcd\xcc\x83\xf9\x71\x19\xad\x5f\xf7\x20\xb0\x1e\x11\xe9\xbe\xbb\x8f\x64\xf4\x2e\xc8\x48\xea\x27\x23\x2b\x1c\x28\x69\x6f\xbb\x89\x5f\x51\x4f\xef\x8a\x73\x72\xfa\xca\x4a\x54\x83\xfa\x7e\x73\x8c\x8c\x13\x72\x60\xf4\x61\xaf\x86\xfa\xf8\xed\xb9\x91\x76\x03\x24\x6b\x1c\xdd\x0f\x16\x2b\x94\x4f\xc8\x8f\x34\xb2\x97\x48\x47\x72\x44\x25\x6d\xf9\x4a\x54\x63\x29\xec\x4e\x48\xef\xc9\x76\xf7\xcb\xd1\x92\x96\xef\x98\xa7\xa5\xed\x65\x91\xfa\x7f\x2e\xe1\x7f\x8f\x01\x9c\x9e\xd3\x87\x72\xb1\x44\x0d\xdb\xd4\xa8\x69\xd8\xec\xbd\xed\x2e\x7e\xbd\x58\xa2\xe3\x8e\xaf\xcd\x4a\xd3\xc0\xf4\x05\x1d\x49\x1d\x9e\xc3\xc3\x56\xed\xc4\x7f\xa1\x96\x27\x55\xe9\x78\x9d\xa9\x4a\x74\xdf\xf0\x5f\xa8\xcc\xb9\xde\x3f\xe0\xdf\x0f\x80\x03\xdb\xab\xa6\xc0\xbe\xd1\xcf\x95\xf5\x44\x13\x2f\x55\xb1\x9d\xd7\x71\x6e\x7e\x66\x9a\x4b\xee\xa7\xe4\x61\x39\x47\x9c\xfd\x77\x7b\x51\x86\x17\xa3\xc6\xf5\xc1\xfc\xed\x46\x7c\xff\xb6\x75\x58\x85\xd8\x9d\x30\x6b\x17\xb7\x91\x60\x04\x6b\x84\x3a\xdc\xcb\x6b\xa6\xc9\xbf\x74\x4d\x83\x7a\x80\x06\x64\xd6\xcc\xf2\xf8\xf2\x3c\xa3\xa0\xd3\x4b\xc2\x8f\xd7\x57\xdc\x1a\xfb\xcb\xf1\xe5\xdb\xe3\xac\xa0\x3e\x1f\xe7\xe8\x8c\xb2\x46\xe7\xf8\xaf\x5d\x17\xe1\x8d\x16\x9f\x67\xe8\xa2\x1a\x2f\xeb\xe7\xdf\xb8\x2c\x2e\x09\x2e\xcf\xda\xdf\x6a\x79\xd6\xfe\x48\xfe\x27\x00\x00\xff\xff\xea\x78\xfd\xca\x2c\x0f\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3884, mode: os.FileMode(436), modTime: time.Unix(1519926261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x6f\xdb\x30\x0c\x85\xcf\xd6\xaf\x20\xda\xcb\x06\x34\x16\xb2\xd3\xe0\x6a\x02\xba\xed\x52\x60\xd8\x0e\x49\x77\x97\x2d\x26\x12\x2a\x53\x86\xc4\x36\x2d\x02\xff\xf7\x41\xb6\x97\x36\x5b\xd1\x93\xad\xc7\xc7\x4f\xe4\x4b\xac\x1c\xf7\x41\x0b\xe5\xd0\x58\x2d\x54\xe6\xe7\x80\x5a\xb4\xd1\x3e\xc3\x51\x54\xbb\x48\xbc\xda\x99\xde\x87\xe7\x06\x6e\x92\x37\xe1\x5a\x8c\x42\x98\x2b\x30\xcd\xa3\xcf\x9e\xd1\x16\x1b\xe3\x13\xaf\x2c\x76\x31\x19\xf6\x91\x1a\xa0\x48\x78\xbd\xb4\x1f\xd0\xef\x1d\x37\xd0\xc6\x60\xaf\x45\xd5\xc5\x10\x53\x03\x6d\x30\xdd\x7d\x81\xb1\x69\x03\x16\x48\x6f\xd2\xde\xd3\x8a\xe3\xd0\xc0\x1a\xfb\xe9\xa2\xb9\xc8\xf6\x0a\x96\x37\x57\x9c\x6d\x4c\x16\x53\x03\xeb\xe1\x09\x72\x0c\xde\xc2\xa5\xb5\x85\x3d\x18\x6b\x3d\xed\x1b\xf8\x3c\x3c\xbd\xee\x4f\x0d\xb1\x5b\x75\xce\x07\xfb\x01\x1f\x91\x3e\x4e\x14\xd3\xdd\xef\x53\x7c\x20\xbb\x5a\x66\xba\x44\xc4\xd7\x6d\xd3\x65\x0b\x73\x99\xeb\x53\x01\x9f\xb4\x36\x32\xc7\xfe\x24\x4f\x31\x98\xe0\xf7\xd4\x40\xc0\x1d\x17\x96\x92\x4b\xa4\x4a\x2e\x11\x97\x6c\xb5\xa8\x94\x5b\x6b\x65\xc0\x25\xdc\x7d\xb9\x90\x17\x5a\x75\xd1\xa2\x0e\xd4\x47\x52\x72\x7a\x57\xd2\x68\x25\xdd\x5a\x0b\x51\xa9\x41\xff\xf6\x78\xf0\xb4\x07\x8a\x16\x61\x76\x1f\x8f\x50\xff\x8c\x16\x6f\x2d\x8c\x23\x94\xd3\x8d\xb5\x09\x73\xc6\x5c\x6f\x38\x15\xf7\x38\x2e\xb4\x5a\xc9\x61\x22\x4d\xcb\x69\x51\x55\x8a\x53\x79\x54\x8a\x9d\xbe\xb5\x4a\xb2\x3b\x1d\x6f\x82\x37\xf9\x4c\xf9\x61\x32\x43\x46\xa4\x33\xf5\x12\x3a\x67\x88\x30\x9c\x9b\xbf\xcd\x22\x64\x36\x8c\xe7\xa5\x5f\x0f\x09\x5a\x13\x0c\x75\x78\xa6\x6f\x1d\xfa\xff\x2a\x4a\xce\x23\xbe\x4c\x6a\xf5\xbf\x9b\xd7\x1b\x17\x13\xbf\xec\xa9\x24\xdb\x93\xf9\x78\x84\x83\x67\x07\xf5\xb4\x10\x8c\x63\xe9\x9b\x1f\x18\x32\xc2\x38\xde\xd1\x3d\xc5\x03\x81\x29\x86\x22\x93\x9d\x58\xe7\x90\xba\xac\xbf\xf5\x3d\x66\x36\xfd\x50\x6f\x3c\x75\xf8\x86\x2d\x20\x41\xbd\x2c\x9f\xdf\xc2\xfc\xad\xd5\xdf\x31\x77\x9b\x92\xce\xbb\xae\xaf\x73\x1c\xdb\x78\xf7\x3e\xed\xe4\xdb\x3a\xec\x5f\x39\x97\xfc\x94\x5c\x7e\x73\x25\xe7\x3f\x9f\x92\xf3\x57\xff\x27\x00\x00\xff\xff\x23\x06\xd6\xd2\xfd\x03\x00\x00")

func nodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_nodeTmpl,
		"node.tmpl",
	)
}

func nodeTmpl() (*asset, error) {
	bytes, err := nodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.tmpl", size: 1021, mode: os.FileMode(436), modTime: time.Unix(1518802299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"node.tmpl": nodeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"node.tmpl": &bintree{nodeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

