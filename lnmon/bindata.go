// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xc1\x6e\x1b\x37\x10\x3d\x7b\xbf\x62\xea\x4b\x2f\xcd\x12\x49\x6e\x05\x4b\xc0\x0e\x50\xd4\x80\xeb\x06\xb5\xd2\xa2\x47\x4a\x1c\x89\xac\xb9\x33\x0b\x72\x36\x8e\xb1\xf0\xbf\x17\xa4\x56\xd2\x2a\xb6\x62\x37\x17\x43\x24\x1f\xdf\xbc\x37\xc3\x19\xaf\xf6\xd2\x45\xd3\xe8\x25\xbb\x07\xd3\x68\xff\xd6\xfc\x86\x31\xf2\x0f\x5a\xf9\xb7\xa6\xd1\xbd\x59\xf8\x90\x21\x64\xb0\x04\xf8\xa5\xc7\x14\x3a\x24\x81\xfb\x20\x1e\x2e\x83\xac\x38\x10\x58\x72\x70\x1d\x36\x5e\x28\xd0\x06\x6e\x50\xee\x39\xdd\x41\x1a\xa8\xae\xad\x80\x5e\xb1\x43\x13\xa9\xf5\x77\xff\x52\xdb\xa1\x56\x75\x03\x96\x0f\xa0\x2d\xf8\x84\xeb\x5f\xce\xbd\x48\x9f\x7f\x56\x6a\x82\x9c\x9b\xf2\x43\x2b\x6b\x5a\xad\x7a\xd3\x6c\xa5\x20\xf4\x43\xea\x39\x63\x51\x24\x0c\x11\x6d\x22\xe8\x38\x21\xd8\x25\x0f\x02\xe2\x11\x02\x11\x26\x28\x1a\x02\x6d\x32\xf0\xfa\x48\x68\x41\x5c\xdf\x94\xd0\x9d\x2d\x00\x08\x02\x68\x73\xc0\x54\x08\xb9\xc7\x64\x05\x1b\xf1\x98\x11\x9c\xc5\x8e\x29\xff\x54\x2f\xce\x40\xcb\x8c\xe9\x33\xc2\xbd\xb7\x35\xe2\xc3\x8f\x09\xc1\x71\xa0\xcd\x41\xeb\x3f\x3c\x40\x67\x1f\xc0\xc6\xcc\xb0\x2c\xa2\x04\x13\x66\x41\x07\x81\xaa\x88\x27\xce\x3b\xde\x27\x48\x45\x52\x2b\xa6\xcc\x11\xb3\x0a\xe4\xf0\x4b\x5b\xea\x74\x6e\x3e\x26\xee\x50\x3c\x0e\x19\x9c\xcd\x7e\xc9\x36\xb9\x92\x24\xc8\xab\x64\xfb\x62\xc7\x59\xb1\xcd\x3a\x71\x07\xe2\x6b\x92\x38\xee\x54\xf9\x77\x66\x5b\x89\xe5\x36\x1f\x6e\x57\x87\x40\x6b\xd6\xca\xbf\x33\xcd\x38\x42\x58\x43\x3b\x25\xcc\xb5\x57\xf9\xcf\xa9\x8c\x6f\x1e\x1f\x8b\xaf\x13\x04\x19\x74\x96\xc4\xb4\x31\x53\xd9\xb5\x9a\xd6\xdb\xe0\xe3\x08\x18\x33\xc2\x2b\x49\x88\x05\x4e\x11\xbd\x01\x24\x57\x88\x66\x86\xe2\xee\xf5\x9d\xb6\xb4\x7f\xa0\x27\x4d\x3d\x43\x72\xda\x56\x15\xa3\x7b\xf3\xc7\x90\x20\xb8\x8a\xac\x77\xc6\xf1\x38\x14\xad\xb9\xbd\x61\x87\x57\xee\xf1\x71\xa2\xdd\x67\xa4\x36\xd1\x1c\x7d\x11\x83\xcd\x3b\x51\x85\xd9\xd6\x8d\x23\x72\x78\xca\x33\xcb\xec\x27\xba\x23\xbe\xa7\xe9\xe2\x9a\x13\xf0\x90\xa0\xec\x10\x3b\x7c\x92\xc2\x5d\x18\xe7\x12\xe6\x1a\xe8\x9b\x46\x2e\x26\xdc\x57\x12\x26\x96\xcf\x98\x72\x60\x7a\x91\xe5\xaf\x09\xf7\x3c\xcb\x32\xf2\xea\xce\x63\xb9\xf3\x22\xd3\xe5\x0c\xfb\x94\xed\x6f\x84\x92\x8c\x32\x00\xc6\x11\x22\xd2\x11\x41\x29\x4a\x71\x52\x13\x93\x6b\x53\xb2\xd8\xf8\xca\xdb\x1f\xbc\x25\xc2\x58\x09\x56\xbb\xdf\xff\x93\xa3\x2a\x68\x3f\x22\xa6\x99\x0e\x29\x33\xc5\x26\xac\x75\xeb\xcb\xd9\xbe\x7b\xdf\x9b\x8a\xd5\xca\xbf\x2f\x6b\xb1\xcb\x88\xa6\x39\xd3\x92\x4c\x73\x76\xa6\xc5\x9b\x2b\xa7\x95\xf8\xdd\xaa\xbe\xa6\xf9\xc6\xb5\xcd\x02\x19\x91\xe6\x9b\x93\x13\xc8\x62\x05\xe7\x07\xbf\x0e\xe4\xea\x90\x1d\xf2\xb3\xdb\xe2\xb1\x9b\x0e\xb4\xaa\x1a\xc6\x11\x92\xa5\x0d\x9e\x74\x59\x5e\xf6\x41\xaf\x33\x87\xca\x6e\x5b\xa4\xbd\xf5\x9c\x66\xa5\xd4\x4a\xdc\x0e\x5b\x50\xdb\xfe\x28\xc7\xc7\xfb\xc5\xd8\x22\x74\x98\xc5\x76\x7d\x7b\x1b\x68\x85\x5f\xa1\x0e\x91\x76\x95\x6b\x6f\x8b\xe1\x93\xb1\xca\xc8\x98\x17\xf9\xe8\xea\xef\x21\xc6\x70\x6b\x85\xb3\x0f\x0b\xfe\x94\xdb\x8b\x7c\xb9\xf8\x30\xc1\xb6\xad\xf5\xfd\x74\x0b\x8f\xdd\x69\xc2\x7d\xaa\x0f\x3d\xac\xa6\x97\xd0\xe8\xa1\xfc\x27\x57\xe5\xef\xb3\x03\xf7\x9b\x03\xee\x95\x23\x57\x4d\x1f\x0a\x6a\xfb\xdd\xf0\x5f\x00\x00\x00\xff\xff\x1c\xa8\x54\x56\x3f\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2111, mode: os.FileMode(436), modTime: time.Unix(1518008362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

