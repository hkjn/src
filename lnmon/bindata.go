// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x93\xdb\x36\x0f\x3e\x4b\xbf\x02\xaf\x73\x8e\x34\x49\x6e\xef\x30\x9a\x49\x36\x87\xee\x4c\xb2\xcd\x74\x37\xed\xf4\x48\x8b\xb0\xc9\xae\x44\xa8\x24\xb4\x8e\xc7\xe3\xff\xde\x21\x45\xcb\x92\xad\xdd\xee\xa1\x27\xcb\xf8\x20\x1e\x00\x0f\x40\x0a\xcd\x6d\x53\xe5\x62\x4d\x6a\x5f\xe5\x99\xd0\xef\xaa\x5f\xb0\x69\xe8\x7f\xa2\xd4\xef\xaa\x3c\xcf\x44\x57\x3d\x68\xe3\xc1\x78\x90\x16\xf0\x67\x87\xce\xb4\x68\x19\x76\x86\x35\x7c\x35\x5b\xcd\xd6\xd8\x2d\xdc\x21\xef\xc8\x3d\x82\xeb\x6d\xf8\x9f\x67\x92\x41\xd4\xa4\xb0\x6a\x6c\xa1\x1f\xff\xb2\x45\x8b\xa2\x8c\x02\x58\xef\xf3\x4c\x48\xd0\x0e\x37\x1f\x57\x9a\xb9\xf3\xff\x2f\xcb\x64\xb3\xaa\xc2\x87\x28\x65\x55\x88\xb2\x9b\x22\xd8\xe1\x1a\x3c\xba\x27\x74\x01\xcc\x13\x3a\x6f\xc8\xe6\xd9\x10\xe4\x70\x80\xe2\x1b\xd9\xdf\x07\xe9\xf1\x78\x0a\x25\xad\x02\xfc\x69\x3c\x7b\x68\xa5\xb1\xcd\x1e\x98\x86\x53\xf2\x8c\x35\xc2\x08\xa3\x6c\x91\x9d\xa9\xfd\xaa\x3a\x7d\x05\x0c\x80\x56\x75\x64\x2c\xc3\x86\x1c\x7c\x77\xd4\x22\x6b\xec\x7d\x9e\x31\x41\x4d\x4d\x83\x35\x83\x92\x2c\xa3\xfe\xef\x1e\x9d\x41\x1f\x83\x6e\x9d\xec\xb4\x8f\xe2\xb1\x48\x79\x76\xaa\x52\x0a\x31\x49\xf1\x4f\xea\xa1\x95\x7b\x90\x8d\x27\x58\x23\x18\xcb\xe8\xd0\x33\x2a\x30\x16\x58\xe3\x42\xc9\xce\x95\x2d\x57\xd5\x19\x1c\x28\xe9\xf5\x9a\xa4\x53\x21\x85\x3c\xf3\xb5\x93\x5d\xe8\xd1\x00\xd4\x51\x0b\x1c\x0a\xca\x44\xcd\x88\x40\xbf\xaf\x52\xbb\x4e\x68\xd5\xa9\x86\xc6\x6e\x48\x94\xfa\x7d\x95\x67\x87\x03\x98\x0d\x14\xb7\xfe\xb7\xa1\xcd\xf0\xf6\x78\x8c\xf0\x9f\xf5\xf5\x20\x3c\x3b\xb2\xdb\x2a\x31\x43\x94\xe9\x7f\x8c\x1c\x7c\x7f\xed\x1d\x18\x15\x4d\xc7\x5e\xde\xda\x0d\x15\x77\xa4\xf0\x56\x8d\xcd\x1c\xb0\x06\x0c\x91\x7b\xc5\xa7\xc6\x48\x3f\x22\x08\xa7\xc8\x28\x99\x1d\x04\x0b\xee\xd8\x78\x84\xe4\xf6\xc3\x3e\x5a\xda\xd9\xe4\x1a\xda\x45\xbd\x83\x20\xb1\xa4\x70\xf4\x79\x1b\x98\x00\xd3\x50\x4a\x39\xf4\x31\xd8\x35\xf0\x4f\x49\x79\x19\x3b\xf9\x26\xee\x2e\xfb\x26\x0a\x3f\xe7\xbb\x6e\xa8\x7e\xd4\x18\x0a\xbd\xec\xff\x79\x62\xb0\x70\xc6\x1f\x08\x21\x61\xa0\x0d\x1c\x0e\xd0\xa0\x85\x58\xe6\x80\x35\x66\xec\x23\xdd\x88\x65\x33\xf3\xd1\xf2\x09\xe7\x0e\xc5\x77\x44\x17\xdd\xba\xf0\xb1\x68\x3d\xb5\x2c\xee\xfa\xf6\x8e\x5c\x2b\x9b\x1b\x2d\xad\xc5\x26\x85\x0c\x12\xa8\x4f\xa2\xd8\xd9\xd0\x81\xeb\x43\x2f\x61\x4f\x8f\x19\xfd\xe7\xe0\x03\xaf\x3f\x54\x31\xbc\x28\xf5\x87\x28\x60\xb9\x6e\xb0\xca\xb3\x4c\xb0\x0b\x3f\x99\x60\x5d\xdd\x2a\x51\xb2\x1e\xff\x46\x66\xcd\x24\x5f\xa5\x67\xf0\x88\x76\x26\x7d\x33\x06\x9e\x89\x13\x32\xf0\x2c\x19\xe7\xaa\xd8\x42\xd9\x48\x5b\xe3\x4c\xfe\xa0\xd1\x5c\x69\x44\x39\x40\x3c\x1c\xc0\x49\xbb\xc5\x79\xe5\x23\xf1\x27\x59\xa8\xea\xcc\x84\x61\x72\x8a\x7b\x4d\x6e\xc2\x02\x51\xb2\x1a\x8d\x83\xd9\x30\x41\x41\x7f\xa1\x08\xe9\x3e\x98\x16\x3d\xcb\xb6\x2b\xee\x8d\xad\x71\xc1\xec\xb2\x0d\x57\xc7\x9c\x74\xc5\x17\xf4\xf5\x7d\xa8\xc6\x8b\x56\x9f\x87\xf4\x1f\xe8\xc7\xcb\xa7\x8d\x76\x0f\x1a\xdb\x89\xe5\xb9\x5e\x93\x71\x2d\x53\xc3\x13\x17\xe4\x3e\xdc\x5e\x89\x0e\xaf\x64\x43\x4b\xbd\xe5\x99\xe8\x0b\x7a\x36\x56\xb2\xa1\x39\x21\xc6\x9a\xcd\xa4\x21\xf3\xde\x5f\x74\xf5\xdc\xd4\x13\xa6\x85\x8e\x86\xb4\x93\xfa\x56\x2d\xd5\xe4\x9b\x97\x4c\x5e\x9b\xe2\x9e\x5d\xd8\xc7\x0b\x26\x13\xac\x4b\xea\x73\x9b\xc3\xd7\x92\xc5\x00\xff\xba\xce\xcf\x97\x19\x8c\xfa\xb8\x4a\xa3\x71\x23\xad\x32\x2a\x0c\xc2\xaa\x1a\x6f\xb0\x37\x0b\xca\xf1\x3b\xed\xa1\xb0\x8b\x2d\xee\x26\x23\x26\xab\x53\xdb\xd2\x93\xc0\x63\x1d\xd3\xf2\x9a\x76\x3e\xb9\xb1\x96\x0c\x3b\x84\x36\x6e\xc0\x9d\xb4\x1c\xae\x7c\xea\xd0\xce\x4e\x03\xa6\x9d\x74\x6a\x5c\x31\x8b\x44\x08\x63\xf4\x2f\x8b\xe1\x86\xac\xc5\x9a\x51\xbd\x62\x5d\xdc\xf5\xed\x1a\x5d\xd8\x61\x97\x6b\xe3\x8a\x13\xc3\xa0\xdf\x5c\x56\xe9\x19\x8a\x0c\xe3\x1e\x16\x61\x9c\xea\xe1\xf6\x41\x9f\x48\x71\x3c\xc2\xeb\x27\x7f\xcc\xe7\xbf\x5f\x0b\x2f\xd3\xe6\xe2\x5e\x7e\xc5\x83\xc2\x12\xc3\xe5\xa3\xe2\xfa\xc2\x16\xe5\xf0\xb6\x15\xe5\xf0\xd4\xfd\x27\x00\x00\xff\xff\xf4\x21\xa8\x33\xf2\x0a\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2802, mode: os.FileMode(436), modTime: time.Unix(1518715690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

