// Code generated by go-bindata.
// sources:
// index.tmpl
// node.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4f\x6f\xdb\xb8\x13\x3d\x5b\x9f\x62\xe0\x5c\x7e\x3f\xa0\x96\x90\xf6\xb2\x70\x55\x2d\xfa\x67\x0f\x01\xda\x6e\xd0\xa4\x0b\xec\x91\x12\x27\x26\x37\x14\xa9\x25\x47\x71\x0c\xc3\xdf\x7d\x41\x89\x92\x2c\x5b\xb6\xd3\x62\xb1\x97\x96\x9e\xa1\xde\xbc\x99\x79\x1c\x4a\x49\x05\x95\x2a\x8b\x52\x81\x8c\x67\x51\xea\x68\xa3\x30\x8b\x72\xc3\x37\xb0\x8d\x66\x0f\x46\xd3\xe2\x81\x95\x52\x6d\x96\xf0\xde\x4a\xa6\xde\x46\xbb\x28\x62\xaf\x80\x2d\x9f\xa4\x93\x84\xdc\x6f\x23\x7c\xa6\x05\xc7\xc2\x58\x46\xd2\xe8\x25\x68\xa3\xf1\x6d\x78\x7c\x8d\x72\x25\x68\x09\xb9\x51\xfc\x6d\x34\x2b\x8c\x32\x76\x09\xb9\x62\xc5\xa3\x07\x23\x96\x2b\xf4\x20\x25\xb3\x2b\xa9\x17\x64\xaa\x25\x5c\x63\xd9\x04\x6a\x9d\xc4\x5f\x41\x58\x09\xbf\x33\x37\x96\xa3\x5d\xc2\x75\xf5\x0c\xce\x28\xc9\xe1\x8a\x73\x8f\x5d\x31\xce\xa5\x5e\x2d\xe1\x97\xea\x79\xff\x79\xbb\xd4\x24\x16\x85\x90\x8a\xff\x0f\x9f\x50\xff\xbf\x41\x61\xc5\xe3\xca\x9a\x5a\xf3\x45\xe0\x74\x85\x88\xfb\x8f\x35\xc1\x02\x66\xe0\xf5\xda\x03\xf7\xb6\xdc\x10\x99\xb2\x37\x37\x65\x60\x4a\xae\xf4\x12\x14\x3e\x90\xc7\x4a\x93\x50\xd2\x34\x09\x25\xf6\xb5\xcd\xa2\x59\x2a\xae\xb3\x94\x81\xb0\xf8\xf0\x6e\x7e\x35\xcf\xd2\xc2\x70\xcc\x94\x2e\x8d\x4e\x93\x66\x9d\x26\x2c\x4b\x13\x71\x9d\x45\xd1\x2c\xad\xb2\x7b\x21\x1d\x48\x07\x0c\x4a\xa3\x25\x19\x2b\xf5\x0a\x38\x73\x22\x37\xcc\x72\x78\x30\x16\x48\x20\x7c\xf6\xd5\xd6\xde\xf7\x15\x69\x6d\xec\x23\xd8\x5a\xfb\xdf\xd1\x8c\x11\x74\x51\x62\xf1\xf8\x97\x8e\x4b\x0c\xa1\x20\xdf\x40\x4f\x46\x10\x55\x6e\x99\x24\x61\xcb\x3c\xf3\x0b\x4f\x26\x4e\x93\x6a\x9f\xcc\x1a\x73\x70\x68\x9f\xd0\x02\x3e\x4b\x47\x0e\x4a\x26\xb5\xda\x00\x99\xd6\x1e\xcd\x3c\xa3\x1e\x38\x29\x91\xac\x2c\xdc\x3c\xeb\x56\x1e\x15\x50\xf3\xca\x48\x4d\x4d\x0a\xb7\xd6\x94\x48\x02\x6b\x17\xcd\xc8\x40\x61\x94\xc2\x82\x80\x33\x62\x8d\xff\xef\x1a\xad\x44\x07\x4c\x73\x58\x59\x56\x09\xd7\x98\xfb\xac\xa3\x59\x97\x76\x08\xb1\x47\xfa\x4f\x53\x43\xc9\x36\xc0\x94\x33\x90\x23\x48\x4d\x68\xd1\x79\x11\x4b\xed\x8b\x17\xcd\x06\xae\xf3\x6c\xa0\x32\x94\xb9\x21\xec\x0a\xcb\xaa\xb6\xfa\x9e\x95\x35\x25\x90\x90\x0d\x61\xa3\xfa\x78\x8d\x88\xb2\x68\x36\x4b\xc9\xfa\xff\x66\x29\x89\xb6\xbf\xf0\x84\xd6\x49\xdf\x67\x12\xc1\xc3\x43\xff\xb7\x5b\x88\xbf\x18\xfd\x47\xbb\x01\x76\xbb\x5e\x0b\xc4\x1b\xac\xa4\x05\x1b\x61\x76\xb9\xf3\xae\xd5\xbf\x9e\x40\xbe\x71\xdf\xda\x0d\x3f\x0c\x7c\x9e\xf1\x8d\x7e\x30\xf1\x0f\x71\x0e\x4d\x3a\x87\xd7\xf5\xf1\x65\x78\x86\x23\x48\x3e\x81\xd7\x77\x54\x1b\x8e\xc9\x80\x6e\x38\xde\x70\xd8\xed\xe6\xd9\xb1\x0d\x7a\xd3\x7b\xce\x2d\x3a\xd7\x90\xf0\xa7\xf1\x22\x91\xf7\x4a\x32\x37\xa2\xb1\xdd\xc2\x5a\x92\x80\xb8\x71\xc1\x62\xb7\x1b\x12\x1d\x92\xdb\x6e\x01\x95\x43\xd8\xed\xbe\xeb\x47\x6d\xd6\x1a\x98\xdf\xbe\xdd\x2e\xfc\xf9\x68\xf6\x9d\x0e\xfa\x41\x99\xe2\x51\x34\x73\xf6\x30\x74\x9b\xc6\xde\x86\x0b\x50\xf7\x86\x98\x02\x5f\xab\xa3\x2c\xe2\xaf\x75\xe9\x4b\xe4\x5e\x04\x51\x08\xa6\x35\xaa\x49\x94\x8f\xc1\x77\x01\xe8\x6b\x5d\xe6\x68\xc1\x3c\x40\x85\x68\x8f\x90\x14\x6a\x88\x6f\xbd\xe7\x02\xce\x5d\x5d\x7a\x10\x53\x5b\xd0\xc6\x96\x03\x39\xc8\x99\x62\xba\x40\xe7\x27\x56\x7d\x4c\xf5\xce\x27\xec\x1f\x08\x84\x3f\xb4\xdb\xef\xcd\xf7\x7f\x27\x24\x09\x2c\x5f\x1e\xf4\x5e\x60\xf9\xe2\x8a\x8d\xa3\xba\x56\x82\x93\x65\x6c\x4b\xd8\x36\x77\x2f\xec\x44\x86\x69\x12\x66\x9a\xbf\xbd\x5e\x83\xe4\xef\xe6\x0d\xe2\x7c\xef\x22\x0b\x86\xdb\x36\x52\x73\x81\xbd\x3e\x3d\x0e\x6f\xf6\x4f\xec\xf1\xe1\x11\xd9\x67\xe6\x08\x1c\xa2\x1e\x59\xaf\xa6\xd4\x25\xb2\xc0\x1c\x1c\x31\xc2\xb1\xeb\xf7\xda\x76\x95\x1f\xd9\xef\x05\xca\x23\x4f\x57\xd9\xed\x16\x2c\xd3\x2b\xec\x54\xb6\xd8\xed\x46\xfc\x4f\x8f\x98\x83\xe9\xd2\xfe\x8c\xef\x84\xb1\x34\x3d\x4a\xfa\x66\xb4\x43\x62\x28\x7d\xef\xf0\x95\xb8\x97\x25\x3a\x62\x65\x15\xdf\x49\x5d\xe0\xc4\xb6\xe6\x4c\x4c\x74\xb0\x87\xe9\x7c\xf1\x27\x74\xc5\x9d\x2f\xd4\xd9\x5d\xd3\x8a\x3f\xb3\xef\x84\x48\x87\x39\x76\x20\xa3\x37\x8d\x8c\xa4\x7e\x32\xb2\xc0\x91\x92\x06\xdb\x4d\x58\x05\x3d\xbd\xc9\x4e\xc9\xe9\x33\xcb\x51\x8d\xfa\xfb\xc5\x31\x32\x4e\xc8\x91\xd1\xa7\x5d\x8f\xf5\xf1\xdb\x73\x25\xed\x06\x48\x96\x38\xf9\x3c\x58\x2c\x50\x3e\x21\x3f\xd0\xc8\x20\x91\x8e\xe4\x84\x4a\xda\xf6\xe5\xa8\xa6\x4a\xd8\x45\x88\xef\xc8\x76\x37\xf3\xc1\x96\x96\xef\x94\xa7\xa5\xed\x65\x11\xfb\x7f\xce\xe1\x7f\x0b\x09\x1c\xc7\xe9\x53\x39\xdb\xa2\x8a\x6d\x4a\xd4\x34\x3e\xec\xbd\xed\x36\xac\x2e\xb6\xe8\xf0\xc4\x97\xa6\xd6\x34\x32\x7d\x42\x47\x52\x37\x1f\x12\xe3\xa3\xda\x89\xff\x4c\x2f\x8f\xba\xd2\xf1\x3a\xd1\x95\xe0\xbe\xe1\x3f\xd1\x99\x53\x67\x7f\x8f\x7f\x3f\x00\xf6\x6c\x2f\x9a\x02\xc3\x41\x3f\xd5\xd6\x23\x4d\x5c\xea\x62\x3b\xaf\xc3\xdc\xfc\xc8\x34\x97\xdc\x4f\xc9\xfd\x76\x4e\x38\xfb\x75\xfb\x4a\xd0\xbc\x6b\x6b\x5c\xef\xcd\xdf\x6e\xc4\xf7\x5f\x05\x0e\x8b\x26\x77\x27\xcc\xda\x85\xc7\x48\x30\x82\x35\x42\xd9\xbc\x81\xac\x99\x26\x7f\xfd\x99\x0a\xf5\x08\x0d\xc8\xac\x99\xe5\xe1\x9d\xfd\x84\x82\x8e\x2f\x09\x3f\x5e\x5f\x70\x6b\x0c\x97\xe3\xe5\xdb\xe3\xa4\xa0\x3e\x1e\xd6\xe8\x84\xb2\x26\xe7\xf8\xcf\x5d\x17\xcd\xdb\x68\x78\x11\x45\x17\xd4\x78\x5e\x3f\xff\xc5\x65\x71\x4e\x70\x69\xd2\x7e\xe5\xa6\x49\xfb\xe7\x85\x7f\x02\x00\x00\xff\xff\xda\x51\x25\x2a\x66\x10\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 4198, mode: os.FileMode(420), modTime: time.Unix(1521135288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x6f\xdb\x30\x0c\x85\xcf\xd6\xaf\x20\xda\xcb\x06\x34\x16\xb2\xd3\xe0\x6a\x02\xba\xed\x52\x60\xd8\x0e\x49\x77\x97\x2d\x26\x12\x2a\x53\x86\xc4\x36\x2d\x02\xff\xf7\x41\xb6\x97\x36\x5b\xd1\x93\xad\xc7\xc7\x4f\xe4\x4b\xac\x1c\xf7\x41\x0b\xe5\xd0\x58\x2d\x54\xe6\xe7\x80\x5a\xb4\xd1\x3e\xc3\x51\x54\xbb\x48\xbc\xda\x99\xde\x87\xe7\x06\x6e\x92\x37\xe1\x5a\x8c\x42\x98\x2b\x30\xcd\xa3\xcf\x9e\xd1\x16\x1b\xe3\x13\xaf\x2c\x76\x31\x19\xf6\x91\x1a\xa0\x48\x78\xbd\xb4\x1f\xd0\xef\x1d\x37\xd0\xc6\x60\xaf\x45\xd5\xc5\x10\x53\x03\x6d\x30\xdd\x7d\x81\xb1\x69\x03\x16\x48\x6f\xd2\xde\xd3\x8a\xe3\xd0\xc0\x1a\xfb\xe9\xa2\xb9\xc8\xf6\x0a\x96\x37\x57\x9c\x6d\x4c\x16\x53\x03\xeb\xe1\x09\x72\x0c\xde\xc2\xa5\xb5\x85\x3d\x18\x6b\x3d\xed\x1b\xf8\x3c\x3c\xbd\xee\x4f\x0d\xb1\x5b\x75\xce\x07\xfb\x01\x1f\x91\x3e\x4e\x14\xd3\xdd\xef\x53\x7c\x20\xbb\x5a\x66\xba\x44\xc4\xd7\x6d\xd3\x65\x0b\x73\x99\xeb\x53\x01\x9f\xb4\x36\x32\xc7\xfe\x24\x4f\x31\x98\xe0\xf7\xd4\x40\xc0\x1d\x17\x96\x92\x4b\xa4\x4a\x2e\x11\x97\x6c\xb5\xa8\x94\x5b\x6b\x65\xc0\x25\xdc\x7d\xb9\x90\x17\x5a\x75\xd1\xa2\x0e\xd4\x47\x52\x72\x7a\x57\xd2\x68\x25\xdd\x5a\x0b\x51\xa9\x41\xff\xf6\x78\xf0\xb4\x07\x8a\x16\x61\x76\x1f\x8f\x50\xff\x8c\x16\x6f\x2d\x8c\x23\x94\xd3\x8d\xb5\x09\x73\xc6\x5c\x6f\x38\x15\xf7\x38\x2e\xb4\x5a\xc9\x61\x22\x4d\xcb\x69\x51\x55\x8a\x53\x79\x54\x8a\x9d\xbe\xb5\x4a\xb2\x3b\x1d\x6f\x82\x37\xf9\x4c\xf9\x61\x32\x43\x46\xa4\x33\xf5\x12\x3a\x67\x88\x30\x9c\x9b\xbf\xcd\x22\x64\x36\x8c\xe7\xa5\x5f\x0f\x09\x5a\x13\x0c\x75\x78\xa6\x6f\x1d\xfa\xff\x2a\x4a\xce\x23\xbe\x4c\x6a\xf5\xbf\x9b\xd7\x1b\x17\x13\xbf\xec\xa9\x24\xdb\x93\xf9\x78\x84\x83\x67\x07\xf5\xb4\x10\x8c\x63\xe9\x9b\x1f\x18\x32\xc2\x38\xde\xd1\x3d\xc5\x03\x81\x29\x86\x22\x93\x9d\x58\xe7\x90\xba\xac\xbf\xf5\x3d\x66\x36\xfd\x50\x6f\x3c\x75\xf8\x86\x2d\x20\x41\xbd\x2c\x9f\xdf\xc2\xfc\xad\xd5\xdf\x31\x77\x9b\x92\xce\xbb\xae\xaf\x73\x1c\xdb\x78\xf7\x3e\xed\xe4\xdb\x3a\xec\x5f\x39\x97\xfc\x94\x5c\x7e\x73\x25\xe7\x3f\x9f\x92\xf3\x57\xff\x27\x00\x00\xff\xff\x23\x06\xd6\xd2\xfd\x03\x00\x00")

func nodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_nodeTmpl,
		"node.tmpl",
	)
}

func nodeTmpl() (*asset, error) {
	bytes, err := nodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.tmpl", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1519054370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"node.tmpl": nodeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"node.tmpl": &bintree{nodeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

