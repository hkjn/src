// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcb\x6e\x1b\x3b\x0c\x86\xf7\xf3\x14\x3c\xd9\x67\x94\xcb\x2a\x86\x8e\x80\xa4\x5d\x34\x40\x91\x06\xbd\xa2\x4b\xd9\xe2\x58\xaa\x35\xe4\x40\x92\x73\xc1\x60\xde\xbd\xd0\x44\x76\xed\xd8\x4e\xbc\xf3\xc8\xe4\x47\xfe\x3f\x29\x49\x9b\x5a\xaf\x2a\x39\x65\xf3\xac\x2a\x69\xcf\xd5\x27\xf4\x9e\xff\x93\xc2\x9e\xab\x4a\x76\xea\xbb\x75\x11\x5c\x04\x4d\x80\x4f\x1d\x06\xd7\x22\x25\x08\x4b\x22\x47\x73\xd0\x09\x3c\xd5\x76\xf1\x87\xea\x16\xe1\xd1\x25\x0b\x9f\xdd\xdc\xa6\xf1\xcf\x3b\x4c\x8f\x1c\x16\xa0\xc9\xc0\x8d\x4b\x33\x76\x04\xd3\x67\x90\x1a\x6c\xc0\xe6\xff\x13\x9b\x52\x17\x27\x42\x94\xf4\x13\x95\x7f\x48\xa1\x55\x2d\x45\xa7\xaa\x5c\xfd\x37\x2f\xa1\xcd\x40\x98\x22\x38\x4a\x18\x30\x26\x34\xe0\x08\x92\xc5\x6d\xd4\x44\x88\x96\xd7\xcd\x4c\xae\xce\xae\xce\xc4\x8c\x29\xb2\xc7\x28\x1c\x19\x7c\xaa\xb3\xd8\x13\x75\x1f\xb8\xc5\x64\x71\x19\xc1\xe8\x68\xa7\xac\x83\xc9\x65\x21\xce\x82\xee\x72\xe7\x46\x27\x5d\x35\x81\x5b\x48\x59\x7e\x62\xf6\xab\x9e\xec\x85\x92\x33\x36\xa8\xa6\x2f\x8a\x8c\x14\xe3\x27\x38\x6a\x58\x0a\x7b\xa1\xaa\xbe\x07\xd7\x40\x5d\x24\x9b\xfa\x36\x7e\x2d\x76\x9d\x0e\x43\x56\x75\x00\x10\x41\xc6\x14\x98\xe6\xaa\xd8\x2b\x45\xf9\x7e\x29\xde\xf7\x80\x3e\x22\x1c\x09\x21\x5e\xcf\x69\x07\x74\x0a\x48\x26\x83\x36\x04\xf9\xd5\xe0\x0e\x4b\x5a\xcf\xf6\xa0\xa8\x3d\x90\xc3\xb2\xc6\x66\x64\xa7\xbe\x2c\x03\x38\x33\x46\x8e\x39\x7d\xbf\x5d\x8a\x1a\xae\xef\xd8\xe0\xad\x19\x86\x82\x5d\x3b\x32\xee\xdc\x66\xf4\xb5\x77\x3a\xae\x9a\xca\x64\x3d\x1e\x6c\xc1\x61\x97\xb3\xe1\xec\x0f\x5a\x10\x3f\x52\x49\x6c\x38\x00\x2f\x03\xe4\x13\x62\x83\x3b\x16\xae\xca\x18\x13\x30\x8e\x85\xde\x14\x72\x5d\xe2\x5e\xb5\x50\x28\x0f\x18\xa2\x63\x7a\x97\xf2\xb3\xc4\xed\xa7\x4c\x3d\xcf\x16\x16\xc7\x8b\xf3\x1e\xe9\x66\x23\x76\x97\xf6\x0b\x21\x9b\x01\xdc\xc0\xab\xe4\x3c\x90\xac\xe2\x88\xd0\x0f\x56\x13\xa1\x8f\xf5\xb7\x14\xf2\xc6\xac\x92\x2a\x69\x2f\x73\x9a\xd5\x0f\xb8\x17\x5f\xdf\x23\x86\x58\x7f\xc4\x38\x83\x61\x00\x1d\xa1\xcb\x07\x13\x29\xec\xa5\xaa\xe4\xd2\x8f\xa3\x0b\x9a\xe6\x78\x28\x79\xdc\x04\x00\xe9\x9d\xfa\xe7\xc1\xba\x8f\x22\x57\x0a\xef\xb6\x67\x2a\x32\x7b\xef\x8d\x7b\x73\xc3\x8f\xbc\x73\xa2\x3c\xb7\xe2\xe5\xf5\xfd\x1b\x00\x00\xff\xff\xc4\xbf\x50\x9b\x85\x05\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1413, mode: os.FileMode(436), modTime: time.Unix(1517766989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

