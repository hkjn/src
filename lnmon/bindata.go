// Code generated by go-bindata.
// sources:
// index.tmpl
// node.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x8f\xdb\x36\x10\x3d\x5b\xbf\x62\xe0\xbd\xb4\x40\x2c\x61\x93\x4b\xe1\x28\x2a\xf2\xd1\xc3\x02\x49\xba\xc8\x6e\x0a\xf4\x48\x89\x63\x93\x5d\x8a\x54\xc9\xf1\x7a\x0d\xc3\xff\xbd\x20\x45\xc9\x96\x2d\x7b\x37\x39\xf4\x92\x70\x67\xa8\xc7\x37\x33\x6f\x86\x74\x2e\xa8\x56\x45\x92\x0b\x64\xbc\x48\x72\x47\x1b\x85\x45\x52\x1a\xbe\x81\x6d\x32\x59\x18\x4d\xb3\x05\xab\xa5\xda\xcc\xe1\xbd\x95\x4c\xbd\x4d\x76\x49\xc2\x5e\x01\x9b\x3f\x4a\x27\x09\xb9\xdf\x46\xf8\x44\x33\x8e\x95\xb1\x8c\xa4\xd1\x73\xd0\x46\xe3\xdb\xf8\xf9\x1a\xe5\x52\xd0\x1c\x4a\xa3\xf8\xdb\x64\x52\x19\x65\xec\x1c\x4a\xc5\xaa\x07\x0f\x46\xac\x54\xe8\x41\x6a\x66\x97\x52\xcf\xc8\x34\x73\xb8\xc6\x3a\x1c\xd4\x3a\x89\xbf\x82\xb8\x12\x7e\x67\x69\x2c\x47\x3b\x87\xeb\xe6\x09\x9c\x51\x92\xc3\x15\xe7\x1e\xbb\x61\x9c\x4b\xbd\x9c\xc3\x6f\xcd\xd3\xe1\xf7\x76\xae\x49\xcc\x2a\x21\x15\xff\x05\x1f\x51\xff\x1a\x50\x58\xf5\xb0\xb4\x66\xa5\xf9\x2c\x72\xba\x42\xc4\xc3\xcf\xc2\x61\x11\x33\xf2\x7a\xed\x81\x7b\x5b\x69\x88\x4c\xdd\x9b\x43\x1a\x98\x92\x4b\x3d\x07\x85\x0b\xf2\x58\x79\x16\x53\x9a\x67\x31\xc5\x3e\xb7\x45\x32\xc9\xc5\x75\x91\x33\x10\x16\x17\xef\xa6\x57\xd3\x22\xaf\x0c\xc7\x42\xe9\xda\xe8\x3c\x0b\xeb\x3c\x63\x45\x9e\x89\xeb\x22\x49\x26\x79\x53\xdc\x0b\xe9\x40\x3a\x60\x50\x1b\x2d\xc9\x58\xa9\x97\xc0\x99\x13\xa5\x61\x96\xc3\xc2\x58\x20\x81\xf0\xd9\x67\x5b\x7b\xdf\x57\xa4\xb5\xb1\x0f\x60\x57\xda\xff\x9d\x4c\x18\x41\x77\x4a\x2a\x1e\xfe\xd1\x69\x8d\xf1\x28\x28\x37\xd0\x93\x11\x44\x8d\x9b\x67\x59\xdc\x32\x2d\xfc\xc2\x93\x49\xf3\xac\x39\x24\xb3\xc6\x12\x1c\xda\x47\xb4\x80\x4f\xd2\x91\x83\x9a\x49\xad\x36\x40\xa6\xb5\x27\x13\xcf\xa8\x07\xce\x6a\x24\x2b\x2b\x37\x2d\xba\x95\x47\x05\xd4\xbc\x31\x52\x53\x08\xe1\xd6\x9a\x1a\x49\xe0\xca\x25\x13\x32\x50\x19\xa5\xb0\x22\xe0\x8c\x58\xf0\xff\xbb\x42\x2b\xd1\x01\xd3\x1c\x96\x96\x35\xc2\x05\x73\x1f\x75\x32\xe9\xc2\x8e\x47\x1c\x90\xfe\xdb\xac\xa0\x66\x1b\x60\xca\x19\x28\x11\xa4\x26\xb4\xe8\xbc\x88\xa5\xf6\xc9\x4b\x26\x7b\xae\xd3\x62\x4f\x65\x9f\xe6\x40\xd8\x55\x96\x35\x6d\xf6\x3d\x2b\x6b\x6a\x20\x21\x03\x61\xa3\xfa\xf3\x82\x88\x8a\x64\x32\xc9\xc9\xfa\xff\x26\x39\x89\xb6\xbe\xf0\x88\xd6\x49\x5f\x67\x12\xd1\xc3\x63\xfd\xb7\x5b\x48\xbf\x18\xfd\x57\xbb\x01\x76\xbb\x5e\x0b\xc4\x03\x56\xd6\x82\x0d\x30\xbb\xd8\x79\x57\xea\xdf\xcf\x20\xdf\xb8\x6f\xed\x86\x1f\x06\xbe\xcc\xf8\x46\x2f\x4c\xfa\x43\x9c\x63\x91\x2e\xe1\x75\x75\x7c\x19\x9e\xe1\x08\x92\x8f\xe0\xf5\x15\xd5\x86\x63\xb6\x47\x37\x1c\x6f\x38\xec\x76\xd3\xe2\xd4\x06\xbd\xe9\x3d\xe7\x16\x9d\x0b\x24\x7c\x37\x3e\x4b\xe4\xbd\x92\xcc\x0d\x68\x6c\xb7\xb0\x96\x24\x20\x0d\x2e\x98\xed\x76\xfb\x40\xf7\xc1\x6d\xb7\x80\xca\x21\xec\x76\xdf\xf5\x83\x36\x6b\x0d\xcc\x6f\xdf\x6e\x67\xbe\x3f\xc2\xbe\xf3\x87\x7e\x50\xa6\x7a\x10\x61\xce\x1e\x1f\xdd\x86\x71\xb0\xe1\x19\xa8\x7b\x43\x4c\x81\xcf\xd5\x49\x14\xe9\xd7\x55\xed\x53\xe4\x5e\x04\x51\x09\xa6\x35\xaa\x51\x94\x8f\xd1\xf7\x0c\xd0\xd7\x55\x5d\xa2\x05\xb3\x80\x06\xd1\x9e\x20\x29\xd4\x90\xde\x7a\xcf\x8b\x71\xb4\xb1\xf5\x01\xb7\xb6\x30\xa3\xe0\x2d\x70\x1b\xb2\xff\xe6\x3c\xe5\x3c\x8b\x9d\xee\x67\xfa\x6b\x90\xfc\xdd\x34\x20\x4e\x0f\xc6\x7b\x34\xdc\xb6\x27\x85\xb1\xfe\xfa\xfc\x90\xb8\x39\xd4\xf1\xa9\xa4\x44\xf1\x99\x39\x02\x87\xa8\x07\xd6\xab\xb1\x9c\x8b\x22\x32\x07\x47\x8c\x70\xe8\xfa\x73\x65\xa1\x64\x8a\xe9\x0a\x07\xf6\x7b\x81\xf2\xc4\xd3\x65\x76\xbb\x05\xcb\xf4\x12\xbb\xdc\xcf\x76\xbb\x01\xff\xf3\x8d\x77\xd4\x73\xed\x9f\xe9\x9d\x30\x96\xc6\x1b\xac\x2f\x46\xdb\x3a\xfb\xd4\xf7\x0e\x9f\x89\x7b\x59\xa3\x23\x56\x37\xe9\x9d\xd4\x15\x8e\x6c\x0b\x4a\x19\xa9\x60\x0f\xd3\xf9\xd2\x4f\xe8\xaa\x3b\x9f\xa8\x8b\xbb\x3e\xb4\x99\xb9\x37\xdf\x2f\xa3\xf5\xfb\xee\x05\xd6\x23\x22\xdd\x77\xf7\x91\x8c\xde\x04\x19\x49\xfd\x68\x64\x85\x03\x25\xed\x6d\x37\x71\x15\xf5\xf4\xa6\x38\x27\xa7\xcf\xac\x44\x35\xa8\xef\x17\xc7\xc8\x38\x21\x07\x46\x1f\xf6\x6a\xa8\x8f\x3f\x9e\x1a\x69\x37\x40\xb2\xc6\xd1\xef\xc1\x62\x85\xf2\x11\xf9\x91\x46\xf6\x12\xe9\x48\x8e\xa8\xa4\x2d\x5f\x89\x6a\x2c\x85\xdd\x09\xe9\x1d\xd9\xee\xbe\x3a\xda\xd2\xf2\x1d\xf3\xb4\xb4\xbd\x2c\x52\xff\xcf\x25\xfc\x6f\x31\x80\xd3\x73\xfa\x50\x2e\x96\xa8\x61\x9b\x1a\x35\x0d\x9b\xbd\xb7\xdd\xc6\xd5\xb3\x25\x3a\xee\xf8\xda\xac\x34\x0d\x4c\x9f\xd0\x91\xd4\xe1\x79\x3d\x6c\xd5\x4e\xfc\x17\x6a\x79\x52\x95\x8e\xd7\x99\xaa\x44\xf7\x0d\xff\x89\xca\x9c\xeb\xfd\x03\xfe\xfd\x00\x38\xb0\xbd\x68\x0a\xec\x1b\xfd\x5c\x59\x4f\x34\xf1\x5c\x15\xdb\x79\x1d\xe7\xe6\x47\xa6\xb9\xe4\x7e\x4a\x1e\x96\x73\xc4\xd9\xaf\xdb\x8b\x32\xbc\x40\x35\xae\x0f\xe6\x6f\x37\xe2\xfb\xb7\xb2\xc3\x2a\xc4\xee\x84\x59\xbb\xf8\x19\x09\x46\xb0\x46\xa8\xc3\xbd\xbc\x66\x9a\xfc\xcb\xd9\x34\xa8\x07\x68\x40\x66\xcd\x2c\x8f\x2f\xd9\x33\x0a\x3a\xbd\x24\xfc\x78\x7d\xc1\xad\xb1\xbf\x1c\x9f\xbf\x3d\xce\x0a\xea\xe3\x71\x8e\xce\x28\x6b\x74\x8e\xff\xdc\x75\x11\xde\x68\xf1\x79\x86\x2e\xaa\xf1\xb2\x7e\xfe\x8f\xcb\xe2\x92\xe0\xf2\xac\xfd\xed\x97\x67\xed\x8f\xee\xff\x02\x00\x00\xff\xff\xd2\x68\xb1\x82\x7c\x0f\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3964, mode: os.FileMode(420), modTime: time.Unix(1520587633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x6f\xdb\x30\x0c\x85\xcf\xd6\xaf\x20\xda\xcb\x06\x34\x16\xb2\xd3\xe0\x6a\x02\xba\xed\x52\x60\xd8\x0e\x49\x77\x97\x2d\x26\x12\x2a\x53\x86\xc4\x36\x2d\x02\xff\xf7\x41\xb6\x97\x36\x5b\xd1\x93\xad\xc7\xc7\x4f\xe4\x4b\xac\x1c\xf7\x41\x0b\xe5\xd0\x58\x2d\x54\xe6\xe7\x80\x5a\xb4\xd1\x3e\xc3\x51\x54\xbb\x48\xbc\xda\x99\xde\x87\xe7\x06\x6e\x92\x37\xe1\x5a\x8c\x42\x98\x2b\x30\xcd\xa3\xcf\x9e\xd1\x16\x1b\xe3\x13\xaf\x2c\x76\x31\x19\xf6\x91\x1a\xa0\x48\x78\xbd\xb4\x1f\xd0\xef\x1d\x37\xd0\xc6\x60\xaf\x45\xd5\xc5\x10\x53\x03\x6d\x30\xdd\x7d\x81\xb1\x69\x03\x16\x48\x6f\xd2\xde\xd3\x8a\xe3\xd0\xc0\x1a\xfb\xe9\xa2\xb9\xc8\xf6\x0a\x96\x37\x57\x9c\x6d\x4c\x16\x53\x03\xeb\xe1\x09\x72\x0c\xde\xc2\xa5\xb5\x85\x3d\x18\x6b\x3d\xed\x1b\xf8\x3c\x3c\xbd\xee\x4f\x0d\xb1\x5b\x75\xce\x07\xfb\x01\x1f\x91\x3e\x4e\x14\xd3\xdd\xef\x53\x7c\x20\xbb\x5a\x66\xba\x44\xc4\xd7\x6d\xd3\x65\x0b\x73\x99\xeb\x53\x01\x9f\xb4\x36\x32\xc7\xfe\x24\x4f\x31\x98\xe0\xf7\xd4\x40\xc0\x1d\x17\x96\x92\x4b\xa4\x4a\x2e\x11\x97\x6c\xb5\xa8\x94\x5b\x6b\x65\xc0\x25\xdc\x7d\xb9\x90\x17\x5a\x75\xd1\xa2\x0e\xd4\x47\x52\x72\x7a\x57\xd2\x68\x25\xdd\x5a\x0b\x51\xa9\x41\xff\xf6\x78\xf0\xb4\x07\x8a\x16\x61\x76\x1f\x8f\x50\xff\x8c\x16\x6f\x2d\x8c\x23\x94\xd3\x8d\xb5\x09\x73\xc6\x5c\x6f\x38\x15\xf7\x38\x2e\xb4\x5a\xc9\x61\x22\x4d\xcb\x69\x51\x55\x8a\x53\x79\x54\x8a\x9d\xbe\xb5\x4a\xb2\x3b\x1d\x6f\x82\x37\xf9\x4c\xf9\x61\x32\x43\x46\xa4\x33\xf5\x12\x3a\x67\x88\x30\x9c\x9b\xbf\xcd\x22\x64\x36\x8c\xe7\xa5\x5f\x0f\x09\x5a\x13\x0c\x75\x78\xa6\x6f\x1d\xfa\xff\x2a\x4a\xce\x23\xbe\x4c\x6a\xf5\xbf\x9b\xd7\x1b\x17\x13\xbf\xec\xa9\x24\xdb\x93\xf9\x78\x84\x83\x67\x07\xf5\xb4\x10\x8c\x63\xe9\x9b\x1f\x18\x32\xc2\x38\xde\xd1\x3d\xc5\x03\x81\x29\x86\x22\x93\x9d\x58\xe7\x90\xba\xac\xbf\xf5\x3d\x66\x36\xfd\x50\x6f\x3c\x75\xf8\x86\x2d\x20\x41\xbd\x2c\x9f\xdf\xc2\xfc\xad\xd5\xdf\x31\x77\x9b\x92\xce\xbb\xae\xaf\x73\x1c\xdb\x78\xf7\x3e\xed\xe4\xdb\x3a\xec\x5f\x39\x97\xfc\x94\x5c\x7e\x73\x25\xe7\x3f\x9f\x92\xf3\x57\xff\x27\x00\x00\xff\xff\x23\x06\xd6\xd2\xfd\x03\x00\x00")

func nodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_nodeTmpl,
		"node.tmpl",
	)
}

func nodeTmpl() (*asset, error) {
	bytes, err := nodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.tmpl", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1519556190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"node.tmpl": nodeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"node.tmpl": &bintree{nodeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

