// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xc1\x6e\x1b\x37\x10\x3d\x7b\xbf\x62\xea\x4b\x2f\xcd\x12\x49\x6e\x05\xcb\xc2\x36\x50\xd4\x40\xea\x06\x8d\xd3\xa2\x47\x4a\x1c\x89\xac\xb9\x33\x0b\x72\x36\x8e\xb1\xf0\xbf\x17\xa4\x56\xd2\xca\xb2\x62\xb7\x17\x43\x1c\x0e\x1f\xdf\xbc\xc7\x19\xaf\xf6\xd2\x45\xd3\xe8\x05\xbb\x07\xd3\x68\xff\xd6\xfc\x8a\x31\xf2\x77\x5a\xf9\xb7\xa6\xd1\xbd\xb9\xf5\x21\x43\xc8\x60\x09\xf0\x6b\x8f\x29\x74\x48\x02\xf7\x41\x3c\x5c\x06\x59\x72\x20\xb0\xe4\xe0\x43\x58\x7b\xa1\x40\x6b\xb8\x41\xb9\xe7\x74\x07\x69\xa0\xba\xb6\x02\x7a\xc9\x0e\x4d\xa4\xd6\xdf\xfd\x43\x6d\x87\x5a\xd5\x00\x2c\x1e\x40\x5b\xf0\x09\x57\x3f\x9d\x7b\x91\x3e\xff\xa8\xd4\x94\x72\x6e\xca\x0f\xad\xac\x69\xb5\xea\x4d\xb3\xa1\x82\xd0\x0f\xa9\xe7\x8c\x85\x91\x30\x44\xb4\x89\xa0\xe3\x84\x60\x17\x3c\x08\x88\x47\x08\x44\x98\xa0\x70\x08\xb4\xce\xc0\xab\x03\xa2\x25\xe3\xc3\x4d\xb9\xba\xb3\x25\x01\x82\x00\xda\x1c\x30\x15\x40\xee\x31\x59\xc1\x46\x3c\x66\x04\x67\xb1\x63\xca\x3f\xd4\x83\xb3\xa4\x45\xc6\xf4\x05\xe1\xde\xdb\x7a\xe3\xc3\xf7\x09\xc1\x71\xa0\xf5\x9e\xeb\xdf\x3c\x40\x57\x34\x81\x45\x61\x24\x98\x30\x0b\x3a\x08\x54\x19\x1c\x95\xdd\xf1\x4e\x1d\x15\x49\x2d\x99\x32\x47\xcc\x2a\x90\xc3\xaf\x6d\x31\xe9\xdc\x7c\x4c\xdc\xa1\x78\x1c\x32\x38\x9b\xfd\x82\x6d\x72\x45\x21\xc8\xcb\x64\xfb\x52\x8b\xb3\x62\x9b\x55\xe2\x0e\xc4\x57\x85\x38\x6e\x29\xf9\x77\x66\x63\xc3\x62\x23\x86\xdb\x9a\x10\x68\xc5\x5a\xf9\x77\xa6\x19\x47\x08\x2b\x68\x27\xb5\x5c\x7b\x9d\xff\x98\x3c\x7c\xf3\xf8\x58\x8a\x3a\x01\x90\x41\x67\x49\x4c\x6b\x33\x79\xae\xd5\xb4\xde\x5c\x3e\x8e\x80\x31\x23\xbc\x12\x84\x58\xe0\x14\xd0\x1b\x40\x72\x05\x68\x56\x50\xdc\x3e\xbd\xd3\x25\xed\x5e\xe7\xc9\xa2\x9e\x01\x39\x5d\x56\x25\xa3\x7b\xf3\xfb\x90\x20\xb8\x9a\x59\xcf\x8c\xe3\xe1\x55\xb4\xe2\xf6\x86\x1d\x5e\xbb\xc7\xc7\x09\x76\xa7\x48\xed\xa0\x79\xf6\x45\x0c\x36\x6f\x49\x15\x64\x5b\x03\x07\xe0\x70\x8c\x33\x53\xf6\x33\xdd\x11\xdf\xd3\x74\x70\xc5\x09\x78\x48\x50\x22\xc4\x0e\x8f\x24\xdc\x5e\xe3\x5c\xc2\x5c\x2f\xfa\x66\x21\x17\x53\xde\x13\x0a\x13\xca\x17\x4c\x39\x30\xbd\x88\xf2\xe7\x94\xf7\x3c\xca\x22\xf2\xf2\xce\x63\xed\x9b\x97\x90\x2e\x67\xb9\xc7\x68\x7f\x21\x14\x31\x4a\xf7\x8f\x23\x44\xa4\x03\x80\x62\x4a\xa9\xa4\x0a\x93\x6b\x53\xb2\xd8\xf8\xca\xd3\x57\xde\x12\x61\xac\x00\xcb\xed\xef\xff\x88\x51\x19\xb4\x1f\x11\xd3\x8c\x87\x94\x81\x62\x13\x56\xdf\xfa\xb2\xb7\xeb\xde\xf7\xa6\xe6\x6a\xe5\xdf\x97\xb5\xd8\x45\x44\xd3\x9c\x69\x49\xa6\x39\x3b\xd3\xe2\xcd\xb5\xd3\x4a\xfc\x76\x55\x5f\xd3\x3c\x70\xc5\x44\xb8\x14\x74\x3f\x1f\x44\x37\xf4\x21\x8b\x15\x9c\x6f\xfc\x32\x90\xab\x23\x76\xc8\xcf\x86\xc5\x63\x37\x6d\x68\x55\x49\x8c\x23\x24\x4b\x6b\x3c\x59\x66\x79\xda\x7b\xc2\xae\x9a\xba\xe9\x8e\xea\x9f\xb8\xf9\xc6\xa6\x1b\x8e\xe3\xbb\x32\x9e\xec\xed\xdf\xc9\xd6\x9d\xf6\x53\xa9\x69\xff\x34\x9e\x20\x95\xb1\x30\x37\xf2\xe0\xe8\x6f\x21\xc6\xf0\xc9\x0a\x67\x1f\x6e\xf9\x73\x6e\x2f\xf2\xe5\xed\xd5\x94\xb6\x69\x9f\xff\x0f\x77\xeb\xb1\x3b\x0d\xb8\x53\x73\xdf\xa7\x6a\x72\xbb\xd1\x43\xf9\x57\xad\xca\xdf\x67\x87\xea\x37\x87\xd8\x2b\xc7\xaa\x9a\xbe\x04\xd4\xe6\xc3\xe0\xdf\x00\x00\x00\xff\xff\xfb\xbe\xa5\xc1\x20\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2080, mode: os.FileMode(436), modTime: time.Unix(1517999973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

