// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xc9\x6e\xe3\x38\x10\x86\xef\x7e\x8a\x9a\x00\xce\x2d\xa2\x2d\x1f\x82\x04\x34\x07\xc9\xe4\x30\x01\x06\x99\x60\xa6\x17\xf4\xc9\xa0\xc5\xb2\xc8\xb6\x44\x0a\x64\x29\x0b\x0c\xf7\xb3\x37\x28\xd3\x6e\xaf\x49\xd0\x17\x41\x5c\xea\xe3\xcf\xaa\xbf\x24\xae\xa9\xae\x44\x8f\x4f\x9d\x7a\x15\x3d\xae\x87\xe2\x6f\xac\x2a\xf7\x07\x67\x7a\x28\x7a\xbc\x11\x9f\xb4\x09\x60\x02\x48\x0b\xf8\xd2\xa0\x37\x35\x5a\x02\xdf\x5a\x6b\x6c\x09\x92\xa0\xb2\x99\x9e\x7f\xb7\x59\x8d\xf0\x6c\x48\xc3\x3f\xa6\xd4\xd4\x2d\x3e\x20\x3d\x3b\x3f\x07\x69\x15\xdc\x1a\x2a\x9c\xb1\x30\x7d\x05\x2e\x41\x7b\x9c\x8d\xcf\x34\x51\x13\xae\x19\x4b\xe1\x67\x22\xbe\x70\x26\x45\xc6\x59\x23\x7a\xf1\xf4\x6f\xae\x85\x3a\x02\x61\x8a\x60\x2c\xa1\xc7\x40\xa8\xc0\x58\x20\x8d\xbb\xa8\x6b\xc6\x6a\xb7\x11\x73\x7d\x35\xb8\x1a\xb0\xd2\xcb\x46\xff\x59\x0e\x32\x2f\x6d\x89\x13\x63\x9b\x96\xc6\xc3\x5c\x9f\x97\x83\x2c\x90\x2c\xe6\xa8\xc6\xc3\x38\xc0\x97\xc6\x8f\xab\xb5\x74\x35\xb1\x6d\x3d\x29\xb4\xb4\x16\xab\x10\xd7\x49\x4e\xc7\x83\xf3\x72\x78\x08\x1a\x6e\x83\x86\x47\x41\x0d\xa2\x0f\x71\x31\x51\xf2\x5d\x8a\x8a\x33\x5b\x90\xfc\x00\x42\x8e\x64\xb5\xd6\x33\x29\x64\x23\x0b\x43\xaf\x93\x3a\x48\x72\x41\x9b\xfe\xe5\x6d\xe1\x0d\xa1\x37\xb2\x3f\xba\xfb\xd1\xcf\x73\x72\x13\xd2\x58\xf7\x2f\xff\x22\x37\x69\x43\x3f\xcf\xfb\x97\x77\x91\x9c\x14\x8c\x76\x15\xe8\x38\x73\x4c\xb9\x75\x0a\x43\x5c\xec\xe2\xce\xc4\xa3\x77\x35\x92\xc6\x36\x80\x92\x41\x4f\x9d\xf4\x2a\x56\x0c\x42\xe1\x65\x13\x8b\xae\x24\x49\x98\x79\x57\x03\x45\xe7\x90\x73\xd5\xba\x9c\x3a\x17\xbc\x70\x0a\xc5\x74\x65\x06\xc5\x59\x37\x04\x63\x67\x8e\x33\x9d\x8b\xde\x62\x01\x66\x06\x59\x72\x8b\xca\xee\xc3\x7f\xc9\x69\x17\xcb\x65\x34\xc4\x09\x40\x00\x1e\xc8\x3b\x5b\x8a\xe4\x4c\xce\xd2\x78\x75\xf8\x62\x01\x58\x05\x84\x0f\x42\xac\xdb\x58\xfc\x00\x74\x01\x68\x55\x04\x6d\x5d\xe8\x57\xd6\x4e\x5e\x69\xd3\x16\x27\x2f\x75\x04\x72\xfa\x5a\x9d\x18\xde\x88\x7f\x5b\x0f\x46\x75\x3b\xbb\x98\xc5\x62\xf7\x28\x3b\x73\xd9\x83\x53\x78\xaf\x96\xcb\x84\xdd\x64\xa4\x6b\xd7\xed\xdd\x37\x95\x91\x61\x2d\x2a\x92\x65\x37\xb1\x03\x87\x43\xce\x56\x66\x3f\xdb\xb9\x75\xcf\x36\x05\xce\x9c\x07\xd7\x7a\x88\x33\xd1\x49\x07\x29\x5c\x1f\xa3\x94\xc7\xd0\x1d\xf4\xe6\x45\x6e\xd2\xbe\x3d\x09\x89\xf2\x84\x3e\x18\x67\xdf\xa5\x7c\x49\xfb\x8e\x53\xa6\x95\x2b\xe6\x1a\xbb\x6f\xce\x7b\xa4\xdb\xad\xbd\x7b\xb4\x1e\xd7\x23\xf1\x15\x41\xcb\x27\x84\xbd\xd8\xc7\xf8\x39\x48\xcf\xff\xc9\x47\x23\xc4\x68\x3d\x12\x3d\xde\x56\x5d\x4a\xbb\xee\x3c\x15\xb4\xaa\x50\x65\xc4\xb1\xaa\x70\x56\x99\xdd\x1c\xb3\xc8\x5c\xeb\x89\xe5\x01\x37\xdb\x97\x14\x2d\x12\xd2\xf3\xc3\x92\xb6\x82\x7e\x47\xd2\xb1\x9e\x7c\xb3\x07\x3e\xd8\x95\x2c\xfd\xcb\xd8\xea\xd7\xf6\x33\x00\x00\xff\xff\xd1\x25\xf8\x46\xe2\x06\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1762, mode: os.FileMode(436), modTime: time.Unix(1517506924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

