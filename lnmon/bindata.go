// Code generated by go-bindata.
// sources:
// index.tmpl
// node.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x41\x6f\xdb\x38\x13\x3d\x4b\xbf\x62\xe0\x5c\xbe\x0f\xa8\x25\xa4\xbd\x2c\x5c\x55\x8b\x36\xbd\x04\x68\xb3\xc1\xc6\x5d\x60\x8f\x94\x38\x36\xb9\xa6\x48\x2d\x39\x8e\x63\x18\xfe\xef\x0b\x52\xb4\x2c\xc7\x72\x92\xee\x61\x4f\xa6\x67\x86\x8f\x8f\x33\x6f\xc6\x74\x21\xa8\x51\x65\x5a\x08\x64\xbc\x4c\x0b\x47\x5b\x85\x65\x5a\x19\xbe\x85\x5d\x9a\x2c\x8c\xa6\xe9\x82\x35\x52\x6d\x67\xf0\xd9\x4a\xa6\x3e\xa6\xfb\x34\x65\xef\x80\xcd\x1e\xa5\x93\x84\xdc\x87\x11\x3e\xd1\x94\x63\x6d\x2c\x23\x69\xf4\x0c\xb4\xd1\xf8\x31\x6e\xdf\xa0\x5c\x0a\x9a\x41\x65\x14\xff\x98\x26\xb5\x51\xc6\xce\xa0\x52\xac\x5e\x79\x30\x62\x95\x42\x0f\xd2\x30\xbb\x94\x7a\x4a\xa6\x9d\xc1\x35\x36\xe1\xa0\xce\x49\xfc\x1d\xc4\x95\xf0\x91\x95\xb1\x1c\xed\x0c\xae\xdb\x27\x70\x46\x49\x0e\x57\x9c\x7b\xec\x96\x71\x2e\xf5\x72\x06\xbf\xb4\x4f\xc3\xfd\x76\xa6\x49\x4c\x6b\x21\x15\xff\x1f\x3e\xa2\xfe\x7f\x40\x61\xf5\x6a\x69\xcd\x5a\xf3\x69\xe4\x74\x85\x88\xc3\x6d\xe1\xb0\x88\x19\x79\xbd\xf7\xc0\xbd\xad\x32\x44\xa6\xe9\xcd\x21\x0d\x4c\xc9\xa5\x9e\x81\xc2\x05\x79\xac\x22\x8f\x29\x2d\xf2\x98\x62\x9f\xdb\x32\x4d\x0a\x71\x5d\x16\x0c\x84\xc5\xc5\xa7\xc9\xd5\xa4\x2c\x6a\xc3\xb1\x54\xba\x31\xba\xc8\xc3\xba\xc8\x59\x59\xe4\xe2\xba\x4c\xd3\xa4\x68\xcb\xb9\x90\x0e\xa4\x03\x06\x8d\xd1\x92\x8c\x95\x7a\x09\x9c\x39\x51\x19\x66\x39\x2c\x8c\x05\x12\x08\xdf\x7c\xb6\xb5\xf7\xdd\x21\x6d\x8c\x5d\x81\x5d\x6b\xff\x3d\x4d\x18\xc1\xe1\x94\x4c\xac\xfe\xd2\x59\x83\xf1\x28\xa8\xb6\xd0\x93\x11\x44\xad\x9b\xe5\x79\x0c\x99\x94\x7e\xe1\xc9\x64\x45\xde\x0e\xc9\x6c\xb0\x02\x87\xf6\x11\x2d\xe0\x93\x74\xe4\xa0\x61\x52\xab\x2d\x90\xe9\xec\x69\xe2\x19\xf5\xc0\x79\x83\x64\x65\xed\x26\xe5\x61\xe5\x51\x01\x35\x6f\x8d\xd4\x14\xae\x70\x6f\x4d\x83\x24\x70\xed\xd2\x84\x0c\xd4\x46\x29\xac\x09\x38\x23\x16\xfc\x7f\xaf\xd1\x4a\x74\xc0\x34\x87\xa5\x65\xad\x70\xc1\xdc\xdf\x3a\x4d\x0e\xd7\x8e\x47\x0c\x48\xff\x69\xd6\xd0\xb0\x2d\x30\xe5\x0c\x54\x08\x52\x13\x5a\x74\x5e\xc4\x52\xfb\xe4\xa5\xc9\x91\xeb\xa4\x3c\x52\x39\xa6\x39\x10\x76\xb5\x65\x6d\x97\x7d\xcf\xca\x9a\x06\x48\xc8\x40\xd8\xa8\xfe\xbc\x20\xa2\x32\x4d\x92\x82\xac\xff\x48\x0a\x12\x5d\x7d\xe1\x11\xad\x93\xbe\xce\x24\xa2\x87\xc7\xfa\xef\x76\x90\x7d\x37\xfa\x8f\x2e\x00\xf6\xfb\x5e\x0b\xc4\x03\x56\xde\x81\x9d\x60\x1e\xee\xce\x0f\xa5\xfe\xf5\x02\xf2\xad\xfb\xbd\x0b\xf8\x69\xe0\x97\x19\xdf\xea\x85\xc9\x7e\x8a\xf3\x9d\xe1\x08\x92\x8f\xe0\xf5\x15\xd0\x86\x63\xde\xa3\xfb\x0d\xb7\x1c\xf6\xfb\x49\x79\x6e\x83\xde\xf4\x99\x73\x8b\xce\x05\x12\xbe\x7b\x5e\x25\xf2\x59\x49\xe6\x4e\x68\xec\x76\xb0\x91\x24\x20\x0b\x2e\x98\xee\xf7\xc7\x8b\x1e\x2f\xb7\xdb\x01\x2a\x87\xb0\xdf\xff\xd0\x2b\x6d\x36\x1a\x98\x0f\xdf\xed\xa6\x5e\xcf\x21\xee\xf2\xa1\x5f\x94\xa9\x57\x22\xcc\xc5\xe7\x47\x77\xd7\x18\x04\xbc\x02\x35\x37\xc4\x14\xf8\x5c\x9d\xdd\x22\xbb\x5b\x37\x3e\x45\xee\x4d\x10\xb5\x60\x5a\xa3\x1a\x45\xb9\x89\xbe\x57\x80\xee\xd6\x4d\x85\x16\xcc\x02\x5a\x44\x7b\x86\xa4\x50\x43\x76\xef\x3d\x6f\xc6\xd1\xc6\x36\x03\x6e\x5d\x61\x46\xc1\x3b\xe0\xee\xca\x7e\xcf\x65\xca\x45\x1e\x3b\xd3\xcf\xe0\xf7\x20\xf9\xa7\x49\x40\x9c\x0c\xc6\x71\x34\xdc\x77\x27\x85\x31\xfc\xfe\x72\x53\xdf\x0e\x75\x7c\x2e\x29\x51\x7e\x63\x8e\xc0\x21\xea\x13\xeb\xd5\x58\xce\x45\x19\x99\x83\x23\x46\x78\xea\xfa\x6d\x6d\xa1\x62\x8a\xe9\x1a\x4f\xec\x73\x81\xf2\xcc\x73\xc8\xec\x6e\x07\x96\xe9\x25\x1e\x72\x3f\xdd\xef\x4f\xf8\x5f\x6e\xbc\x67\x3d\xd7\x7d\xcd\x1e\x84\xb1\x34\xde\x60\x7d\x31\xba\xd6\x39\xa6\xbe\x77\xf8\x4c\xcc\x65\x83\x8e\x58\xd3\x66\x0f\x52\xd7\x38\x12\x16\x94\x32\x52\xc1\x1e\xe6\xe0\xcb\xbe\xa2\xab\x1f\x7c\xa2\x5e\x8c\xfa\xd2\x65\x66\x6e\x7e\xbc\x8c\xd6\xc7\xcd\x05\x36\x23\x22\x3d\x76\xf7\x33\x19\x7d\xe8\x64\xc4\xb6\x0d\x6a\x3a\x55\x52\x6f\xbb\x8f\xab\xa8\xa7\x0f\xe5\x5b\xe5\xd4\x98\xb5\xa6\x13\xd3\x57\x74\x24\x75\x78\x6b\x9d\xea\xe0\x90\xd9\x13\xab\xcf\xcf\xda\x3d\x93\xc5\x40\x15\x91\xd7\x88\x30\x42\x5f\x75\xee\x5b\x3e\x96\xb9\xef\x8e\x91\x71\x42\x66\x0f\x64\x0f\x3f\x2b\x83\x90\x4b\xc2\x1a\xf0\xef\xd5\x35\xb0\xbd\x49\x62\x47\x15\xf9\xd5\x18\xb9\xee\xde\xe7\x65\xbc\x58\xc5\x6e\x18\xc4\xa6\xbc\x61\x9a\x4b\xee\x5b\x70\x58\xce\x11\x67\xbf\xee\xa6\x70\x78\x8e\x68\xdc\x0c\x9a\xfb\x30\x3f\xfa\x87\x93\xc3\x3a\xdc\xdd\x09\xb3\x71\x71\x1b\x09\x46\xb0\x41\x68\xc2\xd0\xdf\x30\x4d\xfe\x19\x65\x5a\xd4\x27\x68\x40\x66\xc3\x2c\x8f\xcf\x9a\x0b\x0a\x3a\x9f\x40\xbe\x77\xdf\x30\x92\x8e\x93\xf7\xf5\xd1\x74\x51\x50\x37\xcf\x73\x74\x41\x59\xa3\x43\xe2\xdf\xcd\xa2\xf0\x00\x88\xbf\xfd\xe8\xa2\x1a\x5f\xd6\xcf\x7f\x31\x89\x5e\x12\x5c\x91\x77\x7f\x04\x8a\xbc\xfb\x07\xf6\x4f\x00\x00\x00\xff\xff\x59\x46\xc3\x7d\x89\x0d\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3465, mode: os.FileMode(436), modTime: time.Unix(1519922729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x6f\xdb\x30\x0c\x85\xcf\xd6\xaf\x20\xda\xcb\x06\x34\x16\xb2\xd3\xe0\x6a\x02\xba\xed\x52\x60\xd8\x0e\x49\x77\x97\x2d\x26\x12\x2a\x53\x86\xc4\x36\x2d\x02\xff\xf7\x41\xb6\x97\x36\x5b\xd1\x93\xad\xc7\xc7\x4f\xe4\x4b\xac\x1c\xf7\x41\x0b\xe5\xd0\x58\x2d\x54\xe6\xe7\x80\x5a\xb4\xd1\x3e\xc3\x51\x54\xbb\x48\xbc\xda\x99\xde\x87\xe7\x06\x6e\x92\x37\xe1\x5a\x8c\x42\x98\x2b\x30\xcd\xa3\xcf\x9e\xd1\x16\x1b\xe3\x13\xaf\x2c\x76\x31\x19\xf6\x91\x1a\xa0\x48\x78\xbd\xb4\x1f\xd0\xef\x1d\x37\xd0\xc6\x60\xaf\x45\xd5\xc5\x10\x53\x03\x6d\x30\xdd\x7d\x81\xb1\x69\x03\x16\x48\x6f\xd2\xde\xd3\x8a\xe3\xd0\xc0\x1a\xfb\xe9\xa2\xb9\xc8\xf6\x0a\x96\x37\x57\x9c\x6d\x4c\x16\x53\x03\xeb\xe1\x09\x72\x0c\xde\xc2\xa5\xb5\x85\x3d\x18\x6b\x3d\xed\x1b\xf8\x3c\x3c\xbd\xee\x4f\x0d\xb1\x5b\x75\xce\x07\xfb\x01\x1f\x91\x3e\x4e\x14\xd3\xdd\xef\x53\x7c\x20\xbb\x5a\x66\xba\x44\xc4\xd7\x6d\xd3\x65\x0b\x73\x99\xeb\x53\x01\x9f\xb4\x36\x32\xc7\xfe\x24\x4f\x31\x98\xe0\xf7\xd4\x40\xc0\x1d\x17\x96\x92\x4b\xa4\x4a\x2e\x11\x97\x6c\xb5\xa8\x94\x5b\x6b\x65\xc0\x25\xdc\x7d\xb9\x90\x17\x5a\x75\xd1\xa2\x0e\xd4\x47\x52\x72\x7a\x57\xd2\x68\x25\xdd\x5a\x0b\x51\xa9\x41\xff\xf6\x78\xf0\xb4\x07\x8a\x16\x61\x76\x1f\x8f\x50\xff\x8c\x16\x6f\x2d\x8c\x23\x94\xd3\x8d\xb5\x09\x73\xc6\x5c\x6f\x38\x15\xf7\x38\x2e\xb4\x5a\xc9\x61\x22\x4d\xcb\x69\x51\x55\x8a\x53\x79\x54\x8a\x9d\xbe\xb5\x4a\xb2\x3b\x1d\x6f\x82\x37\xf9\x4c\xf9\x61\x32\x43\x46\xa4\x33\xf5\x12\x3a\x67\x88\x30\x9c\x9b\xbf\xcd\x22\x64\x36\x8c\xe7\xa5\x5f\x0f\x09\x5a\x13\x0c\x75\x78\xa6\x6f\x1d\xfa\xff\x2a\x4a\xce\x23\xbe\x4c\x6a\xf5\xbf\x9b\xd7\x1b\x17\x13\xbf\xec\xa9\x24\xdb\x93\xf9\x78\x84\x83\x67\x07\xf5\xb4\x10\x8c\x63\xe9\x9b\x1f\x18\x32\xc2\x38\xde\xd1\x3d\xc5\x03\x81\x29\x86\x22\x93\x9d\x58\xe7\x90\xba\xac\xbf\xf5\x3d\x66\x36\xfd\x50\x6f\x3c\x75\xf8\x86\x2d\x20\x41\xbd\x2c\x9f\xdf\xc2\xfc\xad\xd5\xdf\x31\x77\x9b\x92\xce\xbb\xae\xaf\x73\x1c\xdb\x78\xf7\x3e\xed\xe4\xdb\x3a\xec\x5f\x39\x97\xfc\x94\x5c\x7e\x73\x25\xe7\x3f\x9f\x92\xf3\x57\xff\x27\x00\x00\xff\xff\x23\x06\xd6\xd2\xfd\x03\x00\x00")

func nodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_nodeTmpl,
		"node.tmpl",
	)
}

func nodeTmpl() (*asset, error) {
	bytes, err := nodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.tmpl", size: 1021, mode: os.FileMode(436), modTime: time.Unix(1518802299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"node.tmpl": nodeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"node.tmpl": &bintree{nodeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

