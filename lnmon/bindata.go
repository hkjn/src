// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xe3\x36\x10\x3e\x4b\x4f\x31\x75\x2e\x2d\x50\x4b\xc8\xee\xa5\xf0\x72\x05\xec\xcf\xa1\x01\x76\xd3\x45\x93\x6d\xd1\x23\x2d\x8e\x4d\x36\x14\xa9\x92\xe3\x38\x86\xe1\x77\x2f\x48\xd1\xb2\x64\x2b\x69\x0e\x3d\x99\x9e\xdf\x8f\x33\xdf\x8c\xc8\x24\x35\xba\xca\x99\x44\x2e\xaa\x9c\x79\xda\x69\xac\xf2\x9c\xf8\x52\x23\xec\xf3\xac\xe1\x6e\xad\xcc\x9c\x6c\xbb\x80\x6b\x6c\xde\xe5\x87\xa3\x92\xc4\xcf\x90\x4e\x32\x58\x2e\xad\x13\xe8\x16\x70\xdd\x3e\x81\xb7\x5a\x09\xb8\x12\x42\xbc\xcb\xb3\x96\x0b\xa1\xcc\x7a\x01\xbf\xb4\x4f\x43\x7f\xb7\x30\x24\xe7\xb5\x54\x5a\xfc\x88\x8f\x68\x7e\x8a\x51\x78\xfd\xb0\x76\x76\x63\xc4\xbc\xb6\xda\xba\x05\x5c\x21\xe2\xd0\x2d\x26\x4b\x31\x13\xae\x37\x21\x70\x2f\x5b\x5a\x22\xdb\xf4\x62\xc2\x27\x9a\x73\xad\xd6\x66\x01\x1a\x57\x14\x62\xb1\x32\x5d\x94\x95\xe9\xe2\x4b\x2b\x76\x55\x9e\x31\x79\x5d\x31\x0e\xd2\xe1\xea\xfd\xec\x6a\x56\xfd\x8a\x5a\xdb\x1f\x58\xc9\x2b\x56\xca\xeb\x2a\xcf\x33\xd6\x56\xf7\x52\x79\x50\x1e\xb8\x01\x7c\x6a\xd1\xa9\x06\x0d\xc1\x56\x91\x84\x2f\x6a\x2d\xc9\x28\xb3\x86\x5b\xa4\xad\x75\x0f\xe0\x36\x26\xfc\xcf\x33\x4e\xc0\x6a\x2b\xb0\xd2\xa6\x90\x0f\x7f\x9b\xa2\x41\x56\x46\x01\x2c\x77\x79\xd6\x67\x95\x44\xad\x5f\x94\x65\xb2\x99\x55\xe1\x10\x10\x14\xac\x6c\x87\x08\xb6\xb8\x04\x8f\xee\x11\x5d\x00\xf3\x88\xce\x2b\x6b\xf2\xac\x4b\xb2\xdf\x43\xf1\xd5\x9a\x3f\x3a\xe9\xe1\x70\x4c\xc5\x8d\x00\x7c\x52\x9e\x3c\x34\x5c\x19\xbd\x03\xb2\x5d\x94\x3c\x23\x89\xd0\xc3\x28\x1b\x24\xa7\x6a\x3f\xab\x8e\xa7\x80\x01\xd0\x88\xd6\x2a\x43\xb0\xb2\x0e\xbe\x39\xdb\x20\x49\xdc\xf8\x3c\x23\x0b\xb5\xd5\x1a\x6b\x02\xc1\x89\x47\xfd\x3f\x1b\x74\x0a\x7d\x4c\xba\x76\xbc\x95\x3e\x8a\xfb\x22\xe5\xd9\xb1\x4a\x29\xc5\xe0\x8a\x7f\xd9\x0d\x34\x7c\x07\x5c\x7b\x0b\x4b\x04\x65\x08\x1d\x7a\x42\x01\xca\x00\x49\x9c\x28\xd9\xa9\xb2\xe5\xac\x3a\x81\x03\xc1\xbd\x5c\x5a\xee\x44\xb8\x42\x9e\xf9\xda\xf1\x36\xf4\xa8\x03\xea\x6c\x03\x14\x0a\x4a\xd6\xea\x1e\x81\x7c\x53\xa5\x76\x1d\xd1\x8a\x63\x0d\x95\x59\x59\x56\xca\x37\x55\x9e\xed\xf7\xa0\x56\x50\xdc\xf8\xdf\xbb\x36\xc3\xfc\x70\x88\xf0\x9f\xf5\xf5\xc0\x3c\x39\x6b\xd6\x55\x62\x46\xe0\x62\xfc\x1f\x33\x07\xdf\xdf\x36\x0e\x94\x88\xa6\x7d\x2f\x6f\xcc\xca\x16\xb7\x56\xe0\x8d\xe8\x9b\xd9\x61\x0d\x18\x22\xf7\x8a\x0f\x5a\x71\xdf\x23\x08\x51\x78\x94\x8c\x02\xc1\x84\x3b\x6a\x8f\x90\xdc\xbe\x9b\x07\x63\xb7\x26\xb9\x86\x76\xd9\x8d\x83\x20\x31\x56\x60\xef\x33\x0f\x4c\x80\x61\x2a\x21\x1c\xfa\x98\xec\x12\xf8\x87\xa4\x3c\xcf\x9d\x7c\x13\x77\xa7\x7d\x13\x85\x9f\xf3\x5d\x6a\x5b\x3f\x48\x0c\x85\x9e\xf6\xff\x38\x30\x98\x88\xf1\x27\x42\xb8\x30\xd8\x15\x04\x97\xdb\x4d\x13\xaa\x1c\xa0\xc6\x0b\xfb\xc8\x36\x4b\x5c\x8f\x5c\x24\x7f\xc4\x60\xaf\xd1\x40\xf1\x0d\xd1\x45\x87\x36\x1c\x26\xed\x3a\x9b\x2e\xba\x6b\xb8\xfe\x24\xb9\x31\xa8\x53\x9a\x20\x81\xfa\x28\x8a\xcd\x0c\x45\xbf\x0c\x77\x86\x74\x18\xa5\x77\x1f\xe3\x0d\x4c\x7e\x0b\x4a\xbc\x9f\xc5\x68\xb3\xc1\x76\x4b\x82\x88\x2c\x6d\xb8\xb7\xd1\x21\x2e\xda\x2a\xcf\x32\x46\x2e\xfc\x64\x8c\x64\x75\x23\x58\x49\xb2\xff\x1b\xb9\x36\x92\x7c\xe1\x9e\xc0\x23\x9a\x91\xf4\xaa\x07\x36\x12\x27\xe4\xe0\x89\x13\x8e\x55\xb1\xa9\x5c\x73\x53\xe3\x48\x7e\x2f\x51\x5d\x68\x58\xd9\x41\xdc\xef\xc1\x71\xb3\xc6\x63\x33\xe2\x10\x0c\xf0\x8b\xea\xc4\x8a\x6e\x8a\x8a\x3b\x69\xdd\x80\x11\xac\x24\xd1\x1b\x07\xb3\x6e\x9a\x82\xfe\x4c\x11\x2e\x7a\xaf\x1a\xf4\xc4\x9b\xb6\xb8\x53\xa6\xc6\x09\xb3\xc8\x8c\x41\x83\x2e\xc2\x1c\x75\xc5\x67\xf4\xf5\x5d\xa8\xc3\x8b\x56\x1f\xbb\x8b\xdf\xdb\xef\x2f\x47\xeb\xed\xee\x25\x36\x03\xcb\x53\xa5\x06\xa3\x5b\xa6\x56\x0f\x58\xc2\x77\xe1\x6b\x36\x26\x4a\x2f\xfb\x96\x4e\x27\xba\xbc\x92\x2d\x8d\xdd\x18\x1a\x89\x3e\xa3\x27\x65\x38\x29\x3b\x26\x4c\x5f\xd9\x91\x34\xd4\x67\xe3\xcf\xba\x3e\x68\x7a\xc2\x35\xd1\xf7\x38\x7c\x9d\xfa\x46\x4c\x55\xee\xab\xe7\x64\xbd\x54\xc5\x1d\xb9\xb0\xc1\x27\x4c\x06\x58\xa7\xd4\x27\x32\x84\xd3\x94\x45\x07\xff\xb2\x1b\xff\xd1\x8c\x34\x3a\x9f\xb8\x11\x4a\x84\x41\x19\x76\x65\x42\xd9\x9f\xd3\xea\x0a\xdb\xdb\xe0\x76\x30\x82\xa7\xb6\xa5\x47\x84\xc7\x3a\x5e\xcb\x4b\xbb\xf5\xc9\x8d\x24\x27\xd8\x22\x34\x71\x67\x6e\xb9\xa1\xf0\x48\xb0\x2d\x9a\x51\x34\x20\xbb\xe5\x4e\xf4\x1b\x6a\x92\x08\x97\x7b\x22\x8c\xdf\x2b\x16\xc7\xed\xa6\x59\xa2\x0b\xcb\xee\x7c\x81\x5c\x74\xff\xd3\x79\x25\x9e\xa1\xc1\xb3\x13\xdd\x6d\x84\xb0\x45\xa3\x59\xf7\xb1\x42\x9f\x18\x71\x38\xc0\xff\xbc\x03\x5e\xee\xfe\xd9\x07\xf9\x15\x2f\x09\x63\x09\xce\x5f\x13\x97\x5f\x6a\x56\x76\x8f\x5c\x56\x76\x6f\xfe\x7f\x03\x00\x00\xff\xff\xb4\xfb\x76\x1f\xfb\x0b\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 3067, mode: os.FileMode(436), modTime: time.Unix(1518767159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

