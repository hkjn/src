// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcb\x6e\xe3\x3a\x0c\x86\xf7\x7e\x0a\x9e\xee\x6b\xf5\xb2\x6a\xa0\x23\xa0\x9d\xcd\x14\x18\x74\x8a\xb9\x62\x96\x4a\x44\x47\x9a\xc8\xa4\x21\xc9\xbd\xc0\xc8\xbb\x0f\xe4\x28\x69\xd2\x24\x6d\x77\xb1\xc2\xff\x23\x7f\x92\x92\xb4\xa9\xf5\xaa\x92\x53\x36\xcf\xaa\x92\xf6\x5c\x7d\x46\xef\xf9\x3f\x29\xec\xb9\xaa\x64\xa7\x7e\x58\x17\xc1\x45\xd0\x04\xf8\xd4\x61\x70\x2d\x52\x82\xd0\x13\x39\x9a\x83\x4e\xe0\xa9\xb6\x8b\xbf\x54\xb7\x08\x8f\x2e\x59\xf8\xe2\xe6\x36\x8d\x7f\xde\x61\x7a\xe4\xb0\x00\x4d\x06\x6e\x5c\x9a\xb1\x23\x98\x3e\x83\xd4\x60\x03\x36\xff\x9f\xd8\x94\xba\x38\x11\xa2\xc8\x4f\x54\xfe\x21\x85\x56\xb5\x14\x9d\xaa\x72\xf6\x3f\xdc\x43\x9b\x81\x30\x45\x70\x94\x30\x60\x4c\x68\xc0\x11\x24\x8b\xbb\xa8\x89\x10\x2d\x6f\x8a\x99\x5c\x9d\x5d\x9d\x89\x19\x53\x64\x8f\x51\x38\x32\xf8\x54\x67\xb3\x27\xea\x3e\x70\x8b\xc9\x62\x1f\xc1\xe8\x68\xa7\xac\x83\xc9\x69\x21\xce\x82\xee\x72\xe5\x46\x27\x5d\x35\x81\x5b\x48\xd9\x7e\x62\xf6\xeb\x9a\xec\x85\x92\x33\x36\xa8\xa6\x2b\x47\x46\x8a\xf1\x13\x1c\x35\x2c\x85\xbd\x50\xd5\x30\x80\x6b\xa0\x2e\x96\x4d\x7d\x1b\xbf\x95\x76\x9d\x2e\x97\xd9\xd5\x11\x40\x04\x19\x53\x60\x9a\xab\xd2\x5e\x29\xca\xf7\x2a\xf9\x30\x00\xfa\x88\xf0\x41\x08\xf1\x66\x4e\x7b\xa0\x53\x40\x32\x19\xb4\x65\xc8\xaf\x07\x77\xdc\xd2\x66\xb6\x47\x4d\x1d\x80\x1c\xb7\x35\x16\x23\x3b\xf5\xb5\x0f\xe0\xcc\x18\x39\x6a\x86\x61\x37\x15\x35\x5c\xdf\xb1\xc1\x5b\xb3\x5c\x16\xec\xa6\x23\xe3\xce\x6d\x47\x5f\x7b\xa7\xe3\xba\xa8\x4c\xd6\xe3\xc1\x0e\x1c\xf6\x39\x5b\x9d\xfd\x49\x0b\xe2\x47\x2a\xc2\x86\x03\x70\x1f\x20\x9f\x10\x1b\xdc\x6b\xe1\x3a\x8d\x31\x01\xe3\x98\xe8\x4d\x23\xd7\x25\xee\x55\x09\x85\xf2\x80\x21\x3a\xa6\x77\x29\xbf\x4a\xdc\x61\xca\xd4\xf3\x6c\x61\x71\xbc\x38\xef\x91\x6e\xb6\x62\xf7\x69\xbf\x11\x72\x33\x80\x1b\x78\x25\xce\x03\xc9\x2e\x3e\x10\xfa\xc9\x6a\x22\xf4\xb1\xfe\x9e\x42\xde\x98\xb5\xa8\x92\xf6\x32\xcb\xac\x7e\xc0\xd7\x9a\x7b\xc4\x30\xa6\x78\x11\x81\x8e\xd0\x21\x86\x38\x91\xc2\x5e\xaa\x4a\xf6\x7e\x1c\x5d\xd0\x34\xc7\xc3\xe2\xd5\x1e\x78\xa7\x5e\xfc\x6f\x70\xc5\xaa\x14\xde\xed\xce\x53\x64\xee\xc1\xdb\xf6\xe6\x76\x7f\xf0\xbe\x89\xf2\xd4\x8a\xd5\xcb\xfb\x2f\x00\x00\xff\xff\xb0\xab\xcd\x49\x81\x05\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1409, mode: os.FileMode(436), modTime: time.Unix(1517759913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

