// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x8f\xdb\x36\x10\x3d\x4b\xbf\x62\xba\x3d\x47\x42\x92\x5b\xc1\x0a\x48\x9a\x43\x0d\x24\xdb\xa0\xeb\xb4\xe8\x91\x16\xc7\x26\xbb\x14\x47\x25\x47\xbb\x31\x8c\xfd\xef\x05\x29\x5a\x96\x6c\x25\xc8\x69\xa9\xf9\x7c\x33\xef\x91\x6b\xa1\xb9\xb3\x4d\x29\x76\xa4\x8e\x4d\x59\x08\xfd\xba\xf9\x1d\xad\xa5\x9f\x44\xad\x5f\x37\x65\x59\x88\xbe\xd9\x6a\x13\xc0\x04\x90\x0e\xf0\x6b\x8f\xde\x74\xe8\x18\x9e\x0d\x6b\xf8\x68\x0e\x9a\x9d\x71\x07\xb8\x47\x7e\x26\xff\x08\x7e\x70\xf1\xbb\x2c\x24\x83\x68\x49\x61\x63\x5d\xa5\x1f\xff\x75\x55\x87\xa2\x4e\x06\xd8\x1d\xcb\x42\x48\xd0\x1e\xf7\xbf\xde\x69\xe6\x3e\xfc\x52\xd7\x39\xe6\xae\x89\x07\x51\xcb\xa6\x12\x75\x3f\x47\xf0\x8c\x3b\x08\xe8\x9f\xd0\x47\x30\x4f\xe8\x83\x21\x57\x16\x63\x93\xd3\x09\xaa\x4f\xe4\xfe\x1a\xad\x2f\x2f\xe7\x56\xd2\x29\xc0\xaf\x26\x70\x80\x4e\x1a\x67\x8f\xc0\x34\x56\x29\x0b\xd6\x08\x13\x8c\xba\x43\xf6\xa6\x0d\x77\xcd\xf9\x14\x31\x00\x3a\xd5\x93\x71\x0c\x7b\xf2\xf0\xd9\x53\x87\xac\x71\x08\x65\xc1\x04\x2d\x59\x8b\x2d\x83\x92\x2c\x93\xff\xbf\x01\xbd\xc1\x90\x9a\x1e\xbc\xec\x75\x48\xe6\x69\x49\x65\x71\xde\x52\x6e\x31\x1b\xf1\x1f\x1a\xa0\x93\x47\x90\x36\x10\xec\x10\x8c\x63\xf4\x18\x18\x15\x18\x07\xac\x71\x65\x65\x97\xcd\xd6\x77\xcd\x05\x1c\x28\x19\xf4\x8e\xa4\x57\x71\x84\xb2\x08\xad\x97\x7d\xe4\x68\x04\xea\xa9\x03\x8e\x0b\x65\x22\x3b\x21\xd0\x6f\x9a\x4c\xd7\x19\xad\x3a\xef\xd0\xb8\x3d\x89\x5a\xbf\x69\xca\xe2\x74\x02\xb3\x87\x6a\x13\xfe\x1c\x69\x86\x57\x2f\x2f\x09\xfe\x37\x73\x03\x88\xc0\x9e\xdc\xa1\xc9\xca\x10\x75\xfe\x4e\x9d\x63\xee\x1f\x83\x07\xa3\x52\xe8\xc4\xe5\xc6\xed\xa9\xba\x27\x85\x1b\x35\x91\x39\x62\x8d\x18\x92\xf6\xaa\x77\xd6\xc8\x30\x21\x88\x55\x64\xb2\x2c\x0a\xc1\x4a\x3a\xda\x80\x90\xd3\xbe\xb8\x47\x47\xcf\x2e\xa7\x46\xba\x68\xf0\x10\x2d\x8e\x14\x4e\x39\xaf\xa2\x12\x60\xde\x4a\x29\x8f\x21\x35\xbb\x05\xfe\x2e\x3b\xaf\x7b\xe7\xdc\xac\xdd\xf5\xdc\x2c\xe1\x6f\xe5\xee\x2c\xb5\x8f\x1a\xe3\xa2\xd7\xf3\xdf\xcf\x02\x56\x6a\xfc\x8d\x10\x07\x06\xda\xc3\xe9\x04\x16\x1d\xa4\x35\x47\xac\x69\xe2\x90\xe4\x46\x2c\xed\x22\x47\xcb\x27\x5c\x26\x54\x9f\x11\x7d\x4a\xeb\xe3\x61\x35\x7a\x1e\x59\xdd\x0f\xdd\x3d\xf9\x4e\xda\xdf\xb4\x74\x0e\x6d\x6e\x19\x2d\xd0\x9e\x4d\x89\xd9\xc8\xc0\x6d\xd1\x6b\xd8\xf3\x32\x53\xfe\x12\x7c\xd4\xf5\xdb\x26\xb5\x17\xb5\x7e\x9b\x0c\x2c\x77\x16\x9b\xb2\x28\x04\xfb\xf8\xa7\x10\xac\x9b\x8d\x12\x35\xeb\xe9\x33\x29\x6b\x61\xf9\x28\x03\x43\x40\x74\x0b\xeb\xcf\x53\xe3\x85\x39\x23\x83\xc0\x92\x71\xe9\x4a\x14\x4a\x2b\x5d\x8b\x0b\xfb\x56\xa3\xb9\xf1\x88\x7a\x84\x78\x3a\x81\x97\xee\x80\xcb\xcd\x27\xe1\xcf\xa6\x50\xcd\x45\x09\xe3\xcd\xa9\x1e\x34\xf9\x99\x0a\x44\xcd\x6a\x0a\x8e\x61\xe3\x0d\x8a\xfe\x2b\x47\x1c\x77\x6b\x3a\x0c\x2c\xbb\xbe\x7a\x30\xae\xc5\x95\xb0\x6b\x1a\x6e\xca\x9c\x7d\xd5\x07\x0c\xed\x43\xdc\xc6\x77\xa3\xde\x8f\xe3\x6f\xe9\xcb\xf7\xab\x4d\x71\x5b\x8d\xdd\x2c\xf2\xb2\xaf\xd9\x75\xad\x33\xe1\x37\x37\xff\x07\x9e\x2c\x47\x0c\xd7\xcf\xd6\xed\x93\x90\x55\x26\x8f\xf1\xff\x62\x16\xda\x0f\xea\xac\xa3\xc1\xf1\xc2\xf4\x01\x03\x1b\x27\xd9\xd0\x52\x6a\x13\x1b\x0b\x6b\xdc\xe9\x10\xae\xf4\x72\x91\xcb\x19\xd3\x8a\x56\xe2\x42\xb3\x7b\xa3\xd6\xb6\xfd\x29\x48\xa6\xa0\x4d\xf5\xc0\x3e\xbe\xf4\x2b\x21\x33\xac\x6b\xee\x8b\x80\xe2\x69\x2d\x62\x84\x7f\xcb\xe0\x2a\x81\xa2\x1e\x7f\xa4\x88\x7a\xfc\xcd\xf2\x7f\x00\x00\x00\xff\xff\xcf\x1c\x27\xdb\xbb\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2235, mode: os.FileMode(436), modTime: time.Unix(1518623406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

