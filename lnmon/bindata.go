// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xc1\x8e\xdb\x36\x10\x3d\x4b\x5f\x31\xdd\x9e\x23\x22\xc9\xad\x60\x09\xa4\xcd\xa1\x06\x92\x6d\xd0\x4d\x5b\xf4\x48\x8b\x63\x93\x5d\x89\xa3\x92\xa3\x6c\x0c\x63\xff\xbd\x20\x45\xcb\xd2\xae\x12\xec\xc9\xd2\xcc\x3c\xce\x9b\xf7\x86\x96\xb4\xdc\x77\xaa\x96\x7b\x32\x27\x55\x57\xd2\xbe\x56\xbf\x61\xd7\xd1\x0f\x52\xd8\xd7\xaa\xae\x2b\x39\xa8\xcf\xd6\x45\x70\x11\xb4\x07\xfc\x3a\x60\x70\x3d\x7a\x86\x07\xc7\x16\x3e\xb8\xa3\x65\xef\xfc\x11\x6e\x91\x1f\x28\xdc\x43\x18\x7d\x7a\xaf\x2b\xcd\x20\x5b\x32\xa8\x3a\xdf\xd8\xfb\x7f\x7d\xd3\xa3\x14\x39\x00\xfb\x53\x5d\x49\x0d\x36\xe0\xe1\xe7\x1b\xcb\x3c\xc4\x9f\x84\x28\x35\x37\x2a\x3d\x48\xa1\x55\x23\xc5\xb0\x64\xf0\x80\x7b\x88\x18\xbe\x60\x48\x64\xbe\x60\x88\x8e\x7c\x5d\x4d\x4d\xce\x67\x68\x3e\x92\xff\x6b\x8a\x3e\x3e\x5e\x5a\x69\x6f\x00\xbf\xba\xc8\x11\x7a\xed\x7c\x77\x02\xa6\xe9\x94\xba\x62\x8b\x30\xd3\x10\x3d\x72\x70\x6d\xbc\x51\x97\xa7\xc4\x01\xd0\x9b\x81\x9c\x67\x38\x50\x80\x4f\x81\x7a\x64\x8b\x63\xac\x2b\x26\x68\xa9\xeb\xb0\x65\x30\x9a\x75\xce\xff\x37\x62\x70\x18\x73\xd3\x63\xd0\x83\x8d\x39\x3c\x8b\x54\x57\x17\x95\x4a\x8b\xc5\x88\xff\xd0\x08\xbd\x3e\x81\xee\x22\xc1\x1e\xc1\x79\xc6\x80\x91\xd1\x80\xf3\xc0\x16\x37\x24\xbb\x2a\x2b\x6e\xd4\x95\x1c\x18\x1d\xed\x9e\x74\x30\x69\x84\xba\x8a\x6d\xd0\x43\xf2\x68\x22\x1a\xa8\x07\x4e\x82\x32\x51\x37\x33\xb0\x6f\x54\xb1\xeb\xc2\xd6\x5c\x34\x74\xfe\x40\x52\xd8\x37\xaa\xae\xce\x67\x70\x07\x68\x76\xf1\x8f\xc9\x66\x78\xf5\xf8\x98\xe9\x7f\x13\x1b\x41\x46\x0e\xe4\x8f\xaa\x6c\x86\x14\xe5\x3d\x77\x4e\xd8\xdf\xc7\x00\xce\xe4\xd2\xd9\xcb\x9d\x3f\x50\x73\x4b\x06\x77\x66\x36\x73\xe2\x9a\x38\xe4\xdd\x6b\xde\x75\x4e\xc7\x99\x41\x3a\x45\xe7\xc8\xea\x20\xd8\x80\x63\x17\x11\x0a\xec\x4f\x7f\xef\xe9\xc1\x17\x68\xb2\x8b\xc6\x00\x29\xe2\xc9\xe0\x8c\x79\x95\x36\x01\x96\xad\x8c\x09\x18\x73\xb3\xe7\xc4\xdf\x95\xe4\xd3\xde\x05\x5b\x76\x77\x1b\x5b\x56\xf8\x5b\xd8\x7d\x47\xed\xbd\xc5\x24\xf4\x36\xfe\x97\x45\xc1\xc6\x19\x7f\x23\xa4\x81\x81\x0e\x70\x3e\x43\x87\x1e\xb2\xcc\x89\x6b\x9e\x38\xe6\x75\x23\xd6\xdd\x77\x31\xbf\x5a\xed\x3d\x76\x19\xd6\x5e\x9e\x5f\x84\xcc\xdd\x9a\x4f\x88\x61\xd1\x93\xad\x66\xd0\x01\xb3\xf8\x43\xca\x5d\x17\xf3\xad\xca\xc5\x52\xd8\xb7\x39\xc0\x7a\xdf\xa1\xaa\xab\x4a\x72\x48\x3f\x95\x64\xab\x76\x46\x0a\xb6\xf3\x6b\x5e\x8d\x55\xe4\x83\x8e\x0c\x11\xd1\xaf\xa2\x3f\xce\xe4\x57\xe1\x32\x1d\x44\xd6\x8c\x73\x4a\x8a\xa9\xe1\xf9\x0c\x41\xfb\x23\xae\x67\xc9\x7b\xb8\xe0\x64\xd4\xd5\x98\x69\x91\x9b\x3b\x4b\x61\x61\x8a\x14\x6c\xe6\xe2\x54\x36\x2d\x74\xca\x3f\x49\x24\xf2\x9f\x5d\x8f\x91\x75\x3f\x34\x77\xce\xb7\xb8\x55\x76\x31\xa5\xb9\x1d\xfb\xef\xe6\xdf\x63\x6c\xef\xd2\x6c\x8b\xaa\xeb\x74\x8b\x5d\x17\x45\xec\x67\xd7\xe6\x05\xf7\xdd\x13\xc3\xd3\x3b\xff\xfc\x3e\x15\x87\xf5\x29\x7d\x54\x8a\xc9\x2f\xf4\xb8\xa7\xd1\xf3\x2a\xf4\x1e\x23\x3b\xaf\xd9\xd1\xda\xe6\x59\xbb\x55\x34\x29\x30\x3e\x75\xf7\x6a\xee\x85\xd3\x86\xb3\x49\xcc\x92\xde\x99\x2d\xa5\x3f\x46\xcd\x14\xad\x6b\xee\x38\xa4\xbf\xc9\x8d\x92\x05\xd7\xad\xf4\xd5\xee\xf4\xb4\x55\x31\xd1\x7f\xee\xe0\xa6\x81\x52\x4c\x5f\x78\x29\xa6\x0f\xfe\xff\x01\x00\x00\xff\xff\x86\x5e\x09\x99\xf8\x07\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2040, mode: os.FileMode(436), modTime: time.Unix(1518539079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

