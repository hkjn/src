// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\x4b\x6f\xe2\x30\x10\xc7\xef\x7c\x8a\xd9\x4a\xf4\xd6\x18\xc2\xa1\x6a\x65\xbc\xea\xe3\xb0\x95\x56\xdd\x6a\x9f\xda\x13\x32\xf1\x10\x7b\x49\xec\xc8\x9e\xf4\x21\xc4\x7e\xf6\x95\x43\x60\x81\x40\xdb\x5b\x6c\xcf\xfc\xfc\xf7\xcc\xdf\x0e\xd7\x54\x16\xa2\xc7\xa7\x4e\xbd\x88\x1e\xd7\x43\xf1\x09\x8b\xc2\x7d\xe0\x4c\x0f\x45\x8f\x57\xe2\xbb\x36\x01\x4c\x00\x69\x01\x9f\x2b\xf4\xa6\x44\x4b\xe0\x6b\x6b\x8d\xcd\x41\x12\x14\x36\xd1\xf3\x3f\x36\x29\x11\x9e\x0c\x69\xf8\x6c\x72\x4d\xcd\xe2\x3d\xd2\x93\xf3\x73\x90\x56\xc1\xb5\xa1\xcc\x19\x0b\xd3\x17\xe0\x12\xb4\xc7\xd9\xf8\x44\x13\x55\xe1\x92\xb1\x36\xfd\x44\xc4\x0f\xce\xa4\x48\x38\xab\x44\x2f\xee\xfe\xdb\xd5\x50\x46\x20\x4c\x11\x8c\x25\xf4\x18\x08\x15\x18\x0b\xa4\x71\x17\x75\xc9\x58\xe9\x36\x62\x2e\x2f\x06\x17\x03\x96\x7b\x59\xe9\x8f\xf9\x20\xf1\xd2\xe6\x38\x31\xb6\xaa\x69\x3c\x4c\xf5\x69\x3e\x48\x02\xc9\x6c\x8e\x6a\x3c\x8c\x03\x7c\xae\xfc\xb8\x58\x4b\x57\x13\x5b\x97\x93\x4c\x4b\x6b\xb1\x08\x71\x9d\xe4\x74\x3c\x38\xcd\x87\x5d\xd0\x70\x1b\x34\x3c\x08\xaa\x10\x7d\x88\x8b\x2d\x25\xdd\xa5\xa8\x38\xb3\x05\x49\x3b\x10\x72\x24\x8b\xb5\x9e\x49\x26\x2b\x99\x19\x7a\x99\x94\x41\x92\x0b\xda\xf4\xcf\xaf\x33\x6f\x08\xbd\x91\xfd\xd1\xed\xdf\x7e\x9a\x92\x9b\x90\xc6\xb2\x7f\x7e\x43\x6e\x52\x87\x7e\x9a\xf6\xcf\x6f\x23\xb9\x55\x30\xda\x55\xa0\xe3\xcc\x21\xe5\xd6\x29\x0c\x71\xb1\xc9\x3b\x11\x0f\xde\x95\x48\x1a\xeb\x00\x4a\x06\x3d\x75\xd2\xab\xd8\x31\x08\x99\x97\x55\x6c\xba\x92\x24\x61\xe6\x5d\x09\x14\x9d\x43\xce\x15\xeb\x76\xea\x54\xf0\xcc\x29\x14\xd3\x95\x19\x14\x67\xcd\x10\x8c\x9d\x39\xce\x74\x2a\x7a\x8b\x05\x98\x19\x24\xad\x5b\x54\x72\x17\xbe\xb6\x4e\x3b\x5b\x2e\xa3\x21\x8e\x00\x02\xf0\x40\xde\xd9\x5c\xb4\xce\xe4\xac\x1d\xaf\x36\x5f\x2c\x00\x8b\x80\xf0\x4e\x88\x75\x1b\x8b\x77\x40\x67\x80\x56\x45\xd0\xd6\x81\xfe\x57\xed\xe8\x91\x36\xd7\xe2\xe8\xa1\x0e\x40\x8e\x1f\xab\x11\xc3\x2b\xf1\xa5\xf6\x60\x54\x13\xd9\xe4\x2c\x16\xbb\x5b\xd9\x99\x4b\xee\x9d\xc2\x3b\xb5\x5c\xb6\xd8\x4d\x45\x9a\xeb\xba\x1d\x7d\x55\x18\x19\xd6\xa2\x22\x59\x36\x13\x3b\x70\xe8\x72\xb6\x2a\xfb\xc3\xce\xad\x7b\xb2\x6d\xe2\xcc\x79\x70\xb5\x87\x38\x13\x9d\xd4\x29\xe1\x7a\x1b\xa5\x3c\x86\x66\xa3\x57\x0f\x72\xd5\xc6\xed\x49\x68\x29\x8f\xe8\x83\x71\xf6\x4d\xca\xcf\x36\xee\x30\x65\x5a\xb8\x6c\xae\xb1\x79\x73\xde\x22\x5d\x6f\xc5\xee\xd1\x7a\x5c\x8f\xc4\x2f\x04\x2d\x1f\x11\xf6\x72\x1f\xe2\x73\x90\x7c\x23\x1f\x2d\x10\xf3\xf4\x48\xf4\x78\x5d\x34\xc5\x6c\xee\x65\x37\x7c\xd5\x95\xc2\x88\x43\x9d\xe0\xac\x30\xbb\x75\x65\x91\xb6\xd6\x10\x5b\x02\x6e\xb6\x2f\x23\xda\xa2\x23\xe3\x8d\x9c\x9b\xf6\x49\xec\xa4\x1d\xba\x60\xaf\x1a\xfa\x9d\x57\x8c\xb5\x3f\x26\xb6\xfa\x4f\xfd\x0b\x00\x00\xff\xff\x00\xbc\xed\x3b\xaf\x06\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1711, mode: os.FileMode(436), modTime: time.Unix(1517587700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

