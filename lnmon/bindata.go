// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xc1\x6e\x1b\x37\x10\x3d\x7b\xbf\x62\xea\x4b\x2f\xcd\x12\x49\x6e\x05\xcb\xc2\x36\x50\xd4\x40\xea\x06\x8d\xd3\xa2\x47\x4a\x1c\x89\xac\xb9\x33\x0b\x72\x36\x8e\xb1\xf0\xbf\x17\xa4\x56\xd2\xca\xb2\x62\xb7\x17\x43\x1c\x0e\x1f\xdf\x9b\xc7\x19\xaf\xf6\xd2\x45\xd3\xe8\x05\xbb\x07\xd3\x68\xff\xd6\xfc\x8a\x31\xf2\x77\x5a\xf9\xb7\xa6\xd1\xbd\xb9\xf5\x21\x43\xc8\x60\x09\xf0\x6b\x8f\x29\x74\x48\x02\xf7\x41\x3c\x5c\x06\x59\x72\x20\xb0\xe4\xe0\x43\x58\x7b\xa1\x40\x6b\xb8\x41\xb9\xe7\x74\x07\x69\xa0\xba\xb6\x02\x7a\xc9\x0e\x4d\xa4\xd6\xdf\xfd\x43\x6d\x87\x5a\xd5\x00\x2c\x1e\x40\x5b\xf0\x09\x57\x3f\x9d\x7b\x91\x3e\xff\xa8\xd4\x94\x72\x6e\xca\x0f\xad\xac\x69\xb5\xea\x4d\xb3\xa1\x82\xd0\x0f\xa9\xe7\x8c\x85\x91\x30\x44\xb4\x89\xa0\xe3\x84\x60\x17\x3c\x08\x88\x47\x08\x44\x98\xa0\x70\x08\xb4\xce\xc0\xab\x03\xa2\x25\xe3\xc3\x4d\xb9\xba\xb3\x25\x01\x82\x00\xda\x1c\x30\x15\x40\xee\x31\x59\xc1\x46\x3c\x66\x04\x67\xb1\x63\xca\x3f\xd4\x83\xb3\xa4\x45\xc6\xf4\x05\xe1\xde\xdb\x7a\xe3\xc3\xf7\x09\xc1\x71\xa0\xf5\x9e\xeb\xdf\x3c\x40\x67\x1f\xc0\xc6\xcc\xb0\x28\xa4\x04\x13\x66\x41\x07\x81\x2a\x89\x23\xe5\x1d\xef\x0a\xa4\x22\xa9\x25\x53\xe6\x88\x59\x05\x72\xf8\xb5\x2d\x3e\x9d\x9b\x8f\x89\x3b\x14\x8f\x43\x06\x67\xb3\x5f\xb0\x4d\xae\x14\x09\xf2\x32\xd9\xbe\xc8\x71\x56\x6c\xb3\x4a\xdc\x81\xf8\x5a\x24\x8e\x5b\x56\xfe\x9d\xd9\x38\xb1\xd8\xd4\xc3\x6d\x7d\x08\xb4\x62\xad\xfc\x3b\xd3\x8c\x23\x84\x15\xb4\x53\xc1\x5c\x7b\x9d\xff\x98\x6c\x7c\xf3\xf8\x58\x74\x9d\x00\xc8\xa0\xb3\x24\xa6\xb5\x99\x6c\xd7\x6a\x5a\x6f\x2e\x1f\x47\xc0\x98\x11\x5e\x09\x42\x2c\x70\x0a\xe8\x0d\x20\xb9\x02\x34\x13\x14\xb7\xaf\xef\xb4\xa4\xdd\x03\x3d\x29\xea\x19\x90\xd3\xb2\x2a\x19\xdd\x9b\xdf\x87\x04\xc1\xd5\xcc\x7a\x66\x1c\x0f\xaf\xa2\x15\xb7\x37\xec\xf0\xda\x3d\x3e\x4e\xb0\xbb\x8a\xd4\x26\x9a\x67\x5f\xc4\x60\xf3\x96\x54\x41\xb6\x35\x70\x00\x0e\xc7\x38\xb3\xca\x7e\xa6\x3b\xe2\x7b\x9a\x0e\xae\x38\x01\x0f\x09\x4a\x84\xd8\xe1\x51\x09\xb7\xd7\x38\x97\x30\xd7\x8b\xbe\x29\xe4\x62\xca\x7b\x42\x61\x42\xf9\x82\x29\x07\xa6\x17\x51\xfe\x9c\xf2\x9e\x47\x59\x44\x5e\xde\x79\x2c\x67\x5e\x44\xba\x9c\xe5\x1e\xa3\xfd\x85\x50\x8a\x51\x06\xc0\x38\x42\x44\x3a\x00\x28\xa6\x14\x25\xb5\x30\xb9\x36\x25\x8b\x8d\xaf\x3c\x7d\xe5\x2d\x11\xc6\x0a\xb0\xdc\xfe\xfe\x8f\x18\x95\x41\xfb\x11\x31\xcd\x78\x48\x99\x29\x36\x61\xf5\xad\x2f\x7b\xbb\xee\x7d\x6f\x6a\xae\x56\xfe\x7d\x59\x8b\x5d\x44\x34\xcd\x99\x96\x64\x9a\xb3\x33\x2d\xde\x5c\x3b\xad\xc4\x6f\x57\xf5\x35\xcd\x03\x57\x4c\x84\x4b\x41\xf7\xf3\x41\x74\x43\x1f\xb2\x58\xc1\xf9\xc6\x2f\x03\xb9\x3a\x65\x87\xfc\x6c\x58\x3c\x76\xd3\x86\x56\x95\xc4\x38\x42\xb2\xb4\xc6\x93\x32\xcb\xd3\xde\x13\x76\xd5\xd4\x4d\x77\x54\xff\xc4\xcd\x37\x36\xdd\x70\x1c\xdf\xc9\x78\xb2\xb7\x7f\x27\x5b\x77\xda\x4f\x45\xd3\xfe\x69\x3c\x41\x2a\x63\x61\x6e\xe4\xc1\xd1\xdf\x42\x8c\xe1\x93\x15\xce\x3e\xdc\xf2\xe7\xdc\x5e\xe4\xcb\xdb\xab\x29\x6d\xd3\x3e\xff\x1f\xee\xd6\x63\x77\x1a\x70\x57\xcd\x7d\x9f\xaa\xc9\xed\x46\x0f\xe5\xbf\xb5\x2a\x7f\x9f\x1d\xaa\xdf\x1c\x62\xaf\x1c\xab\x6a\xfa\x18\x50\x9b\x6f\x83\x7f\x03\x00\x00\xff\xff\x87\xf5\x8f\xd7\x23\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2083, mode: os.FileMode(436), modTime: time.Unix(1518004106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

