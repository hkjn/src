// Code generated by go-bindata.
// sources:
// index.tmpl
// node.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xe0\x5c\x5a\x60\x2d\x21\xbb\x97\xc2\xab\x55\xb1\x1f\x97\x00\xbb\x69\xd0\x64\x0b\xf4\x48\x89\x63\x93\x0d\xc5\x51\xc9\x71\x1c\xc3\xf0\x7f\x2f\x28\xd1\xb2\x1c\x7f\x6c\xf6\xd4\x53\x18\xce\xf0\x71\xe6\xcd\x9b\x11\x5d\x28\x6e\x4c\x99\x16\x0a\x85\x2c\xd3\xc2\xf3\xda\x60\x99\x56\x24\xd7\xb0\x49\x93\x39\x59\x9e\xce\x45\xa3\xcd\x7a\x06\x1f\x9d\x16\xe6\x7d\xba\x4d\x53\xf1\x06\xc4\xec\x49\x7b\xcd\x28\x83\x1b\xe3\x33\x4f\x25\xd6\xe4\x04\x6b\xb2\x33\xb0\x64\xf1\x7d\x3c\xbe\x42\xbd\x50\x3c\x83\x8a\x8c\x7c\x9f\x26\x35\x19\x72\x33\xa8\x8c\xa8\x1f\x03\x18\x8b\xca\x60\x00\x69\x84\x5b\x68\x3b\x65\x6a\x67\x70\x8d\x4d\x77\x51\x6f\x64\xf9\x06\xe2\x4a\x05\xcf\x8a\x9c\x44\x37\x83\xeb\xf6\x19\x3c\x19\x2d\xe1\x4a\xca\x80\xdd\x0a\x29\xb5\x5d\xcc\xe0\xb7\xf6\x79\x7c\xde\xcd\x2c\xab\x69\xad\xb4\x91\xbf\xe0\x13\xda\x5f\x3b\x14\x51\x3f\x2e\x1c\x2d\xad\x9c\xc6\x98\xae\x10\x71\x7c\xac\xbb\x2c\x62\xc6\xb8\xde\x06\xe0\x61\xaf\x22\x66\x6a\x86\xed\x8e\x06\x61\xf4\xc2\xce\xc0\xe0\x9c\x03\x56\x91\x47\x4a\x8b\x3c\x52\x1c\xb8\x2d\xd3\xa4\x50\xd7\x65\x21\x40\x39\x9c\x7f\x98\x5c\x4d\xca\xa2\x26\x89\xa5\xb1\x0d\xd9\x22\xef\xd6\x45\x2e\xca\x22\x57\xd7\x65\x9a\x26\x45\x5b\x3e\x28\xed\x41\x7b\x10\xd0\x90\xd5\x4c\x4e\xdb\x05\x48\xe1\x55\x45\xc2\x49\x98\x93\x03\x56\x08\x5f\x03\xdb\x36\xd8\x6e\x91\x57\xe4\x1e\xc1\x2d\x6d\xf8\x3f\x4d\x04\xc3\xee\x96\x4c\x3d\xfe\x63\xb3\x06\xe3\x55\x50\xad\x61\x08\x46\x31\xb7\x7e\x96\xe7\xd1\x65\x52\x86\x45\x08\x26\x2b\xf2\x76\x1c\xcc\x0a\x2b\xf0\xe8\x9e\xd0\x01\x3e\x6b\xcf\x1e\x1a\xa1\xad\x59\x03\x53\xbf\x9f\x26\x21\xa2\x01\x38\x6f\x90\x9d\xae\xfd\xa4\xdc\xad\x02\x2a\xa0\x95\x2d\x69\xcb\x5d\x0a\x77\x8e\x1a\x64\x85\x4b\x9f\x26\x4c\x50\x93\x31\x58\x33\x48\xc1\xa2\xb3\xff\xbb\x44\xa7\xd1\x83\xb0\x12\x16\x4e\xb4\xca\x77\xdb\x43\xd6\x69\xb2\x4b\x3b\x5e\x31\x0a\xfa\x6f\x5a\x42\x23\xd6\x20\x8c\x27\xa8\x10\xb4\x65\x74\xe8\x83\x88\xb5\x0d\xe4\xa5\xc9\x11\x09\x7b\xaa\xf2\x49\xb9\x0f\x6e\x4f\x7c\x48\x21\x4d\x7c\xed\x44\xdb\x17\x24\x04\xea\xa8\x01\x0e\x14\x31\x91\x19\x22\xe8\x64\x55\xa6\x49\x52\xb0\x0b\x7f\x92\x82\x55\x5f\x71\x78\x42\xe7\x75\xa8\x3c\xab\x68\x91\x51\x11\x9b\x0d\x64\xdf\xc8\xfe\xd5\x3b\xc0\x76\x3b\xa8\x83\x65\x87\x95\xf7\x60\x07\x98\x3b\x36\xe4\xae\xf8\xbf\x9f\x41\xbe\xf1\x7f\xf6\x0e\x3f\x0d\x7c\x39\xe2\x1b\x3b\xa7\xec\xa7\x62\xbe\x25\x89\xa0\xe5\x25\xbc\xe0\x72\x23\x5f\x07\xf7\xd1\x68\xe1\x0f\xc0\x36\x1b\x58\x69\x56\x90\x75\x26\x98\x6e\xb7\x7b\xf8\x3d\xe6\x66\x03\x68\x3c\xc2\x76\xfb\xdd\x3e\x5a\x5a\x59\x10\xc1\x7d\xb3\x99\x06\x9d\x76\x7e\x17\x2e\x95\xd2\xa1\xf7\x97\x72\x88\x2e\xaf\x4b\xe2\x93\xa1\xfa\x51\x75\xf3\xf3\x65\x2a\x3d\xda\xc8\xe1\x07\xa1\x3d\x10\x0b\x03\x96\x24\x1e\xb1\x92\xdd\x2e\x9b\x40\xad\x7f\x15\x44\xad\x84\xb5\x68\x4e\xa2\x7c\x8e\xb6\x1f\x00\xdd\x2e\x9b\x0a\x1d\xd0\x1c\x5a\x44\x77\x84\x64\xd0\x42\x76\x17\x2c\xaf\xc6\xb1\xe4\x9a\x51\x6c\x7d\xa1\x4f\x82\xf7\xc0\x7d\xca\xe1\xcc\xf9\x90\x8b\x3c\xf6\x6b\x98\xd5\x6f\x41\xcb\x0f\x93\x0e\x71\x32\x1a\xdb\x71\xe3\xae\xbf\xa9\x1b\xd7\x6f\xcf\xb7\xfa\xcd\x58\xdd\xc7\x12\x55\xe5\x57\xe1\x19\x3c\xa2\x3d\xd8\xbd\x3a\xc5\xb9\x2a\x63\xe4\xe0\x59\x30\x1e\x9a\xfe\x58\x3a\xa8\x84\x11\xb6\xc6\x83\xfd\x07\x85\xfa\xc8\xb2\x63\x76\xb3\x01\x27\xec\x02\x77\xdc\x4f\xb7\xdb\x83\xf8\xc7\x52\xee\x3b\x31\xbb\x57\xe4\xf8\x58\xca\x03\xd7\x7d\xa7\xed\x99\x1d\x0c\x21\xd1\x07\xdd\xa0\x67\xd1\xb4\xd9\xbd\xb6\x35\x9e\x70\xeb\x84\x70\xa2\x40\x03\xcc\xce\x96\x7d\x41\x5f\xdf\x07\x1e\x2e\x7a\x7d\xea\x13\x7f\xa0\xef\x97\xd1\x06\xbf\x07\x85\xcd\x09\x0d\xee\x87\xc1\x0b\x95\xbc\xeb\x55\x22\xd6\x0d\x5a\x3e\x14\xca\xb0\x77\x17\x57\x51\x2e\xef\xca\xd7\xaa\xa5\xa1\xa5\xe5\x83\xad\x2f\xe8\x59\xdb\xee\xc9\x75\x58\xe6\x1d\xb3\x07\xbb\x81\x9f\xa5\x7f\x51\xf5\x51\xd1\x63\x5c\x27\xea\xde\xb5\x4d\x6f\xbe\x91\xa7\x98\xfb\xe6\x05\x93\x57\x3a\xbb\x67\xb7\xfb\x96\xbc\x70\x19\xc5\x7a\xca\xbc\x17\x43\x58\x9d\xf2\xe8\xc3\x3f\xae\xc6\xd9\x62\xf4\x2d\x1b\x5b\xe7\xb3\xb0\x52\xcb\xd0\x28\xe3\xaa\x9c\x30\x0e\xeb\x7e\x56\x76\x8f\x0b\x8b\xab\x51\x0b\xee\xba\x7c\x78\x06\x79\xac\xbb\xb4\xbc\xa2\x95\x8f\xc7\x58\x09\x86\x15\x42\xd3\x8d\xe6\x95\xb0\x1c\x1e\x45\xd4\xa2\x3d\x40\x03\xa6\x95\x70\x32\x3e\x52\xce\x08\xe1\x78\x4e\x84\xf6\x7b\xc5\xe0\xd8\xcf\xc7\x1f\x0f\x90\xb3\xba\xf8\xfc\x92\xa3\x33\x02\x39\xdb\xeb\xc3\x57\x1b\x3a\xb7\xfe\xfb\x87\x3e\x6a\x65\xbb\x85\xff\x65\x3a\x5c\x52\x4f\x91\xf7\x6f\xf4\x22\xef\x7f\x1c\xfd\x17\x00\x00\xff\xff\xfc\x0a\x0b\xf3\x24\x0d\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3364, mode: os.FileMode(436), modTime: time.Unix(1518794518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x92\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x18\x76\x2f\x2d\x6c\x6c\xd2\x53\x51\x54\xc1\x1e\x0b\x65\x4f\xa5\x77\xd9\x33\xb1\xd4\xc8\x1a\x23\xcf\x6e\x12\x4c\xfe\x7b\x91\xa3\x86\xbd\x3d\x8f\x66\xbe\xf7\x78\xd8\x78\x99\xa2\x55\xc6\x93\x43\xab\xcc\x22\xd7\x48\x56\xf5\x8c\x57\x58\x55\x73\xe4\x24\xbb\xa3\x9b\x42\xbc\x6a\x78\xcd\xc1\xc5\x83\xba\x29\xe5\x5e\xc0\xe9\x8f\xb0\x04\x21\x2c\x6b\x42\x17\xd9\x21\x0d\x9c\x9d\x04\x4e\x1a\x12\x27\x3a\xd4\xf3\x33\x85\xd1\x8b\x86\x9e\x23\x1e\x54\x33\x70\xe4\xac\xa1\x8f\x6e\x38\x15\x98\xb8\x3e\x52\x81\x4c\x2e\x8f\x21\xed\x84\x67\x0d\x7b\x9a\x36\xa3\xfb\xa3\xe0\x0b\x54\xe5\xcb\x66\xcf\x19\x29\x6b\xd8\xcf\x17\x58\x38\x06\x84\x67\xc4\xc2\x9e\x1d\x62\x48\xa3\x86\xef\xf3\xe5\xf3\x7d\xd6\x49\xfc\x6e\xf0\x21\xe2\x17\xfa\xa0\xf4\x75\xa3\xb8\xe1\x34\x66\x7e\x4f\xb8\xab\x99\x9e\x89\xe8\xf3\xd9\x66\x56\x99\x35\xd7\xb7\x02\x7e\xcc\x7a\x16\xe1\xe9\x31\xde\x6a\x70\x31\x8c\x49\x43\xa4\xa3\x14\x96\xe9\x6a\xa5\xa6\xab\x15\x97\x6e\xad\x6a\x8c\xdf\x5b\xe3\xc0\x67\x3a\xfe\x78\x7a\x7e\xb2\x66\x60\x24\x1b\xd3\xc4\xc9\x74\x9b\x36\x9d\xb3\xa6\xf3\x7b\xab\x54\x63\x66\xfb\xdb\x87\x05\xc2\x02\x0e\x26\x4e\x41\x38\x87\x34\x02\xba\xc5\xf7\xec\x32\xc2\x91\x33\x88\x27\xf8\x55\xda\x4e\xe5\xed\x8d\xe4\xcc\xf9\x04\xf9\x3d\x95\x6f\xd5\x38\x81\xff\x2e\xad\x3f\xfd\x4d\xed\x44\xd5\x0a\xfa\x2b\x3c\xc2\x78\x91\x79\xd1\x5d\x57\x57\x9e\x6c\x11\x25\x4c\x6b\xba\xb9\x86\xf9\x13\xe8\x5c\x3c\x12\x23\x55\xe8\xba\x42\xfb\xc6\x48\x3f\x11\x6e\xb7\xca\x6d\x55\xb3\xae\x70\x0e\xe2\xa1\x7d\x8d\xc1\x2d\x70\xbb\xa9\xa6\xcc\xda\x4d\xad\x2b\x50\xc2\x4d\xde\xd9\xa6\xbb\xd7\x63\xba\xfb\x7f\xf9\x2f\x00\x00\xff\xff\x62\x78\x9d\xa5\x9f\x02\x00\x00")

func nodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_nodeTmpl,
		"node.tmpl",
	)
}

func nodeTmpl() (*asset, error) {
	bytes, err := nodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.tmpl", size: 671, mode: os.FileMode(436), modTime: time.Unix(1518792943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"node.tmpl": nodeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"node.tmpl": &bintree{nodeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

