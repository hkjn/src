// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x49\x6f\xdb\x3a\x10\xc7\xef\xfe\x14\xf3\x02\x38\xb7\x88\xb6\x72\x08\x12\xd0\x7c\x48\x5e\x0e\x2f\x40\x91\x06\x5d\xd1\x93\x41\x8b\x63\x91\xb5\x44\x0a\xe4\x28\x0b\x0c\xf7\xb3\x17\x94\x69\xd7\x6b\x12\xf4\x22\x58\xe4\xcc\x6f\xfe\xb3\x59\x5c\x53\x5d\x89\x1e\x9f\x38\xf5\x22\x7a\x5c\x0f\xc5\xff\x58\x55\xee\x1f\xce\xf4\x50\xf4\x78\x23\xbe\x68\x13\xc0\x04\x90\x16\xf0\xb9\x41\x6f\x6a\xb4\x04\xbe\xb5\xd6\xd8\x12\x24\x41\x65\x33\x3d\xfb\x69\xb3\x1a\xe1\xc9\x90\x86\x0f\xa6\xd4\xd4\x5d\xde\x23\x3d\x39\x3f\x03\x69\x15\xdc\x18\x2a\x9c\xb1\x30\x79\x01\x2e\x41\x7b\x9c\x8e\x4e\x34\x51\x13\xae\x18\x4b\xee\x27\x22\xfe\xe0\x4c\x8a\x8c\xb3\x46\xf4\x62\xf4\x1f\xae\x85\x3a\x02\x61\x82\x60\x2c\xa1\xc7\x40\xa8\xc0\x58\x20\x8d\xdb\xa8\x2b\xc6\x6a\xb7\x16\x73\x75\x39\xb8\x1c\xb0\xd2\xcb\x46\xff\x5b\x0e\x32\x2f\x6d\x89\x63\x63\x9b\x96\x46\xc3\x5c\x9f\x96\x83\x2c\x90\x2c\x66\xa8\x46\xc3\xf8\x82\xcf\x8d\x1f\x55\x2b\xe9\x6a\x6c\xdb\x7a\x5c\x68\x69\x2d\x56\x21\xde\x93\x9c\x8c\x06\xa7\xe5\x70\x1f\x34\xdc\x04\x0d\x0f\x82\x1a\x44\x1f\xe2\x65\xa2\xe4\xdb\x14\x15\x4f\x36\x20\xf9\x1e\x84\x1c\xc9\x6a\xa5\x67\x5c\xc8\x46\x16\x86\x5e\xc6\x75\x90\xe4\x82\x36\xfd\x8b\x9b\xc2\x1b\x42\x6f\x64\xff\xfc\xf6\x57\x3f\xcf\xc9\x8d\x49\x63\xdd\xbf\xf8\x8f\xdc\xb8\x0d\xfd\x3c\xef\x5f\xdc\x46\x72\xa7\xe0\x44\x3c\x78\x57\x23\x69\x6c\x03\x28\x19\xf4\xc4\x49\xaf\x62\xe5\x21\x14\x5e\x36\xb1\x79\x4a\x92\x84\xa9\x77\x35\x50\x9c\x00\x72\xae\x5a\xb5\x45\xe7\x82\x17\x4e\xa1\x98\x2c\x9b\xaa\x38\xeb\x5e\xc1\xd8\xa9\xe3\x4c\xe7\xa2\x37\x9f\x83\x99\x42\x96\xba\xae\xb2\xbb\xf0\x29\x4d\xcc\xd9\x62\x11\x1b\x7b\x04\x10\x80\x07\xf2\xce\x96\x22\x4d\x18\x67\xe9\x7d\x19\x7c\x3e\x07\xac\x02\xc2\x3b\x21\xd6\xad\x47\x75\x0f\x74\x06\x68\x55\x04\x6d\x24\xf4\xa7\xe4\x47\x53\x5a\x8f\xf7\xd1\xa4\x0e\x40\x8e\xa7\xd5\x89\xe1\x8d\xf8\xd8\x7a\x30\xaa\xb3\xec\x7c\xe6\xf3\xed\x50\x76\xea\xb2\x7b\xa7\xf0\x4e\x2d\x16\x09\xbb\xae\x48\xb7\x76\x9b\xd6\xd7\x95\x91\x61\x25\x2a\x92\x65\x77\xb0\x05\x87\x7d\xce\x46\x65\xbf\xda\x99\x75\x4f\x36\x39\x4e\x9d\x07\xd7\x7a\x88\x27\xd6\x29\xdc\x2b\xe1\x2a\x8c\x52\x1e\x43\x17\xe8\xd5\x44\xae\x93\xdd\x8e\x84\x44\x79\x44\x1f\x8c\xb3\x6f\x52\xbe\x25\xbb\xc3\x94\x49\xe5\x8a\x99\xc6\xee\xbf\xe3\x2d\xd2\xcd\x86\xed\x0e\xad\xc7\xf5\xb9\xf8\x8e\xa0\xe5\x23\xc2\x8e\xef\x43\x5c\xeb\xf4\xfc\x4c\x3e\x0e\x42\xf4\xd6\xe7\xa2\xc7\xdb\xaa\x2b\x69\xb7\xe7\xc7\x9c\x96\x1d\xaa\x8c\x38\xd4\x15\xce\x2a\xb3\x5d\x63\x16\x99\x2b\x3d\xb1\x3d\xe0\xa6\xbb\x92\xe2\x88\x84\xf4\x7c\xb7\xa4\x0d\xa7\xbf\x91\x74\x68\x27\x5f\xdd\x81\x77\x6e\x25\x4b\xdf\x24\xb6\xfc\x44\xfd\x0e\x00\x00\xff\xff\x18\xc9\xfd\xa4\xaa\x06\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1706, mode: os.FileMode(436), modTime: time.Unix(1517501200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

