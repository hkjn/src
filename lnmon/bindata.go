// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xe0\x5c\x5a\x60\x2d\x21\xbb\x97\xc2\xab\x55\xb1\x1f\x97\x00\xbb\x69\xd0\x64\x0b\xf4\x48\x89\x63\x93\x35\x45\xaa\xe4\x38\x8e\x61\xf8\xbf\x17\x14\x69\x59\x8e\x65\xaf\xf7\xd4\x53\x18\xce\xf0\x71\xe6\xcd\x9b\x11\x5d\x08\x6a\x54\x99\x16\x02\x19\x2f\xd3\xc2\xd1\x46\x61\x99\x56\x86\x6f\x60\x9b\x26\x73\xa3\x69\x3a\x67\x8d\x54\x9b\x19\x7c\xb4\x92\xa9\xf7\xe9\x2e\x4d\xd9\x1b\x60\xb3\x67\xe9\x24\x21\xf7\x6e\x84\x2f\x34\xe5\x58\x1b\xcb\x48\x1a\x3d\x03\x6d\x34\xbe\x8f\xc7\xd7\x28\x17\x82\x66\x50\x19\xc5\xdf\xa7\x49\x6d\x94\xb1\x33\xa8\x14\xab\x97\x1e\x8c\x58\xa5\xd0\x83\x34\xcc\x2e\xa4\x9e\x92\x69\x67\x70\x8b\x4d\x77\x51\x30\x12\x7f\x03\x71\x25\xbc\x67\x65\x2c\x47\x3b\x83\xdb\xf6\x05\x9c\x51\x92\xc3\x0d\xe7\x1e\xbb\x65\x9c\x4b\xbd\x98\xc1\x6f\xed\xcb\xf0\xbc\x9d\x69\x12\xd3\x5a\x48\xc5\x7f\xc1\x67\xd4\xbf\x76\x28\xac\x5e\x2e\xac\x59\x69\x3e\x8d\x31\xdd\x20\xe2\xf0\x58\x77\x59\xc4\x8c\x71\xbd\xf5\xc0\xfd\x5e\x65\x88\x4c\xd3\x6f\x77\x34\x30\x25\x17\x7a\x06\x0a\xe7\xe4\xb1\x8a\x3c\x52\x5a\xe4\x91\x62\xcf\x6d\x99\x26\x85\xb8\x2d\x0b\x06\xc2\xe2\xfc\xc3\xe4\x66\x52\x16\xb5\xe1\x58\x2a\xdd\x18\x5d\xe4\xdd\xba\xc8\x59\x59\xe4\xe2\xb6\x4c\xd3\xa4\x68\xcb\x27\x21\x1d\x48\x07\x0c\x1a\xa3\x25\x19\x2b\xf5\x02\x38\x73\xa2\x32\xcc\x72\x98\x1b\x0b\x24\x10\xbe\x7a\xb6\xb5\xb7\xdd\x23\xad\x8d\x5d\x82\x5d\x69\xff\x7f\x9a\x30\x82\xfd\x2d\x99\x58\xfe\xa3\xb3\x06\xe3\x55\x50\x6d\xa0\x0f\x46\x10\xb5\x6e\x96\xe7\xd1\x65\x52\xfa\x85\x0f\x26\x2b\xf2\x76\x18\xcc\x1a\x2b\x70\x68\x9f\xd1\x02\xbe\x48\x47\x0e\x1a\x26\xb5\xda\x00\x99\xb0\x9f\x26\x3e\xa2\x1e\x38\x6f\x90\xac\xac\xdd\xa4\xdc\xaf\x3c\x2a\xa0\xe6\xad\x91\x9a\xba\x14\x1e\xac\x69\x90\x04\xae\x5c\x9a\x90\x81\xda\x28\x85\x35\x01\x67\xc4\x3a\xfb\xbf\x2b\xb4\x12\x1d\x30\xcd\x61\x61\x59\x2b\x5c\xb7\xdd\x67\x9d\x26\xfb\xb4\xe3\x15\x83\xa0\xff\x36\x2b\x68\xd8\x06\x98\x72\x06\x2a\x04\xa9\x09\x2d\x3a\x2f\x62\xa9\x3d\x79\x69\x72\x42\xc2\x81\xaa\x7c\x52\x1e\x82\x3b\x10\xef\x53\x48\x13\x57\x5b\xd6\x86\x82\xf8\x40\xad\x69\x80\x3c\x45\x64\x8c\x0a\x11\x24\x69\x52\x74\xba\x2a\xd3\x24\x29\xc8\xfa\x3f\x49\x41\x22\x94\x1c\x9e\xd1\x3a\xe9\x4b\x4f\x22\x5a\x78\x94\xc4\x76\x0b\xd9\x37\xa3\xff\x0a\x0e\xb0\xdb\xf5\xf2\x20\xde\x61\xe5\x01\xec\x08\x73\x4f\x07\xdf\x57\xff\xf7\x33\xc8\x77\xee\xcf\xe0\xf0\xd3\xc0\x97\x23\xbe\xd3\x73\x93\xfd\x54\xcc\xf7\x86\x23\x48\x7e\x09\xcf\xbb\xdc\xf1\xeb\xe0\x3e\x2a\xc9\xdc\x11\xd8\x76\x0b\x6b\x49\x02\xb2\xce\x04\xd3\xdd\xee\x00\x7f\xc0\xdc\x6e\x01\x95\x43\xd8\xed\xbe\xeb\xa5\x36\x6b\x0d\xcc\xbb\x6f\xb7\x53\x2f\xd4\xce\xef\xc2\xa5\x9c\x5b\x74\xee\x52\x0e\xd1\xe5\xba\x24\x3e\x29\x53\x2f\x45\x37\x40\x5f\xa7\x12\xd0\x06\x0e\x3f\x08\xed\xc9\x10\x53\xa0\x0d\xc7\x13\x56\xb2\xfb\x55\xe3\xa9\x75\x57\x41\xd4\x82\x69\x8d\x6a\x14\xe5\x73\xb4\xfd\x00\xe8\x7e\xd5\x54\x68\xc1\xcc\xa1\x45\xb4\x27\x48\x0a\x35\x64\x0f\xde\x72\x35\x8e\x36\xb6\x19\xc4\x16\x0a\x3d\x0a\x1e\x80\x43\xca\xfe\xcc\xf9\x90\x8b\x3c\xf6\xab\x1f\xd6\x6f\x41\xf2\x0f\x93\x0e\x71\x32\x98\xdb\x71\xe3\x21\xdc\xd4\xcd\xeb\xb7\xdd\x81\xd1\x56\xbf\x1b\xaa\xfb\x54\xa2\xa2\xfc\xca\x1c\x81\x43\xd4\x47\xbb\x37\x63\x9c\x8b\x32\x46\x0e\x8e\x18\xe1\xb1\xe9\x8f\x95\x85\x8a\x29\xa6\x6b\x3c\xda\x7f\x12\x28\x4f\x2c\x7b\x66\xb7\x5b\xb0\x4c\x2f\x70\xcf\xfd\x74\xb7\x3b\x8a\x7f\x28\xe5\xd0\x89\xd9\xa3\x30\x96\x4e\xa5\xdc\x73\x1d\x3a\xed\xc0\x6c\x6f\xf0\x89\x3e\xc9\x06\x1d\xb1\xa6\xcd\x1e\xa5\xae\x71\xc4\xad\x13\xc2\x48\x81\x7a\x98\xbd\x2d\xfb\x82\xae\x7e\xf4\x3c\x5c\xf4\xfa\x14\x12\x7f\x32\xdf\x2f\xa3\xf5\x7e\x4f\x02\x9b\x11\x0d\x1e\x86\xc1\x2b\x95\xbc\x0b\x2a\x61\x9b\x06\x35\x1d\x0b\xa5\xdf\x7b\x88\xab\x28\x97\x77\xe5\xb5\x6a\x69\xcc\x4a\xd3\xd1\xd6\x17\x74\x24\x75\xf7\xe6\x3a\x2e\xf3\x9e\xd9\xa3\x5d\xcf\xcf\xca\xbd\xaa\xfa\xa0\xe8\x31\xae\x91\xba\x77\x6d\x13\xcc\x77\x7c\x8c\xb9\x6f\x8e\x91\x71\x42\x66\x8f\x64\xf7\xdf\x92\x57\x2e\x83\x58\xc7\xcc\x07\x31\xf8\xd5\x98\x47\x08\xff\xb4\x1a\x67\x8b\x11\x5a\x36\xb6\xce\x67\xa6\xb9\xe4\xbe\x51\x86\x55\x19\x31\xf6\xeb\x30\x2b\xbb\xd7\x85\xc6\xf5\xa0\x05\xf7\x5d\xde\xbf\x83\x1c\xd6\x5d\x5a\x4e\x98\xb5\x8b\xc7\x48\x30\x82\x35\x42\xd3\x8d\xe6\x35\xd3\xe4\x5f\x45\xa6\x45\x7d\x84\x06\x64\xd6\xcc\xf2\xf8\x4a\x39\x23\x84\xd3\x39\xe1\xdb\xef\x8a\xc1\x71\x98\x8f\x3f\x1e\x20\x67\x75\xf1\xf9\x35\x47\x67\x04\x72\xb6\xd7\xfb\xaf\x36\x74\x6e\xe1\xfb\x87\x2e\x6a\x65\xb7\x83\xff\x65\x3a\x5c\x52\x4f\x91\x87\x47\x7a\x91\x87\x5f\x47\xff\x05\x00\x00\xff\xff\x97\x09\xbc\x05\x25\x0d\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 3365, mode: os.FileMode(436), modTime: time.Unix(1518778105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

