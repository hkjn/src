// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xc1\x6e\xdc\x36\x10\x3d\x5b\x5f\x31\xf5\xa5\x97\x46\x44\x92\x5b\xc1\xb2\xb0\x0d\x14\x0d\x90\xba\x41\xe3\xb4\xe8\x91\x5a\xce\x2e\x59\x53\x33\x02\x39\x8a\x63\x08\xfe\xf7\x82\x5c\xed\xae\xd6\xf6\x26\x6e\x2f\x8b\x25\xf5\xf8\xe6\xcd\x7b\x1a\x4a\x7b\xe9\xa3\x69\x74\xc7\xee\xde\x34\xda\xbf\x36\xbf\x62\x8c\xfc\x9d\x56\xfe\xb5\x69\xf4\x60\x6e\x7c\xc8\x10\x32\x58\x02\xfc\x32\x60\x0a\x3d\x92\xc0\x5d\x10\x0f\x97\x41\x56\x1c\x08\x2c\x39\x78\x1f\x36\x5e\x28\xd0\x06\xae\x51\xee\x38\xdd\x42\x1a\xa9\xae\xad\x80\x5e\xb1\x43\x13\xa9\xf5\xb7\xff\x50\xdb\xa3\x56\x75\x03\xba\x7b\xd0\x16\x7c\xc2\xf5\x4f\xe7\x5e\x64\xc8\x3f\x2a\x35\x43\xce\x4d\xf9\xa3\x95\x35\xad\x56\x83\x69\xb6\x52\x10\x86\x31\x0d\x9c\xb1\x28\x12\x86\x88\x36\x11\xf4\x9c\x10\x6c\xc7\xa3\x80\x78\x84\x40\x84\x09\x8a\x86\x40\x9b\x0c\xbc\x3e\x12\x5a\x10\xef\xaf\x4b\xe9\xde\x16\x00\x04\x01\xb4\x39\x60\x2a\x84\x3c\x60\xb2\x82\x8d\x78\xcc\x08\xce\x62\xcf\x94\x7f\xa8\x07\x17\xa0\x2e\x63\xfa\x8c\x70\xe7\x6d\xad\x78\xff\x7d\x42\x70\x1c\x68\x73\xd0\xfa\x37\x8f\xd0\x17\x4f\xa0\x2b\x8a\x04\x13\x66\x41\x07\x81\xaa\x82\x27\x6d\xf7\xbc\x77\x47\x45\x52\x2b\xa6\xcc\x11\xb3\x0a\xe4\xf0\x4b\x5b\x42\x3a\x37\x1f\x12\xf7\x28\x1e\xc7\x0c\xce\x66\xdf\xb1\x4d\xae\x38\x04\x79\x95\xec\x50\x7a\x71\x56\x6c\xb3\x4e\xdc\x83\xf8\xea\x10\xc7\x9d\x24\xff\xc6\x6c\x63\xe8\xb6\x66\xb8\x5d\x08\x81\xd6\xac\x95\x7f\x63\x9a\x69\x82\xb0\x86\x76\x76\xcb\xb5\xef\xf2\x1f\x73\x86\xaf\x1e\x1e\x4a\x53\x27\x08\x32\xe8\x2c\x89\x69\x63\xe6\xcc\xb5\x9a\xd7\xdb\xe2\xd3\x04\x18\x33\xc2\x0b\x49\x88\x05\x4e\x11\xbd\x02\x24\x57\x88\x16\x0d\xc5\xdd\xab\x77\xba\xa5\xfd\xdb\x79\xb2\xa9\x67\x48\x4e\xb7\x55\xc5\xe8\xc1\xfc\x3e\x26\x08\xae\x22\xeb\x99\x69\x3a\x2e\x45\x6b\x6e\xaf\xd9\xe1\x3b\xf7\xf0\x30\xd3\xee\x1d\xa9\x13\xb4\x44\x5f\xc4\x60\xf3\x4e\x54\x61\xb6\x75\xe3\x88\x1c\x9e\xf2\x2c\x9c\xfd\x44\xb7\xc4\x77\x34\x1f\x5c\x73\x02\x1e\x13\x94\x1d\x62\x87\x4f\x2c\xdc\x95\x71\x2e\x61\xae\x85\xbe\xda\xc8\xc5\x8c\x7b\x24\x61\x66\xf9\x8c\x29\x07\xa6\x6f\xb2\xfc\x39\xe3\x9e\x67\xe9\x22\xaf\x6e\x3d\xd6\xb9\xf9\x16\xd3\xe5\x02\xfb\x94\xed\x2f\x84\x62\x46\x99\xfe\x69\x82\x88\x74\x44\x50\x42\x29\x9d\x54\x63\x72\x1d\x4a\x16\x1b\x5f\x78\xfa\xca\x5b\x22\x8c\x95\x60\xb5\xfb\xff\x1f\x39\xaa\x82\xf6\x03\x62\x5a\xe8\x90\x72\xa1\xd8\x84\x35\xb7\xa1\x3c\xdb\x4f\xef\x5b\x53\xb1\x5a\xf9\xb7\x65\x2d\xb6\x8b\x68\x9a\x33\x2d\xc9\x34\x67\x67\x5a\xbc\xb9\xb6\xe5\x62\x15\xbf\x5b\x5f\x31\x11\xae\x04\xdd\xcf\x47\xbb\x5b\xbd\x90\xc5\xca\x11\xfc\x97\x91\x5c\xbd\x53\xc7\xfc\xec\xb6\x78\xec\xe7\x07\x5a\xd5\xaa\xd3\x04\xc9\xd2\x06\x4f\xf6\x55\xde\xe5\x83\x42\x57\x53\x2c\x2a\x6b\x5c\xe2\x96\xdb\x7b\xb1\x8f\x9e\x1d\xe2\xdf\x99\xde\x7e\x2c\xca\x0f\x89\x3f\x62\x2a\xd3\xbe\xcc\xe7\xe8\xe8\x6f\x21\xc6\xf0\xd1\x0a\x67\x1f\x6e\xf8\x53\x6e\x2f\xf2\xe5\xcd\xd5\x0c\xdb\x4e\xc5\xff\xa7\xbb\xf1\xd8\x9f\x26\xdc\x7b\x76\x18\x3f\x35\x87\xd8\xe8\xb1\x7c\x81\x55\xf9\x7d\xf6\xae\xfc\xea\xdd\xf4\xc2\xdb\x52\xcd\x1f\x78\xb5\xfd\xde\xff\x1b\x00\x00\xff\xff\xba\xd8\x3f\xc9\xf7\x07\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2039, mode: os.FileMode(436), modTime: time.Unix(1517934703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

