// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xc1\x72\xdb\x36\x10\x3d\x93\x5f\xb1\x55\xce\x21\x27\xc9\xad\x83\x70\x26\x71\x0e\xf5\x4c\xe2\x7a\x6a\xa7\x9d\x1e\x21\x62\x65\xa0\x26\xb1\x2c\xb0\xb4\xa2\xd1\xe8\xdf\x3b\x00\x21\x8a\x94\x68\xd7\x87\x9c\x04\x2d\x76\x17\x0f\xfb\xde\x2e\x21\x34\xb7\x4d\x95\x8b\x35\xa9\x5d\x95\x67\x42\xbf\xab\x7e\xc3\xa6\xa1\x5f\x44\xa9\xdf\x55\x79\x9e\x89\xae\xba\xd7\xc6\x83\xf1\x20\x2d\xe0\x8f\x0e\x9d\x69\xd1\x32\x6c\x0d\x6b\xf8\x6a\x1e\x34\x5b\x63\x1f\xe0\x06\x79\x4b\xee\x11\x5c\x6f\xc3\xff\x3c\x93\x0c\xa2\x26\x85\x55\x63\x0b\xfd\xf8\x8f\x2d\x5a\x14\x65\x34\xc0\x7a\x97\x67\x42\x82\x76\xb8\xf9\xb8\xd2\xcc\x9d\xff\xb5\x2c\x93\xcf\xaa\x0a\x0b\x51\xca\xaa\x10\x65\x37\x45\xb0\xc5\x35\x78\x74\x4f\xe8\x02\x98\x27\x74\xde\x90\xcd\xb3\xe1\x90\xfd\x1e\x8a\x6f\x64\xff\x1c\xac\x87\xc3\xf1\x28\x69\x15\xe0\x0f\xe3\xd9\x43\x2b\x8d\x6d\x76\xc0\x34\x64\xc9\x33\xd6\x08\x23\x8c\xb2\x45\x76\xa6\xf6\xab\xea\xb8\x0a\x18\x00\xad\xea\xc8\x58\x86\x0d\x39\xb8\x75\xd4\x22\x6b\xec\x7d\x9e\x31\x41\x4d\x4d\x83\x35\x83\x92\x2c\xe3\xfe\xbf\x3d\x3a\x83\x3e\x1e\xfa\xe0\x64\xa7\x7d\x34\x8f\x45\xca\xb3\x63\x95\xd2\x11\x93\x2b\xfe\x4d\x3d\xb4\x72\x07\xb2\xf1\x04\x6b\x04\x63\x19\x1d\x7a\x46\x05\xc6\x02\x6b\x5c\x28\xd9\xa9\xb2\xe5\xaa\x3a\x81\x03\x25\xbd\x5e\x93\x74\x2a\x5c\x21\xcf\x7c\xed\x64\x17\x38\x1a\x80\x3a\x6a\x81\x43\x41\x99\xa8\x19\x11\xe8\xf7\x55\xa2\xeb\x88\x56\x1d\x6b\x68\xec\x86\x44\xa9\xdf\x57\x79\xb6\xdf\x83\xd9\x40\x71\xed\xff\x18\x68\x86\xb7\x87\x43\x84\xff\x6c\xac\x07\xe1\xd9\x91\x7d\xa8\x92\x32\x44\x99\xfe\xc7\x93\x43\xec\xef\xbd\x03\xa3\xa2\xeb\xc8\xe5\xb5\xdd\x50\x71\x43\x0a\xaf\xd5\x48\xe6\x80\x35\x60\x88\xda\x2b\x3e\x35\x46\xfa\x11\x41\xc8\x22\xa3\x65\x96\x08\x16\xc2\xb1\xf1\x08\x29\xec\xbb\x7d\xb4\xb4\xb5\x29\x34\xd0\x45\xbd\x83\x60\xb1\xa4\x70\x8c\x79\x1b\x94\x00\xd3\xa3\x94\x72\xe8\xe3\x61\x97\xc0\x3f\xa5\xcd\xf3\xb3\x53\x6c\xd2\xee\x72\x6c\x92\xf0\x73\xb1\xeb\x86\xea\x47\x8d\xa1\xd0\xcb\xf1\x9f\x27\x0e\x0b\x39\xfe\x42\x08\x17\x06\xda\xc0\x7e\x0f\x0d\x5a\x88\x65\x0e\x58\xe3\x8d\x7d\x94\x1b\xb1\x6c\x66\x31\x5a\x3e\xe1\x3c\xa0\xb8\x45\x74\x31\xac\x0b\x8b\x45\xef\xa9\x67\x71\xd3\xb7\x37\xe4\x5a\xd9\x5c\x69\x69\x2d\x36\xe9\xc8\x60\x81\xfa\x68\x8a\xcc\x06\x06\x2e\x93\x9e\xc3\x9e\xa6\x19\xe3\xe7\xe0\x83\xae\x3f\x80\x51\x1f\x57\x31\xdd\xaa\x1a\x5b\xe8\x4d\x32\x44\x68\xa1\x4d\x44\xa9\x3f\xc4\x00\x96\xeb\x06\xab\x3c\xcb\x04\xbb\xf0\x93\x09\xd6\xd5\xb5\x12\x25\xeb\xf1\x6f\x54\xde\xcc\xf2\x55\x7a\x06\x8f\x68\x67\xd6\x37\x23\xb0\x99\x39\x21\x07\xcf\x92\x71\xbe\x15\x29\x96\x8d\xb4\x35\xce\xec\xf7\x1a\xcd\xc5\x8e\x28\x07\x88\xfb\x3d\x38\x69\x1f\x70\xce\x4c\x6c\x8c\xc9\x2d\x54\x75\x52\xca\xd0\x59\xc5\x9d\x26\x37\x51\x89\x28\x59\x8d\xce\xc1\x6d\xe8\xb0\xb0\x7f\xb6\x11\xae\x7b\x6f\x5a\xf4\x2c\xdb\xae\xb8\x33\xb6\xc6\x05\xb7\x73\x9a\x2e\xd2\x1c\xf7\x8a\x2f\xe8\xeb\xbb\x50\x8d\x17\xbd\x3e\x0f\xd7\xbf\xa7\xef\x2f\x67\x1b\xfd\xee\x35\xb6\x13\xcf\x53\xbd\x26\xed\x5c\x26\xc2\x27\x5a\x91\xbb\xf0\x85\x9b\xcb\x65\xb4\xdd\xa6\xd5\x49\x34\xaf\xd4\x4c\x4b\xbd\xe5\x99\xe9\x0b\x7a\x36\x56\xb2\xa1\xb9\x6c\xc6\xca\xce\xac\xa1\x3e\xbd\x3f\xe3\xfe\x44\xfd\x11\xd7\x02\xef\xa1\x38\x69\xfb\x5a\x2d\x55\xee\x9b\x97\x4c\x5e\x9b\xe2\x8e\x5d\x98\xea\x0b\x2e\x13\xac\x4b\xdb\x27\x31\x84\xd5\x92\xc7\x00\xff\x92\x8d\xff\x21\x23\x35\xd0\x95\xb4\xca\xa8\xd0\x2e\x53\x56\x16\x36\xc7\x75\x9a\x66\x61\xa2\x5b\xdc\x4e\x1a\xf1\x44\x5b\x7a\x58\x78\xac\xe3\xb5\xbc\xa6\xad\x4f\x61\xac\x25\xc3\x16\xa1\x8d\x73\x74\x2b\x2d\x87\x87\x03\x75\x68\x67\xd9\x80\x69\x2b\x9d\x1a\x07\xd5\xa2\x10\x2e\xa7\x45\x68\xbf\x57\x8c\x8f\x9b\xbe\x5d\xa3\x0b\x33\xef\x7c\x8c\x5c\xb0\x3f\x34\xfe\xd5\x79\x3d\x9e\x11\xc3\xb3\x7d\x3d\xcc\x85\x30\x51\xa3\xdb\xf0\x19\x43\x9f\x74\x71\x38\xc0\x4f\x9e\x04\x2f\x6b\xe0\xec\x53\xfd\x8a\x37\x86\x25\x86\xf3\x77\xc6\xe5\x37\x5c\x94\xc3\x73\x57\x94\xc3\xeb\xf7\xbf\x00\x00\x00\xff\xff\xfd\xcb\xb4\x41\x05\x0b\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2821, mode: os.FileMode(436), modTime: time.Unix(1518716793, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

