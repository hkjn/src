// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcb\x6e\xdb\x3c\x10\x85\xf7\x7a\x8a\xf9\xb3\x8f\x98\xcb\x2a\x01\x7f\x02\x49\x37\x0d\x50\xa4\x41\xaf\xe8\x92\x32\x47\x26\x6b\x6a\x46\x20\xa9\x5c\x20\xe8\xdd\x0b\xca\xb2\x61\x47\x76\x92\x9d\x25\xcf\xf9\x66\xce\x1c\x52\xd2\xa6\xc6\xab\x42\x56\x6c\x5e\x54\x21\xed\xb9\xfa\x8c\xde\xf3\x7f\x52\xd8\x73\x55\xc8\x56\xfd\xb0\x2e\x82\x8b\xa0\x09\xf0\xb9\xc5\xe0\x1a\xa4\x04\xa1\x23\x72\xb4\x04\x9d\xc0\x53\x69\x57\x7f\xa9\x6c\x10\x9e\x5c\xb2\xf0\xc5\x2d\x6d\x1a\xff\xbc\xc7\xf4\xc4\x61\x05\x9a\x0c\xdc\xba\xb4\x60\x47\x50\xbd\x80\xd4\x60\x03\xd6\xff\x9f\xd8\x94\xda\x78\x2d\xc4\x24\x3f\x51\xf9\x87\x14\x5a\x95\x52\xb4\xaa\xc8\xdd\xff\x70\x07\x4d\x06\x42\x85\xe0\x28\x61\xc0\x98\xd0\x80\x23\x48\x16\xf7\x51\xd7\x42\x34\xbc\x1d\xe6\xfa\xea\xec\xea\x4c\x2c\x98\x22\x7b\x8c\xc2\x91\xc1\xe7\x32\x9b\x3d\x51\x0f\x81\x1b\x4c\x16\xbb\x08\x46\x47\x5b\xb1\x0e\x26\xb7\x85\xb8\x08\xba\xcd\x93\x1b\x9d\x74\x51\x07\x6e\x20\x65\xfb\x89\xd9\x6f\x66\xb2\x17\x4a\x2e\xd8\xa0\xaa\xd6\x8e\x8c\x14\xe3\x23\x38\xaa\x59\x0a\x7b\xa1\x8a\xbe\x07\x57\x43\x39\x59\x36\xe5\x5d\xfc\x36\xad\xeb\x74\x18\xb2\xab\x23\x80\x08\x32\xa6\xc0\xb4\x54\xd3\x7a\xa5\x98\x9e\xd7\xcd\xfb\x1e\xd0\x47\x84\x0f\x42\x88\xb7\x39\xcd\x40\xa7\x80\x64\x32\x68\xc7\x90\xdf\x04\x77\xdc\xd2\x36\xdb\xa3\xa6\x0e\x40\x8e\xdb\x1a\x87\x91\xad\xfa\xda\x05\x70\x66\xac\x1c\x35\x7d\xbf\xdf\x8a\x6a\x2e\xef\xd9\xe0\x9d\x19\x86\x09\xbb\xdd\xc8\x78\xe6\x76\xab\x6f\xbc\xd3\x71\x33\x54\x26\xeb\xf1\xc5\x1e\x1c\xe6\x9c\x9d\xcd\xfe\xa4\x15\xf1\x13\x4d\xc2\x9a\x03\x70\x17\x20\xbf\x21\x36\x38\x5b\xe1\xa6\x8d\x31\x01\xe3\xd8\xe8\x4d\x23\x37\x53\xdd\xab\x11\x26\xca\x23\x86\xe8\x98\xde\xa5\xfc\x9a\xea\x0e\x53\x2a\xcf\x8b\x95\xc5\xf1\xe2\xbc\x47\xba\xdd\xa9\x9d\xd3\x7e\x23\xe4\x65\x00\xd7\xf0\x4a\x9c\x03\x89\xe5\xf7\x14\xf2\x19\x18\x86\x0f\x28\x3e\x59\x4d\x84\x7e\x26\x2a\xa4\xbd\xcc\x32\xab\x1f\xf1\xb5\xe6\x01\x31\xec\x08\xa4\xb0\x97\xaa\x90\x9d\x1f\x33\x0b\x9a\x96\x38\x2f\x5f\x87\xef\x9d\x3a\x14\xb8\x14\xde\xed\xc7\x27\x32\xed\xe0\xe5\x7a\xf3\x30\x7f\xf0\x7a\x89\xe9\xcb\x2a\xd6\x1f\xda\x7f\x01\x00\x00\xff\xff\x50\x01\x35\x3a\x70\x05\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1392, mode: os.FileMode(436), modTime: time.Unix(1517589745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

