// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x8f\xdb\x36\x10\x3d\x4b\xbf\x62\xba\xf7\x48\x48\x72\x2b\x58\x01\x69\x8b\xa2\x06\xb2\x69\xd0\xdd\xb4\xe8\x91\x36\xc7\x26\xbb\x14\xc7\x25\x47\xd9\x18\xc6\xfe\xf7\x82\x14\xf5\x65\x6b\x17\x0b\xe4\x64\x6a\x3e\xdf\xcc\x7b\x94\x25\x34\xb7\xb6\x29\xc5\x96\xd4\xa9\x29\x0b\xa1\xdf\x36\xbf\xa3\xb5\xf4\x83\xa8\xf5\xdb\xa6\x2c\x0b\x71\x6c\xee\xb5\x09\x60\x02\x48\x07\xf8\xed\x88\xde\xb4\xe8\x18\x1e\x0d\x6b\xf8\x68\x0e\x9a\x9d\x71\x07\xf8\x84\xfc\x48\xfe\x01\x7c\xe7\xe2\x73\x59\x48\x06\xb1\x23\x85\x8d\x75\x95\x7e\xf8\xd7\x55\x2d\x8a\x3a\x19\x60\x7b\x2a\x0b\x21\x41\x7b\xdc\xff\x74\xa3\x99\x8f\xe1\xc7\xba\xce\x31\x37\x4d\x3c\x88\x5a\x36\x95\xa8\x8f\x73\x04\x8f\xb8\x85\x80\xfe\x2b\xfa\x08\xe6\x2b\xfa\x60\xc8\x95\x45\xdf\xe4\x7c\x86\xea\x96\xdc\x5f\xbd\xf5\xe9\x69\x68\x85\xdf\x4c\xe0\x00\xad\x34\xce\x9e\x80\xa9\xaf\x00\xac\x71\x06\xa1\x6e\x91\xbd\xd9\x85\x9b\x66\x38\xc5\xfe\x80\x4e\x1d\xc9\x38\x86\x3d\x79\xf8\xec\xa9\x45\xd6\xd8\x85\xb2\x60\x82\x1d\x59\x8b\x3b\x06\x25\x59\x26\xff\x7f\x1d\x7a\x83\x71\x49\x0a\x0e\x5e\x1e\x75\x48\xe6\x71\x41\x65\x31\x6c\x28\xb7\x98\x8d\xf7\x0f\x75\xd0\xca\x13\x48\x1b\x08\xb6\x08\xc6\x31\x7a\x0c\x8c\x0a\x8c\xbb\xc0\x3a\xac\x6b\xda\x6a\x7d\xd3\x4c\xe0\x40\xc9\xa0\xb7\x24\xbd\x8a\x23\x94\x45\xd8\x79\x79\x8c\xfc\xf4\x40\x3d\xb5\xc0\x71\x99\x4c\x64\x47\x04\xfa\x5d\x93\xa9\x1a\xd0\xaa\x61\x7f\xc6\xed\x49\xd4\xfa\x5d\x53\x16\xe7\x33\x98\x3d\x54\x9b\xf0\x67\x4f\x31\xbc\x79\x7a\x4a\xf0\x9f\xcd\x0d\x20\x02\x7b\x72\x87\x26\xab\x42\xd4\xf9\x39\x75\x8e\xb9\x7f\x74\x1e\x8c\x4a\xa1\x23\x8f\x1b\xb7\xa7\xea\x13\x29\xdc\xa8\x91\xc8\x1e\x6b\xc4\x90\x74\x57\x7d\xb0\x46\x86\x11\x41\xac\x22\x93\x65\x51\x08\x56\xd2\xd1\x06\x84\x9c\xf6\xc5\x3d\x38\x7a\x74\x39\x35\xd2\x45\x9d\x87\x68\x71\xa4\x70\xcc\x79\x13\x95\x00\xf3\x56\x4a\x79\x0c\xa9\xd9\x35\xf0\x0f\xd9\x79\xd9\x3b\xe7\x66\xdd\xae\xe7\x66\xf9\x3e\x97\xbb\xb5\xb4\x7b\xd0\x18\x17\xbd\x9e\xff\xf3\x2c\x60\xa5\xc6\xdf\x08\x71\x60\xa0\x3d\x9c\xcf\x60\xd1\x41\x5a\x73\xc4\x9a\x26\x0e\x49\x6e\xc4\xd2\xbe\x98\xf3\x8b\x96\xce\xa1\x4d\x69\xbb\xe1\xfc\xaa\xcc\xd4\xad\xfa\x8c\xe8\x67\x3d\x59\x4b\x06\xe9\x31\x2d\xff\x18\x7d\x93\x30\xdf\x37\x29\x58\xd4\xfa\x7d\x32\xb0\xdc\x5a\x6c\xca\xa2\x10\xec\xe3\x4f\x21\x58\x37\x1b\x25\x6a\xd6\xe3\x63\x92\xc6\xc2\xf2\x51\x06\x86\x80\xe8\x16\xd6\x3c\x06\x04\x96\x8c\x0b\xcf\x6f\x9d\x53\xf1\x8a\x40\x17\xd6\xed\xac\xb1\x1d\x3c\xa2\xee\xa1\x9c\xcf\xe0\xa5\x3b\xe0\x72\xca\xa4\xd0\x19\x5a\xd5\x4c\x94\xf5\x12\xaf\xee\x34\xf9\x19\x5d\xa2\x66\x35\x06\xc7\xb0\x5e\xea\xd1\x7f\xe1\x88\x63\xdd\x9b\x16\x03\xcb\xf6\x58\xdd\x19\xb7\xc3\xcb\xb0\xa9\xd9\x40\x5a\x75\x17\xc7\x7d\xbe\x5d\xbc\xe2\x73\x82\x17\xb9\xb7\xc6\x5a\x73\x27\x99\x82\x36\xf7\xf4\x25\x16\xf3\xf1\x4d\xd0\xc7\xf5\xb7\xe4\x3b\x0a\xde\x6b\x6c\x5f\x2a\x39\xad\x7a\x76\x25\xeb\xac\x89\xab\xdb\xfd\x8a\xd7\x92\x23\x86\xcb\x57\xd3\xf5\xb5\xcf\x42\x94\xa7\xf8\xbf\x97\xb5\xf8\x4a\x29\xb6\xd4\x39\x5e\x98\x7e\xc5\xc0\xc6\x49\x36\xb4\x54\xe3\x48\xe4\xc2\x1a\xc9\x9a\x44\x98\xe7\x9f\x94\x36\x60\x5a\x91\x59\x5c\x73\x76\x6f\xd6\x68\xa9\x6e\x43\xbf\xf6\x69\xe1\x57\x21\x33\xac\x6b\xee\x49\x7b\xf1\xb4\x16\xd1\xc3\xbf\x66\x70\x95\x40\x51\xf7\x1f\x21\xa2\xee\xbf\x49\xfe\x0f\x00\x00\xff\xff\x72\xd5\x2e\xb0\x9b\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2203, mode: os.FileMode(436), modTime: time.Unix(1518192977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

