// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x4f\x23\x39\x10\x3d\xd3\xbf\xa2\x96\x3b\x6d\x3e\x4e\x20\xaf\x57\x80\xb4\x5a\xa4\x5d\x16\x2d\x61\x47\x73\x74\xe2\x4a\xec\x89\xbb\x1c\xd9\xd5\x03\xa8\x95\xff\x3e\xb2\xd3\xf9\x22\x09\x30\x73\x89\x62\xbb\xea\xd5\x7b\xf5\xba\x6c\x69\xb9\xf1\xaa\x92\xc3\x60\x5e\x55\x25\xed\x99\xfa\x0b\xbd\x0f\xbf\x49\x61\xcf\x54\x25\x67\x6a\x60\x5d\x02\x97\x40\x13\xe0\xcb\x0c\xa3\x6b\x90\x18\x62\x4b\xe4\x68\x02\x9a\xc1\x53\x6d\xa7\xdf\xa8\x6e\x10\x9e\x1d\x5b\xf8\xdb\x4d\x2c\x97\xc3\x7b\xe4\xe7\x10\xa7\xa0\xc9\xc0\x8d\xe3\x51\x70\x04\xc3\x57\x90\x1a\x6c\xc4\xf1\xef\xc7\x96\x79\x96\xae\x84\xe8\xd3\x8f\x55\xfe\x23\x85\x56\xb5\x14\x33\x55\xe5\xea\x5f\x43\x0b\x4d\x06\x84\x21\x82\x23\xc6\x88\x89\xd1\x80\x23\x60\x8b\xdb\x50\x57\x42\x34\x61\x45\xe6\xea\xf2\xf4\xf2\x54\x8c\x02\xa5\xe0\x31\x09\x47\x06\x5f\xea\x2c\xf6\x58\x3d\xc4\xd0\x20\x5b\x6c\x13\x18\x9d\xec\x30\xe8\x68\x72\x59\x48\xa3\xa8\x67\x99\xb9\xd1\xac\xab\x71\x0c\x0d\x70\x96\xcf\x21\xf8\x25\x27\x7b\xae\xe4\x28\x18\x54\xc3\x85\x22\x23\x45\x59\x82\xa3\x71\x90\xc2\x9e\xab\xaa\xeb\xc0\x8d\xa1\xee\x25\x9b\xfa\x2e\xfd\xd7\xb7\xeb\x64\x3e\xcf\xaa\x0e\x00\x24\x90\x89\x63\xa0\x89\xea\xdb\x2b\x45\xbf\x5e\x14\xef\x3a\x40\x9f\x10\x3e\x09\x42\x61\xe5\xd3\x0e\xd0\x09\x20\x99\x0c\xb4\x21\xc8\x2f\x8d\x3b\x2c\x69\xe5\xed\x41\x51\x7b\x40\x0e\xcb\x2a\x64\xe4\x4c\xfd\xdb\x46\x70\xa6\x44\x96\x9c\xae\xdb\x2e\x45\xe3\x50\xdf\x07\x83\x77\x66\x3e\xef\x61\x57\x1d\x29\xdf\xdc\x66\xf4\xb5\x77\x3a\x2d\x49\x65\x64\x5d\x36\xb6\xc0\x61\x17\x67\xa3\xb3\x4f\x34\xa5\xf0\x4c\x7d\xe2\x38\x44\x08\x6d\x84\xbc\x43\xc1\xe0\x4e\x0b\x97\x65\x8c\x89\x98\x4a\xa1\x77\x85\x5c\xf7\x71\x6f\x28\xf4\x28\xdf\x31\x26\x17\xe8\x43\x94\xff\xfb\xb8\xfd\x28\x43\x1f\x46\x53\x8b\x65\x70\x3e\x42\xba\xd9\x88\xdd\x45\xfb\x82\x90\x9b\x01\x61\x0c\x5d\x07\x1e\x69\x0b\x20\x9b\x92\x95\x94\x79\x0c\xac\xfd\x27\xf3\x6e\xad\x26\x42\x5f\x52\x47\xcb\xff\x3f\x89\x51\x6a\xd7\x0f\x88\xb1\xc0\x50\xa1\xc2\x56\x33\xe8\x88\xc5\xb1\x59\x3e\x5b\xcd\xed\x85\x2a\xb1\x52\xd8\x8b\xbc\x66\x3d\xf4\xa8\xaa\x23\xc9\x51\x55\x47\x47\x92\xad\xba\xd7\x0d\x4a\xc1\x76\xb9\xbe\x0d\x44\x38\x62\x34\x7f\x6c\xed\x2e\xf8\x42\x62\xcd\x5b\xe1\x7f\xb6\x64\xf2\x5d\x01\x6d\xda\xbb\xcd\x16\x9b\xfe\x40\x8a\x52\xb5\xeb\x20\x6a\x9a\xe0\x41\x5d\xf9\x2b\x5e\x33\x34\xc5\xbf\xcc\xb2\x18\xc5\x66\x73\x7b\x45\xf6\xcd\xd9\xda\xf8\x65\xd3\xeb\xc7\xcc\x7c\xed\xf5\x1b\xa4\x3c\xe7\x9b\xfe\x6c\xa5\xfe\xe3\xbc\x77\x8f\x9a\x43\xb2\x6e\x10\x9e\x52\x7d\x9d\x6e\x06\xb7\x7d\xd8\x62\x1e\x7e\x1d\x6e\x60\xb1\x39\x0c\xb8\xea\xd9\x7a\xf0\x44\x6f\x62\x25\xdb\xfc\x86\x89\xfc\xbb\xf7\x96\x7c\xf7\x56\xfa\xe4\x3d\x29\xfa\x27\x52\x2c\x5e\xcc\x1f\x01\x00\x00\xff\xff\xfa\xb7\x56\x10\x39\x07\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1849, mode: os.FileMode(436), modTime: time.Unix(1517848302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

