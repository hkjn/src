// Code generated by go-bindata.
// sources:
// index.tmpl
// node.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x41\x6f\xdb\x38\x13\x3d\x4b\xbf\x62\xe0\x5c\xbe\x0f\xa8\x2d\xa4\xbd\x2c\x5c\x55\x8b\x36\xbd\x04\x68\xb3\xc1\x26\x5d\x60\x8f\x94\x38\x36\xb9\xa1\x38\x5a\x72\x1c\xc7\x30\xfc\xdf\x17\x94\x68\x59\x8e\xe5\x24\xdd\xc3\x9e\x4c\xcf\x0c\x1f\x87\x6f\xde\x8c\xe9\x5c\x71\x6d\x8a\x34\x57\x28\x64\x91\xe6\x9e\x37\x06\x8b\xb4\x24\xb9\x81\x6d\x9a\x2c\xc8\xf2\x74\x21\x6a\x6d\x36\x73\xf8\xec\xb4\x30\x1f\xd3\x5d\x9a\x8a\x77\x20\xe6\x8f\xda\x6b\x46\x19\xc2\x18\x9f\x78\x2a\xb1\x22\x27\x58\x93\x9d\x83\x25\x8b\x1f\xe3\xf6\x35\xea\xa5\xe2\x39\x94\x64\xe4\xc7\x34\xa9\xc8\x90\x9b\x43\x69\x44\xf5\x10\xc0\x58\x94\x06\x03\x48\x2d\xdc\x52\xdb\x29\x53\x33\x87\x4b\xac\xdb\x83\x3a\x27\xcb\x77\x10\x57\x2a\x44\x96\xe4\x24\xba\x39\x5c\x36\x4f\xe0\xc9\x68\x09\x17\x52\x06\xec\x46\x48\xa9\xed\x72\x0e\xbf\x34\x4f\xc3\xfd\x6e\x6e\x59\x4d\x2b\xa5\x8d\xfc\x1f\x3e\xa2\xfd\x7f\x8b\x22\xaa\x87\xa5\xa3\x95\x95\xd3\x98\xd3\x05\x22\x0e\xb7\xb5\x87\x45\xcc\x98\xd7\xfb\x00\xdc\xdb\x4a\x62\xa6\xba\x37\xb7\x34\x08\xa3\x97\x76\x0e\x06\x17\x1c\xb0\xf2\x2c\x52\x9a\x67\x91\xe2\xc0\x6d\x91\x26\xb9\xba\x2c\x72\x01\xca\xe1\xe2\xd3\xe4\x62\x52\xe4\x15\x49\x2c\x8c\xad\xc9\xe6\x59\xbb\xce\x33\x51\xe4\x99\xba\x2c\xd2\x34\xc9\x9b\xe2\x5e\x69\x0f\xda\x83\x80\x9a\xac\x66\x72\xda\x2e\x41\x0a\xaf\x4a\x12\x4e\xc2\x82\x1c\xb0\x42\xf8\x16\xd8\xb6\xc1\x77\x83\xbc\x26\xf7\x00\x6e\x65\xc3\xf7\x34\x11\x0c\xfb\x53\x66\xea\xe1\x2f\x3b\xab\x31\x1e\x05\xe5\x06\xfa\x64\x14\x73\xe3\xe7\x59\x16\x43\x26\x45\x58\x84\x64\x66\x79\xd6\x0c\x93\x59\x63\x09\x1e\xdd\x23\x3a\xc0\x27\xed\xd9\x43\x2d\xb4\x35\x1b\x60\xea\xec\x69\x12\x32\xea\x81\xb3\x1a\xd9\xe9\xca\x4f\x8a\xfd\x2a\xa0\x02\x5a\xd9\x90\xb6\xdc\x5e\xe1\xd6\x51\x8d\xac\x70\xe5\xd3\x84\x09\x2a\x32\x06\x2b\x06\x29\x58\xb4\xfe\xbf\x57\xe8\x34\x7a\x10\x56\xc2\xd2\x89\x46\xf9\xd6\xdc\xdf\x3a\x4d\xf6\xd7\x8e\x47\x0c\x92\xfe\x93\x56\x50\x8b\x0d\x08\xe3\x09\x4a\x04\x6d\x19\x1d\xfa\x20\x62\x6d\x03\x79\x69\x72\x42\xc2\x81\xaa\x6c\x52\x1c\x92\x3b\x10\x1f\xae\x90\x26\xbe\x72\xa2\xe9\x0a\x12\x12\x75\x54\x03\x07\x8a\x98\xc8\xf4\x19\xb4\xb2\x2a\xd2\x24\xc9\xd9\x85\x8f\x24\x67\xd5\x55\x1c\x1e\xd1\x79\x1d\x2a\xcf\x2a\x7a\x64\x54\xc4\x76\x0b\xb3\xef\x64\xff\xe8\x02\x60\xb7\xeb\xd5\xc1\xb2\xc5\xca\x3a\xb0\x23\xcc\x3d\x1b\x72\x5f\xfc\x5f\xcf\x20\x5f\xfb\xdf\xbb\x80\x9f\x06\x7e\x39\xe3\x6b\xbb\xa0\xd9\x4f\xe5\x7c\x43\x12\x41\xcb\x11\xbc\xbe\x26\x96\x24\x66\x3d\x7a\xd8\x70\x2d\x61\xb7\x9b\x14\xa7\x36\xe8\x4d\x9f\xa5\x74\xe8\x7d\x9b\x44\xe8\xa7\x57\x13\xf9\x6c\xb4\xf0\x47\x69\x6c\xb7\xb0\xd6\xac\x60\xd6\xba\x60\xba\xdb\x1d\x2e\x7a\xb8\xdc\x76\x0b\x68\x3c\xc2\x6e\xf7\xc3\x3e\x58\x5a\x5b\x10\x21\x7c\xbb\x9d\x06\x85\xb7\x71\xe7\x0f\xfd\x62\xa8\x7a\x50\xed\xa4\x7c\x7e\x74\x77\x8d\x41\xc0\x2b\x50\xf7\xc4\xc2\x40\xe0\xea\xe4\x16\xb3\x9b\x55\x1d\x28\xf2\x6f\x82\xa8\x94\xb0\x16\xcd\x28\xca\x55\xf4\xbd\x02\x74\xb3\xaa\x4b\x74\x40\x0b\x68\x10\xdd\x09\x92\x41\x0b\xb3\xdb\xe0\x79\x33\x8e\x25\x57\x0f\x72\xeb\x0a\x33\x0a\xde\x01\x77\x57\x0e\x7b\xce\xa7\x9c\x67\xb1\x33\xc3\x54\x7e\x0f\x5a\x7e\x9a\xb4\x88\x93\xc1\x80\x8e\x86\xdb\xee\xa4\x76\x30\xbf\x3f\xdf\xd4\xd7\x43\x1d\x9f\x4a\x4a\x15\xdf\x84\x67\xf0\x88\xf6\xc8\x7a\x31\xc6\xb9\x2a\x62\xe6\xe0\x59\x30\x1e\xbb\x7e\x5b\x39\x28\x85\x11\xb6\xc2\x23\xfb\xbd\x42\x7d\xe2\xd9\x33\xbb\xdd\x82\x13\x76\x89\x7b\xee\xa7\xbb\xdd\x51\xfe\xe7\x1b\xef\x59\xcf\x75\x5f\x67\x77\x8a\x1c\x8f\x37\x58\x5f\x8c\xae\x75\x0e\xd4\xf7\x8e\xc0\xc4\xbd\xae\xd1\xb3\xa8\x9b\xd9\x9d\xb6\x15\x8e\x84\xb5\x4a\x19\xa9\x60\x0f\xb3\xf7\xcd\xbe\xa2\xaf\xee\x02\x51\x2f\x46\x7d\xe9\x98\xb9\xa7\x1f\x2f\xa3\xf5\x71\xf7\x0a\xeb\x11\x91\x1e\xba\xfb\x99\x8c\x3e\x74\x32\x12\x9b\x1a\x2d\x1f\x2b\xa9\xb7\xdd\xc6\x55\xd4\xd3\x87\xe2\xad\x72\xaa\x69\x65\xf9\xc8\xf4\x15\x3d\x6b\xdb\xbe\xbe\x8e\x75\xb0\x67\xf6\xc8\x1a\xf8\x59\xf9\x67\xb2\x18\xa8\x22\xe6\x35\x22\x8c\xb6\xaf\x3a\xf7\xb5\x1c\x63\xee\xbb\x17\x4c\x5e\xe9\xd9\x1d\xbb\xfd\xcf\xca\x20\xe4\x9c\xb0\x06\xf9\xf7\xea\x1a\xd8\xde\x24\xb1\x83\x8a\xc2\x6a\x2c\xb9\xee\xde\xa7\x65\x3c\x5b\xc5\x6e\x18\xc4\xa6\xbc\x12\x56\x6a\x19\x5a\x70\x58\xce\x11\x67\xbf\xee\xa6\x70\xfb\x40\xb1\xb8\x1e\x34\xf7\x7e\x7e\xf4\x4f\x29\x8f\x55\x7b\x77\xaf\x68\xed\xe3\x36\x56\x82\x61\x8d\x50\xb7\x43\x7f\x2d\x2c\x87\x87\x15\x35\x68\x8f\xd0\x80\x69\x2d\x9c\x8c\x0f\x9d\x33\x0a\x3a\x9d\x40\xa1\x77\xdf\x30\x92\x0e\x93\xf7\xf5\xd1\x74\x56\x50\x57\xcf\x39\x3a\xa3\xac\xd1\x21\xf1\xef\x66\x51\xfb\x00\x88\xbf\xfd\xe8\xa3\x1a\x5f\xd6\xcf\x7f\x31\x89\x5e\x12\x5c\x9e\x75\x7f\x0d\xf2\xac\xfb\x4f\xf6\x4f\x00\x00\x00\xff\xff\x60\x99\x45\x8a\x9b\x0d\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3483, mode: os.FileMode(436), modTime: time.Unix(1518796695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\x41\x6f\xdb\x30\x0c\x85\xcf\xf6\xaf\x20\xda\xcb\x06\x34\x16\xb2\xd3\xe0\x6a\x02\xba\xed\x52\x60\xd8\x0e\x49\x77\x97\x2d\xc6\x12\x2a\x53\x86\xc4\x36\x2d\x02\xff\xf7\x41\xb6\x97\xd6\x5b\xd1\x93\xad\xc7\xc7\x4f\xe4\x4b\x60\x69\xb9\xf7\xaa\x94\x16\xb5\x51\xa5\x4c\xfc\xec\x51\x95\x4d\x30\xcf\x70\x2a\x8b\x43\x20\xde\x1c\x74\xef\xfc\x73\x0d\x37\xd1\x69\x7f\x5d\x8e\x65\xa9\xaf\x40\xd7\x8f\x2e\x39\x46\x93\x6d\x8c\x4f\xbc\x31\xd8\x86\xa8\xd9\x05\xaa\x81\x02\xe1\xf5\xd2\x7e\x44\xd7\x59\xae\xa1\x09\xde\x5c\x97\x45\x1b\x7c\x88\x35\x34\x5e\xb7\xf7\x19\xc6\xba\xf1\x98\x21\xbd\x8e\x9d\xa3\x0d\x87\xa1\x86\x2d\xf6\xd3\x45\x73\x91\xcd\x15\x2c\x6f\x36\x3b\x9b\x10\x0d\xc6\x1a\xb6\xc3\x13\xa4\xe0\x9d\x81\x4b\x63\x32\x7b\xd0\xc6\x38\xea\x6a\xf8\x3c\x3c\xbd\xee\x8f\x35\xb1\xdd\xb4\xd6\x79\xf3\x01\x1f\x91\x3e\x4e\x14\xdd\xde\x77\x31\x3c\x90\xd9\x2c\x33\x5d\x22\xe2\xeb\xb6\xe9\xb2\x85\xb9\xcc\xf5\x29\x83\xcf\x5a\x13\x98\x43\x7f\x96\xa7\x18\xb4\x77\x1d\xd5\xe0\xf1\xc0\x99\x25\xc5\x12\xa9\x14\x4b\xc4\x39\x5b\x55\x16\xd2\x6e\x95\xd4\x60\x23\x1e\xbe\x5c\x50\x30\x28\x4e\x27\xa8\x7e\x06\x83\xb7\x06\xc6\xf1\x42\xc9\x36\x18\x54\x9e\xfa\x40\x52\x4c\xef\x52\x68\x25\x85\xdd\xaa\xb2\x2c\xe4\xa0\x7e\x3b\x3c\x3a\xea\x20\x37\xc3\xec\x5e\x21\x20\x9f\x6e\x8c\x89\x98\x12\xa6\x6a\xc7\x31\xbb\xc7\x71\xa1\x55\x52\x0c\x13\x69\xda\x56\x95\x45\x21\x39\xe6\x47\x21\xd9\xaa\x5b\x23\x05\xdb\xf3\xf1\xc6\x3b\x9d\x56\xca\x0f\x9d\x18\x12\x22\xad\xd4\x4b\x68\xad\x26\x42\xbf\x36\x7f\x9b\x45\x48\xac\x19\xd7\xa5\x5f\x0f\x11\x1a\xed\x35\xb5\xb8\xd2\xf7\x16\xdd\x7f\x15\x29\xe6\x11\x5f\x26\x35\xea\xdf\xcd\xab\x9d\x0d\x91\x5f\xf6\x94\x82\xcd\xd9\x7c\x3a\xc1\xd1\xb1\x85\x6a\x5a\x08\xc6\x31\xf7\xcd\x0f\xf4\x09\x61\x1c\xef\xe8\x9e\xc2\x91\x40\x67\x43\x96\xc9\x4c\xac\x35\xa4\xca\xeb\xef\x5d\x8f\x89\x75\x3f\x54\x3b\x47\x2d\xbe\x61\xf3\x48\x50\x2d\xcb\xa7\xb7\x30\x7f\x6b\xd5\x77\x4c\xed\x2e\xa7\xf3\xae\xeb\xeb\x1c\xc7\x3e\xdc\xbd\x4f\x3b\xfb\xf6\x16\xfb\x57\xce\x25\x3f\x29\x96\xdf\x5c\x8a\xf9\xdf\x28\xc5\xfc\x19\xf8\x13\x00\x00\xff\xff\x2c\xf8\x50\xcc\x0e\x04\x00\x00")

func nodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_nodeTmpl,
		"node.tmpl",
	)
}

func nodeTmpl() (*asset, error) {
	bytes, err := nodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.tmpl", size: 1038, mode: os.FileMode(436), modTime: time.Unix(1518797397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"node.tmpl": nodeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"node.tmpl": &bintree{nodeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

