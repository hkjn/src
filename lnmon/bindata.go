// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x8f\xdb\x36\x0c\x7e\x4e\x7e\x05\x77\xef\xb5\xd0\xf6\x6d\xd0\x04\x5c\x3b\x0c\x0b\xd0\x76\xc5\x92\x6e\xd8\xa3\x12\x31\x91\x76\xb2\xe4\x49\x74\xaf\x81\x71\xff\x7d\x90\x2c\xc7\x76\xe2\x2b\x0e\xe8\x53\x64\x92\x1f\xf9\x91\xfc\xe4\x98\x6b\xaa\xad\x58\xf3\xbd\x57\x67\xb1\x5e\x71\xfd\x5a\xfc\x8e\xd6\xfa\x9f\x38\xd3\xaf\xc5\x7a\xbd\xe2\x8d\xd8\x69\x13\xc1\x44\x90\x0e\xf0\x5b\x83\xc1\xd4\xe8\x08\x1e\x0d\x69\xf8\x60\x4e\x9a\x9c\x71\x27\xf8\x84\xf4\xe8\xc3\x03\x84\xd6\xe5\x67\x49\xc0\x0f\x5e\xa1\xb0\xae\xd2\x0f\xff\xba\xaa\x46\xce\xb2\x01\xf6\x67\xe0\x12\x74\xc0\xe3\x2f\x77\x9a\xa8\x89\x3f\x33\x56\x42\xee\x44\x3a\x70\x26\x45\xc5\x59\x33\xad\xff\x88\x7b\x88\x18\xbe\x62\x00\xfc\x66\x22\x45\xa8\xa5\x71\xf6\x0c\xe4\x7b\x3b\x90\xc6\x31\x2f\xab\x91\x82\x39\xc4\x3b\x31\x9c\x52\x52\x40\xa7\x1a\x6f\x1c\xc1\xd1\x07\xf8\x1c\x7c\x8d\xa4\xb1\x8d\x29\xc9\xc1\x5b\x8b\x07\x02\x25\x49\xae\x57\xc9\xff\x5f\x8b\xc1\x60\xea\x5b\xc1\x29\xc8\x46\xc7\x0c\xbb\xed\xb9\x54\x98\x50\xfe\xc7\xb7\x50\xcb\x33\x48\x1b\x3d\xec\x11\x8c\x23\x0c\x18\x09\x15\x18\x37\x67\x3a\x4c\x60\x9c\x13\xbb\x13\x13\x6a\x4a\x46\xbd\xf7\x32\xa8\xdc\x40\x3c\x04\xd9\xa4\xda\x85\x66\xf0\x35\x50\x9a\x0f\x79\x6f\x2f\x04\xf4\x1b\x51\x86\x3f\x70\x55\xc3\xf0\x8d\x3b\x7a\xce\xf4\x1b\xb1\x5e\x75\x1d\x98\x23\x54\x9b\xf8\x67\xd9\xd9\xab\xa7\xa7\xcc\xfe\x59\x6c\x04\x1e\x29\x78\x77\x12\x65\xcd\x9c\x95\xe7\x5c\x39\x61\xff\x68\x03\x18\x95\x43\x33\xa8\xeb\xa0\xda\xb8\xa3\xaf\x3e\x79\x85\x1b\xf5\xf4\x54\x92\xf5\x5c\x13\x87\x2c\xa4\xea\xde\x1a\x19\x2f\x0c\x52\x16\x99\x2d\xb3\x44\xb0\x00\x47\x1b\x11\x0a\xec\x8b\x7b\x70\xfe\xd1\x15\x68\x5a\x96\x6f\x03\x24\x8b\xf3\x0a\x2f\x98\x57\x49\x07\x30\x2d\xa5\x54\xc0\x98\x8b\xdd\x12\xbf\x2f\xce\xeb\xda\x05\xfb\x15\x43\x34\xde\x2d\x63\xff\x2a\xce\x67\xb0\x7b\xeb\x0f\x0f\x1a\xd3\xa0\x97\xf1\xef\x26\x01\x0b\x39\xfe\x46\x48\x0d\x83\x3f\x42\xd7\x81\x45\x07\x79\xcc\x89\x6b\xee\x38\x66\xb5\x79\x92\xf6\xbb\x98\xf7\x5a\x3a\x87\x36\xc3\x0e\xc3\xf9\x45\xc8\x5c\xad\xfa\x8c\x18\x26\x35\x49\x4b\x02\x19\x30\x0f\xbf\x49\xbe\x51\x98\x6f\x45\x0e\xe6\x4c\xbf\xcd\x06\x92\x7b\x8b\x62\xbd\x5a\x71\x0a\xe9\x67\xc5\x49\x8b\x8d\xe2\x8c\xf4\xe5\x31\x4b\x63\x66\xf9\x20\x23\x41\x44\x74\x33\x6b\x69\x03\x22\x49\xc2\x99\xe7\xb7\xd6\xa9\x7c\xc9\xdb\xb8\x6c\x27\x8d\xf5\xe0\xe1\xac\xa7\xd2\x75\x10\xa4\x3b\xe1\xbc\xcb\xac\xd0\x09\x5b\x25\xc6\x95\xf5\x12\xaf\xb6\xda\x87\xc9\xba\x38\x23\x75\x09\x4e\x61\xbd\xd4\x93\xff\xca\x91\xda\xda\x99\x1a\x23\xc9\xba\xa9\xb6\xc6\x1d\xf0\x3a\x6c\x2c\x36\x2c\xad\xda\xa6\x76\x9f\x2f\x97\xae\xf8\x74\xc1\x33\xec\x47\x63\xad\xd9\x4a\xf2\x51\x9b\x9d\xff\x12\xab\xfb\xf8\x6e\xf7\xbe\x84\xf5\x97\xe4\x07\xf2\xed\x34\xd6\xdf\xc9\x38\x0e\x7a\x72\x21\x59\x51\xc4\xcd\xdd\x7e\xc1\x4b\xc9\x79\x82\xeb\x17\xd3\xed\xa5\x2f\x32\x94\xe7\xf4\x37\x56\x94\xf8\x42\x21\xd6\xbe\x75\x34\x33\xfd\x8a\x91\x8c\x93\x64\xfc\x5c\x8b\x97\x35\xce\xac\x69\x55\xa3\x04\x4b\xff\xa3\xce\x06\x4e\x0b\x22\x4b\x53\x2e\xee\xcd\xd2\x56\xaa\x8f\xb1\x9f\x7a\x75\x1f\xb7\x92\x96\x22\x26\x54\x97\xdc\xa3\xf0\xd2\x69\x29\xa2\x67\x7f\xbb\xc0\xc5\xfd\x71\xd6\x7f\x52\x70\xd6\x7f\x61\xfc\x1f\x00\x00\xff\xff\x49\xdd\x34\xd9\x69\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2153, mode: os.FileMode(436), modTime: time.Unix(1518186980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

