// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xe0\x5c\x5a\x60\x6d\x21\xbb\x97\xc2\xab\x55\xb1\x1f\x97\x00\xbb\x69\xd0\x64\x0b\xf4\x48\x8b\x63\x93\x0d\xc5\x51\xc9\x71\x1c\xc3\xf0\x7f\x2f\x28\x4a\xb2\x1c\xcb\xde\xec\xa9\xa7\x30\x9c\xe1\xe3\xe3\xe3\x9b\x11\x9d\x2b\xae\x4c\x91\xe6\x0a\x85\x2c\xd2\xdc\xf3\xd6\x60\x91\x2e\x48\x6e\x61\x97\x26\x4b\xb2\x3c\x5d\x8a\x4a\x9b\xed\x1c\x3e\x3a\x2d\xcc\xfb\x74\x9f\xa6\xe2\x0d\x88\xf9\x93\xf6\x9a\x51\x86\x34\xc6\x67\x9e\x4a\x2c\xc9\x09\xd6\x64\xe7\x60\xc9\xe2\xfb\x34\x29\xc9\x90\x9b\xc3\xc2\x88\xf2\x31\x2c\x64\xb1\x30\x18\x16\x54\xc2\xad\xb4\x9d\x32\xd5\x73\xb8\xc6\xaa\x01\x8d\x41\x96\x6f\xa0\x1d\xa9\x90\xb9\x20\x27\xd1\xcd\xe1\xba\x7e\x06\x4f\x46\x4b\xb8\x92\x52\xbe\x4f\x93\x5a\x48\xa9\xed\x6a\x0e\xbf\xd5\xcf\xc3\xf5\x6e\x6e\x59\x4d\x4b\xa5\x8d\xfc\x05\x9f\xd0\xfe\xda\xa0\x88\xf2\x71\xe5\x68\x6d\xe5\xb4\xe5\x74\x85\x88\xc3\x65\xcd\x66\x2d\x66\xcb\xeb\x6d\x00\xee\xe7\x16\xc4\x4c\x55\x3f\xdd\x1c\x59\x18\xbd\xb2\x73\x30\xb8\xe4\x80\x95\x67\xad\x7c\x79\xd6\xca\x19\x74\x2c\xd2\x24\x57\xd7\x45\x2e\x40\x39\x5c\x7e\x98\x5c\x4d\x8a\xbc\x24\x89\x85\xb1\x15\xd9\x3c\x6b\xc6\x79\x26\x8a\x3c\x53\xd7\x45\x9a\x26\x79\x5d\x3c\x28\xed\x41\x7b\x10\x50\x91\xd5\x4c\x4e\xdb\x15\x48\xe1\xd5\x82\x84\x93\xb0\x24\x07\xac\x10\xbe\xea\x95\x62\x1b\x62\xb7\xc8\x1b\x72\x8f\xe0\xd6\x36\xfc\x9f\x26\x82\xa1\xdb\x65\xa6\x1e\xff\xb1\xb3\x0a\xdb\xad\x60\xb1\x85\x9e\x8c\x62\xae\xfd\x3c\xcb\xda\x94\x49\x11\x06\x81\xcc\x2c\xcf\xea\x21\x99\x0d\x2e\xc0\xa3\x7b\x42\x17\x78\x3d\xa1\xf3\x9a\x6c\x9a\xc4\x3d\x76\x3b\x98\x7d\x23\xfb\x57\x9c\xdd\xef\xbb\x9d\x84\x95\x80\xcf\xda\xb3\x87\x4a\x68\x6b\xb6\xc0\x14\x51\xd2\x24\xf0\xef\x69\x64\x15\xb2\xd3\xa5\x9f\x14\xdd\x28\x70\x00\xb4\xb2\x26\x6d\xb9\x39\xf0\x9d\xa3\x0a\x59\xe1\xda\xa7\x09\x13\x94\x64\x0c\x96\x0c\x52\xb0\x68\xe2\xff\xae\xd1\x69\xf4\xcd\xa6\x2b\x27\x6a\xe5\x9b\xe9\x5e\xa3\x34\xe9\x44\x6a\xb7\x18\x1c\xf1\x6f\x5a\x43\x25\xb6\x20\x8c\x27\x58\x20\x68\xcb\xe8\xd0\x07\x7b\x6b\x1b\xa4\x4e\x93\x13\xc9\x0e\xc2\x66\x93\xe2\x40\xee\x70\x4d\xe1\x08\x69\xe2\x4b\x27\xea\x78\x7d\x81\xa8\xa3\x0a\x38\x08\xca\x44\x26\x32\x48\xd2\x24\x6f\x5c\x58\xa4\x49\x92\xb3\x0b\x7f\x92\x9c\x55\x34\x48\xa7\x75\x9e\xb1\x6a\x23\xb2\x18\x93\x1d\x7a\xdd\xf3\x8c\x65\x83\x95\x45\xb0\x23\xcc\x4e\x0e\xd9\x79\xe5\xf7\x33\xc8\x37\xfe\xcf\x98\xf0\xd3\xc0\x97\x19\xdf\xd8\x25\xcd\x7e\x8a\xf3\x2d\x49\x04\x2d\x2f\xe1\x85\x94\x1b\xf9\x3a\xb8\x8f\x46\x0b\x7f\x04\xb6\xdb\xc1\x46\xb3\x82\x59\x13\x82\xe9\x7e\x7f\x80\x3f\x60\xee\x76\x80\xc6\x23\xec\xf7\xdf\xed\xa3\xa5\x8d\x05\x11\xd2\x77\xbb\x69\x30\x6a\x93\x77\x61\x53\x29\x1d\x7a\x7f\xe9\x0c\x6d\xca\xeb\x0e\xf1\xc9\x50\xf9\xa8\x30\x88\xfe\xf2\x28\x11\x6d\x90\xf0\x03\x6a\x0f\xc4\xc2\x80\x25\x89\x27\xaa\xcc\x6e\xd7\x55\x90\xd6\xbf\x0a\xa2\x54\xc2\x5a\x34\xa3\x28\x9f\xdb\xd8\x0f\x80\x6e\xd7\xd5\x02\x1d\xd0\x12\x6a\x44\x77\x82\x64\xd0\xc2\xec\x2e\x44\x5e\x8d\x63\xc9\x55\x03\x6e\xf1\xa2\x47\xc1\x23\x70\x3c\x72\x58\x73\x9e\x72\x9e\xb5\xf5\x1a\x5a\xfb\x5b\xd0\xf2\xc3\xa4\x41\x9c\x0c\xba\x7c\x3b\x71\x17\x77\x6a\xba\xfb\xdb\x66\xc1\x68\xa9\xdf\x0c\xdd\x7d\x6a\x51\x55\x7c\x15\x9e\xc1\x23\xda\xa3\xd9\xab\x31\xcd\x55\xd1\x32\x07\xcf\x82\xf1\x38\xf4\xc7\xda\xc1\x42\x18\x61\x4b\x3c\x9a\x7f\x50\xa8\x4f\x22\x9d\xb2\xbb\x1d\x38\x61\x57\xd8\x69\x3f\xdd\xef\x8f\xf8\x0f\xad\x1c\x2b\x71\x76\xaf\xc8\xf1\xa9\x95\x7b\xad\x63\xa5\x1d\x94\xed\x03\xe1\xa0\x0f\xba\x42\xcf\xa2\xaa\x67\xf7\xda\x96\x38\x92\xd6\x18\x61\xe4\x82\x7a\x98\x2e\x36\xfb\x82\xbe\xbc\x0f\x3a\x5c\xcc\xfa\x14\x0f\xfe\x40\xdf\x2f\xa3\xf5\x79\x0f\x0a\xab\x11\x0f\x1e\x9a\xc1\x0b\x97\xbc\x8b\x2e\x11\xdb\x0a\x2d\x1f\x1b\xa5\x9f\xbb\x6b\x47\xad\x5d\xde\x15\xaf\x75\x4b\x45\x6b\xcb\x47\x53\x5f\xd0\xb3\xb6\xcd\x6b\xec\xf8\x9a\x3b\x65\x8f\x66\x83\x3e\x6b\xff\xe2\xd6\x07\x97\xde\xf2\x1a\xb9\xf7\xa6\x6c\x62\xf8\x46\x8e\x29\xf7\xcd\x0b\x26\xaf\xf4\xec\x9e\x5d\xf7\x2d\x79\x91\x32\xe0\x3a\x16\x3e\x98\x21\x8c\xc6\x32\x22\xfd\xd3\xdb\x38\x7b\x19\xb1\x64\xdb\xd2\xf9\x2c\xac\xd4\x32\x14\xca\xf0\x56\x46\x82\xfd\x38\xf6\xca\xe6\x75\x61\x71\x33\x28\xc1\xae\xca\xfb\x57\x93\xc7\xb2\x39\x96\x57\xb4\xf1\xed\x32\x56\x82\x61\x83\x50\x35\xad\x79\x23\x2c\x87\x57\x11\xd5\x68\x8f\xd0\x80\x69\x23\x9c\x6c\x5f\x29\x67\x8c\x70\xda\x27\x42\xf9\xbd\xa2\x71\x1c\xfa\xe3\x8f\x1b\xc8\x59\x5f\x7c\x7e\xa9\xd1\x19\x83\x9c\xad\xf5\xfe\xab\x0d\x4d\x5a\xfc\xfe\xa1\x6f\xbd\xb2\xdf\xc3\xff\xd2\x1d\x2e\xb9\x27\xcf\xe2\x93\x3e\xcf\xe2\xef\xa6\xff\x02\x00\x00\xff\xff\xf3\xd2\x3c\x8c\x3f\x0d\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 3391, mode: os.FileMode(436), modTime: time.Unix(1518776463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

