// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcb\x6e\xdb\x3c\x10\x85\xf7\x7a\x8a\xf9\xb3\x8f\x98\xcb\x2a\x06\x7f\x02\x49\x37\x0d\x50\xa4\x41\xaf\xe8\x92\x36\x47\x26\x6b\x6a\x46\x20\xa9\x5c\x20\xe8\xdd\x0b\xca\xb2\x61\x47\x76\xe2\x9d\x25\xcf\xf9\x66\xce\x1c\x52\xd2\xa6\xda\xab\x42\xce\xd9\xbc\xaa\x42\xda\x4b\xf5\x19\xbd\xe7\xff\xa4\xb0\x97\xaa\x90\x8d\xfa\x61\x5d\x04\x17\x41\x13\xe0\x4b\x83\xc1\xd5\x48\x09\x42\x4b\xe4\x68\x09\x3a\x81\xa7\xd2\xae\xfe\x52\x59\x23\x3c\xbb\x64\xe1\x8b\x5b\xda\x34\xfc\xf9\x80\xe9\x99\xc3\x0a\x34\x19\xb8\x73\x69\xc1\x8e\x60\xfe\x0a\x52\x83\x0d\x58\xfd\x7f\x66\x53\x6a\xe2\x4c\x88\x51\x7e\xa6\xf2\x0f\x29\xb4\x2a\xa5\x68\x54\x91\xbb\xff\xe1\x16\xea\x0c\x84\x39\x82\xa3\x84\x01\x63\x42\x03\x8e\x20\x59\xdc\x47\xcd\x84\xa8\x79\x3b\xcc\xec\xe6\xe2\xe6\x42\x2c\x98\x22\x7b\x8c\xc2\x91\xc1\x97\x32\x9b\x3d\x53\x8f\x81\x6b\x4c\x16\xdb\x08\x46\x47\x3b\x67\x1d\x4c\x6e\x0b\x71\x11\x74\x93\x27\x37\x3a\xe9\xa2\x0a\x5c\x43\xca\xf6\x13\xb3\xdf\xcc\x64\xaf\x94\x5c\xb0\x41\x35\x5f\x3b\x32\x52\x0c\x8f\xe0\xa8\x62\x29\xec\x95\x2a\xba\x0e\x5c\x05\xe5\x68\xd9\x94\xf7\xf1\xdb\xb8\xae\xf3\xbe\xcf\xae\x8e\x00\x22\xc8\x98\x02\xd3\x52\x8d\xeb\x95\x62\x7c\x5e\x37\xef\x3a\x40\x1f\x11\x4e\x84\x10\x6f\x73\x9a\x80\xce\x01\xc9\x64\xd0\x8e\x21\xbf\x09\xee\xb8\xa5\x6d\xb6\x47\x4d\x1d\x80\x1c\xb7\x35\x0c\x23\x1b\xf5\xb5\x0d\xe0\xcc\x50\x39\x68\xba\x6e\xbf\x15\x55\x5c\x3e\xb0\xc1\x7b\xd3\xf7\x23\x76\xbb\x91\xe1\xcc\xed\x56\xdf\x7a\xa7\xe3\x66\xa8\x4c\xd6\xc3\x8b\x3d\x38\x4c\x39\x3b\x9b\xfd\x49\x2b\xe2\x67\x1a\x85\x15\x07\xe0\x36\x40\x7e\x43\x6c\x70\xb2\xc2\x4d\x1b\x63\x02\xc6\xa1\xd1\xbb\x46\x6e\xc7\xba\x37\x23\x8c\x94\x27\x0c\xd1\x31\x7d\x48\xf9\x35\xd6\x1d\xa6\xcc\x3d\x2f\x56\x16\x87\x8b\xf3\x11\xe9\x6e\xa7\x76\x4a\xfb\x8d\x90\x97\x01\x5c\xc1\x1b\x71\x0e\x24\x96\xdf\x53\xc8\x67\xa0\xef\x4f\x50\x7c\xb2\x9a\x08\xfd\x44\x54\x48\x7b\x9d\x65\x56\x3f\xe1\x5b\xcd\x23\x62\xd8\x11\xcc\xa4\xb0\xd7\xaa\x90\xad\x1f\x42\x0b\x9a\x96\x38\xad\x5f\xa7\xef\x9d\x3a\x94\xb8\x14\xde\xed\xe7\x27\x32\xed\xe0\xed\x7a\xf7\x34\x9f\x78\xbf\xc4\xf8\x69\x15\xeb\x2f\xed\xbf\x00\x00\x00\xff\xff\xdf\xe5\xb3\x14\x71\x05\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1393, mode: os.FileMode(436), modTime: time.Unix(1517590542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

