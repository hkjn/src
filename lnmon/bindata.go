// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xdc\x36\x13\x3e\x4b\xbf\x62\x5e\xdf\x23\x21\xc9\xed\x05\x2b\x20\x6d\x51\x74\x81\x38\x0d\x6a\xa7\x45\x8f\xdc\xe5\xec\x92\x35\xc5\x51\xc9\x51\x9c\xc5\xc2\xff\xbd\x20\x45\x7d\x79\xe5\xc0\x40\x4f\x4b\xcd\xe7\x33\xf3\x3c\xd4\x4a\x68\x6e\x6d\x53\x8a\x3d\xa9\x73\x53\x16\x42\xbf\x6d\x7e\x45\x6b\xe9\x7f\xa2\xd6\x6f\x9b\xb2\x2c\x44\xd7\xdc\x6b\x13\xc0\x04\x90\x0e\xf0\x5b\x87\xde\xb4\xe8\x18\x1e\x0d\x6b\xf8\x68\x4e\x9a\x9d\x71\x27\xf8\x84\xfc\x48\xfe\x01\x7c\xef\xe2\x73\x59\x48\x06\x71\x20\x85\x8d\x75\x95\x7e\xf8\xdb\x55\x2d\x8a\x3a\x19\x60\x7f\x2e\x0b\x21\x41\x7b\x3c\xfe\x70\xa3\x99\xbb\xf0\xff\xba\xce\x31\x37\x4d\x3c\x88\x5a\x36\x95\xa8\xbb\x25\x82\x47\xdc\x43\x40\xff\x15\x7d\x04\xf3\x15\x7d\x30\xe4\xca\x62\x68\x72\xb9\x40\x75\x4b\xee\x8f\xc1\xfa\xf4\x34\xb6\x92\x4e\x01\x7e\x33\x81\x03\xb4\xd2\x38\x7b\x06\xa6\xa1\x4a\x59\xb0\x46\x98\x60\xd4\x2d\xb2\x37\x87\x70\xd3\x8c\xa7\x88\x01\xd0\xa9\x8e\x8c\x63\x38\x92\x87\xcf\x9e\x5a\x64\x8d\x7d\x28\x0b\x26\x38\x90\xb5\x78\x60\x50\x92\x65\xf2\xff\xd3\xa3\x37\x18\x52\xd3\x93\x97\x9d\x0e\xc9\x3c\x2d\xa9\x2c\xc6\x2d\xe5\x16\x8b\x11\xff\xa2\x1e\x5a\x79\x06\x69\x03\xc1\x1e\xc1\x38\x46\x8f\x81\x51\x81\x71\xc0\x1a\x37\x56\x36\x6f\xb6\xbe\x69\x66\x70\xa0\x64\xd0\x7b\x92\x5e\xc5\x11\xca\x22\x1c\xbc\xec\x22\x47\x03\x50\x4f\x2d\x70\x5c\x28\x13\xd9\x09\x81\x7e\xd7\x64\xba\x46\xb4\x6a\xdc\xa1\x71\x47\x12\xb5\x7e\xd7\x94\xc5\xe5\x02\xe6\x08\xd5\x2e\xfc\x3e\xd0\x0c\x6f\x9e\x9e\x12\xfc\x17\x73\x03\x88\xc0\x9e\xdc\xa9\xc9\xca\x10\x75\x7e\x4e\x9d\x63\xee\x6f\xbd\x07\xa3\x52\xe8\xc4\xe5\xce\x1d\xa9\xfa\x44\x0a\x77\x6a\x22\x73\xc0\x1a\x31\x24\xed\x55\x1f\xac\x91\x61\x42\x10\xab\xc8\x64\x59\x15\x82\x8d\x74\xb4\x01\x21\xa7\x7d\x71\x0f\x8e\x1e\x5d\x4e\x8d\x74\x51\xef\x21\x5a\x1c\x29\x9c\x72\xde\x44\x25\xc0\xb2\x95\x52\x1e\x43\x6a\x76\x0d\xfc\x43\x76\x3e\xef\x9d\x73\xb3\x76\xb7\x73\xb3\x84\x5f\xca\xdd\x5b\x3a\x3c\x68\x8c\x8b\xde\xce\xff\x71\x11\xb0\x51\xe3\x4f\x84\x38\x30\xd0\x11\x2e\x17\xb0\xe8\x20\xad\x39\x62\x4d\x13\x87\x24\x37\x62\x69\xbf\x9b\xf3\x93\x96\xce\xa1\x4d\x69\x87\xf1\xfc\xaa\xcc\xd4\xad\xfa\x8c\xe8\x17\x3d\x59\x4b\x06\xe9\x31\x2d\xbf\x8b\xbe\x59\x98\xef\x9b\x14\x2c\x6a\xfd\x3e\x19\x58\xee\x2d\x36\x65\x51\x08\xf6\xf1\xa7\x10\xac\x9b\x9d\x12\x35\xeb\xe9\x31\x49\x63\x65\xf9\x28\x03\x43\x40\x74\x2b\x6b\x1e\x03\x02\x4b\xc6\x95\xe7\x97\xde\xa9\x78\x45\xa0\x0f\xdb\x76\xd6\xd8\x8e\x1e\x51\x0f\x50\x2e\x17\xf0\xd2\x9d\x70\x3d\x65\x52\xe8\x02\xad\x6a\x66\xca\x06\x89\x57\x77\x9a\xfc\x82\x2e\x51\xb3\x9a\x82\x63\xd8\x20\xf5\xe8\x7f\xe6\x88\x63\xdd\x9b\x16\x03\xcb\xb6\xab\xee\x8c\x3b\xe0\xf3\xb0\xb9\xd9\x48\x5a\x75\x17\xc7\x7d\xb9\x5d\xbc\xe2\x4b\x82\x57\xb9\xb7\xc6\x5a\x73\x27\x99\x82\x36\xf7\xf4\x25\x16\xf3\xf1\x4d\x30\xc4\x0d\xb7\xe4\x3f\x14\xbc\xd7\xd8\x7e\xaf\xe4\xbc\xea\xc5\x95\xac\xb3\x26\xae\x6e\xf7\x2b\x5e\x4b\x8e\x18\x9e\xbf\x9a\xae\xaf\x7d\x16\xa2\x3c\xc7\xff\xbe\xac\xc5\x57\x4a\xb1\xa5\xde\xf1\xca\xf4\x33\x06\x36\x4e\xb2\xa1\xb5\x1a\x27\x22\x57\xd6\x48\xd6\x2c\xc2\x3c\xff\xac\xb4\x11\xd3\x86\xcc\xe2\x9a\xb3\x7b\xb7\x45\x4b\x75\x1b\x86\xb5\xcf\x0b\xbf\x0a\x59\x60\xdd\x72\xcf\xda\x8b\xa7\xad\x88\x01\xfe\x35\x83\x9b\x04\x8a\x7a\xf8\x10\x11\xf5\xf0\x5d\xf2\x6f\x00\x00\x00\xff\xff\x1b\xbe\x24\x07\x9f\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2207, mode: os.FileMode(436), modTime: time.Unix(1518368535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

