// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcb\x6e\xdb\x3c\x10\x85\xf7\x7a\x8a\xf9\xb3\x8f\x98\xcb\x2a\x06\x7f\x02\x49\x37\x0d\x50\xa4\x41\xaf\xe8\x92\x32\x47\x26\x6b\x6a\x46\x20\xa9\x38\x81\xe0\x77\x2f\x28\xcb\x86\xaf\x89\x77\x96\x3c\xe7\x9b\x39\x73\x48\x49\x9b\x1a\xaf\x0a\x59\xb1\x79\x53\x85\xb4\xd7\xea\x33\x7a\xcf\xff\x49\x61\xaf\x55\x21\x5b\xf5\xc3\xba\x08\x2e\x82\x26\xc0\xd7\x16\x83\x6b\x90\x12\x84\x8e\xc8\xd1\x0c\x74\x02\x4f\xa5\x9d\xff\xa5\xb2\x41\x58\xb8\x64\xe1\x8b\x9b\xd9\x34\xfc\xf9\x84\x69\xc1\x61\x0e\x9a\x0c\x3c\xb8\x34\x65\x47\x50\xbd\x81\xd4\x60\x03\xd6\xff\x5f\xd8\x94\xda\x38\x11\x62\x94\x5f\xa8\xfc\x43\x0a\xad\x4a\x29\x5a\x55\xe4\xee\x7f\xb8\x83\x26\x03\xa1\x42\x70\x94\x30\x60\x4c\x68\xc0\x11\x24\x8b\xbb\xa8\x89\x10\x0d\x6f\x86\x99\xdc\x5d\xdd\x5d\x89\x29\x53\x64\x8f\x51\x38\x32\xf8\x5a\x66\xb3\x17\xea\x39\x70\x83\xc9\x62\x17\xc1\xe8\x68\x2b\xd6\xc1\xe4\xb6\x10\xa7\x41\xb7\x79\x72\xa3\x93\x2e\xea\xc0\x0d\xa4\x6c\x3f\x31\xfb\xf5\x4c\xf6\x46\xc9\x29\x1b\x54\xd5\xca\x91\x91\x62\x78\x04\x47\x35\x4b\x61\x6f\x54\xd1\xf7\xe0\x6a\x28\x47\xcb\xa6\x7c\x8c\xdf\xc6\x75\x5d\x2e\x97\xd9\xd5\x09\x40\x04\x19\x53\x60\x9a\xa9\x71\xbd\x52\x8c\xcf\xab\xe6\x7d\x0f\xe8\x23\xc2\x99\x10\xe2\x4d\x4e\x07\xa0\x4b\x40\x32\x19\xb4\x65\xc8\xaf\x83\x3b\x6d\x69\x93\xed\x49\x53\x47\x20\xa7\x6d\x0d\xc3\xc8\x56\x7d\xed\x02\x38\x33\x54\x0e\x9a\xbe\xdf\x6d\x45\x35\x97\x4f\x6c\xf0\xd1\x2c\x97\x23\x76\xb3\x91\xe1\xcc\x6d\x57\xdf\x7b\xa7\xe3\x7a\xa8\x4c\xd6\xc3\x8b\x1d\x38\x1c\x72\xb6\x36\xfb\x93\xe6\xc4\x0b\x1a\x85\x35\x07\xe0\x2e\x40\x7e\x43\x6c\xf0\x60\x85\xeb\x36\xc6\x04\x8c\x43\xa3\x77\x8d\xdc\x8f\x75\x7b\x23\x8c\x94\x17\x0c\xd1\x31\x7d\x48\xf9\x35\xd6\x1d\xa7\x54\x9e\xa7\x73\x8b\xc3\xc5\xf9\x88\xf4\xb0\x55\x7b\x48\xfb\x8d\x90\x97\x01\x5c\xc3\x9e\x38\x07\x92\x5d\x9c\x51\xfa\xc9\x6a\x22\xf4\xb1\xfc\x9e\x42\x3e\x31\x6b\x51\x21\xed\x6d\x96\x59\xfd\x82\xfb\x9a\x67\xc4\xb0\x25\x98\x48\x61\x6f\x55\x21\x3b\x3f\xa4\x15\x34\xcd\xf0\xb0\x7e\x15\xbb\x77\xea\x58\xd4\x52\x78\xb7\x1b\x9c\xc8\xb4\xa3\xd7\xea\xdd\x63\x7c\xe6\xc5\x12\xe3\x37\x55\xac\x3e\xb1\xff\x02\x00\x00\xff\xff\x48\x78\x45\xe2\x6a\x05\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1386, mode: os.FileMode(436), modTime: time.Unix(1517753480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

