// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xe0\x5c\x5a\x60\x6d\x21\xbb\x97\xc2\xab\x55\xb1\x1f\x97\x00\xbb\x69\xd0\x64\x0b\xf4\x48\x8b\x63\x93\x0d\xc5\x51\xc9\x71\x1c\xc3\xf0\x7f\x2f\x28\x4a\xb2\x1c\x2b\x5e\x2f\xd0\x53\x18\xce\xf0\xf1\xcd\x9b\x0f\xd1\xb9\xe2\xca\x14\x69\xae\x50\xc8\x22\xcd\x3d\x6f\x0d\x16\xe9\x82\xe4\x16\x76\x69\xb2\x24\xcb\xd3\xa5\xa8\xb4\xd9\xce\xe1\xa3\xd3\xc2\xbc\x4f\xf7\x69\x2a\xde\x80\x98\x3f\x69\xaf\x19\x65\x70\x63\x7c\xe6\xa9\xc4\x92\x9c\x60\x4d\x76\x0e\x96\x2c\xbe\x4f\x93\x92\x0c\xb9\x39\x2c\x8c\x28\x1f\xc3\x41\x16\x0b\x83\xe1\x40\x25\xdc\x4a\xdb\x29\x53\x3d\x87\x6b\xac\x1a\xd0\x68\x64\xf9\x06\xda\x95\x0a\x9e\x0b\x72\x12\xdd\x1c\xae\xeb\x67\xf0\x64\xb4\x84\x2b\x29\xe5\xfb\x34\xa9\x85\x94\xda\xae\xe6\xf0\x5b\xfd\x3c\x3c\xef\xe6\x96\xd5\xb4\x54\xda\xc8\x5f\xf0\x09\xed\xaf\x0d\x8a\x28\x1f\x57\x8e\xd6\x56\x4e\x5b\x4e\x57\x88\x38\x3c\xd6\x5c\xd6\x62\xb6\xbc\xde\x06\xe0\x7e\x6f\x41\xcc\x54\xf5\xdb\x4d\xc8\xc2\xe8\x95\x9d\x83\xc1\x25\x07\xac\x3c\x6b\xe5\xcb\xb3\x56\xce\xa0\x63\x91\x26\xb9\xba\x2e\x72\x01\xca\xe1\xf2\xc3\xe4\x6a\x52\xe4\x25\x49\x2c\x8c\xad\xc8\xe6\x59\xb3\xce\x33\x51\xe4\x99\xba\x2e\xd2\x34\xc9\xeb\xe2\x41\x69\x0f\xda\x83\x80\x8a\xac\x66\x72\xda\xae\x40\x0a\xaf\x16\x24\x9c\x84\x25\x39\x60\x85\xf0\x55\xaf\x14\xdb\x60\xbb\x45\xde\x90\x7b\x04\xb7\xb6\xe1\xff\x34\x11\x0c\xdd\x2d\x33\xf5\xf8\x8f\x9d\x55\xd8\x5e\x05\x8b\x2d\xf4\x64\x14\x73\xed\xe7\x59\xd6\xba\x4c\x8a\xb0\x08\x64\x66\x79\x56\x0f\xc9\x6c\x70\x01\x1e\xdd\x13\xba\xc0\xeb\x09\x9d\xd7\x64\xd3\x24\xde\xb1\xdb\xc1\xec\x1b\xd9\xbf\xe2\xee\x7e\xdf\xdd\x24\xac\x04\x7c\xd6\x9e\x3d\x54\x42\x5b\xb3\x05\xa6\x88\x92\x26\x81\x7f\x4f\x23\xab\x90\x9d\x2e\xfd\xa4\xe8\x56\x81\x03\xa0\x95\x35\x69\xcb\x4d\xc0\x77\x8e\x2a\x64\x85\x6b\x9f\x26\x4c\x50\x92\x31\x58\x32\x48\xc1\xa2\xb1\xff\xbb\x46\xa7\xd1\x37\x97\xae\x9c\xa8\x95\x6f\xb6\x7b\x8d\xd2\xa4\x13\xa9\xbd\x62\x10\xe2\xdf\xb4\x86\x4a\x6c\x41\x18\x4f\xb0\x40\xd0\x96\xd1\xa1\x0f\xe5\xad\x6d\x90\x3a\x4d\x4e\x24\x3b\x08\x9b\x4d\x8a\x03\xb9\x43\x9a\x42\x08\x69\xe2\x4b\x27\xea\x98\xbe\x40\xd4\x51\x05\x1c\x04\x65\x22\x13\x19\x24\x69\x92\x37\x55\x58\xa4\x49\x92\xb3\x0b\x7f\x92\x9c\x55\x2c\x90\x4e\xeb\x3c\x63\xd5\x5a\x64\x31\x26\x3b\xf4\xba\xe7\x19\xcb\x06\x2b\x8b\x60\x47\x98\x9d\x1c\xb2\xab\x95\xdf\x5f\x41\xbe\xf1\x7f\x46\x87\x9f\x06\x3e\xcf\xf8\xc6\x2e\x69\xf6\x53\x9c\x6f\x49\x22\x68\x79\x0e\x2f\xb8\xdc\xc8\xcb\xe0\x3e\x1a\x2d\xfc\x11\xd8\x6e\x07\x1b\xcd\x0a\x66\x8d\x09\xa6\xfb\xfd\x01\xfe\x80\xb9\xdb\x01\x1a\x8f\xb0\xdf\x7f\xb7\x8f\x96\x36\x16\x44\x70\xdf\xed\xa6\xa1\x50\x1b\xbf\x33\x97\x4a\xe9\xd0\xfb\x73\x31\xb4\x2e\x97\x05\xf1\xc9\x50\xf9\xa8\x30\x88\xfe\x32\x94\x88\x36\x70\xf8\x01\xb5\x07\x62\x61\xc0\x92\xc4\x13\x55\x66\xb7\xeb\x2a\x48\xeb\x2f\x82\x28\x95\xb0\x16\xcd\x28\xca\xe7\xd6\xf6\x03\xa0\xdb\x75\xb5\x40\x07\xb4\x84\x1a\xd1\x9d\x20\x19\xb4\x30\xbb\x0b\x96\x8b\x71\x2c\xb9\x6a\xc0\x2d\x26\x7a\x14\x3c\x02\xc7\x90\xc3\x99\xd7\x29\xe7\x59\xdb\xaf\x61\xb4\xbf\x05\x2d\x3f\x4c\x1a\xc4\xc9\x60\xca\xb7\x1b\x77\xf1\xa6\x66\xba\xbf\x6d\x0e\x8c\xb6\xfa\xcd\xb0\xba\x4f\x4b\x54\x15\x5f\x85\x67\xf0\x88\xf6\x68\xf7\x6a\x4c\x73\x55\xb4\xcc\xc1\xb3\x60\x3c\x36\xfd\xb1\x76\xb0\x10\x46\xd8\x12\x8f\xf6\x1f\x14\xea\x13\x4b\xa7\xec\x6e\x07\x4e\xd8\x15\x76\xda\x4f\xf7\xfb\x23\xfe\xc3\x52\x8e\x9d\x38\xbb\x57\xe4\xf8\xb4\x94\x7b\xad\x63\xa7\x1d\x94\xed\x0d\x21\xd0\x07\x5d\xa1\x67\x51\xd5\xb3\x7b\x6d\x4b\x1c\x71\x6b\x0a\x61\x24\x41\x3d\x4c\x67\x9b\x7d\x41\x5f\xde\x07\x1d\xce\x7a\x7d\x8a\x81\x3f\xd0\xf7\xf3\x68\xbd\xdf\x83\xc2\x6a\xa4\x06\x0f\xc3\xe0\x45\x95\xbc\x8b\x55\x22\xb6\x15\x5a\x3e\x2e\x94\x7e\xef\xae\x5d\xb5\xe5\xf2\xae\xb8\xb4\x5a\x2a\x5a\x5b\x3e\xda\xfa\x82\x9e\xb5\x6d\x5e\x63\xc7\x69\xee\x94\x3d\xda\x0d\xfa\xac\xfd\x8b\xac\x0f\x92\xde\xf2\x1a\xc9\x7b\xd3\x36\xd1\x7c\x23\xc7\x94\xfb\xe6\x05\x93\x57\x7a\x76\xcf\xae\xfb\x96\xbc\x70\x19\x70\x1d\x33\x1f\x8a\x21\xac\xc6\x3c\x22\xfd\xd3\x6c\xbc\x9a\x8c\xd8\xb2\x6d\xeb\x7c\x16\x56\x6a\x19\x1a\x65\x98\x95\x11\x63\xbf\x8e\xb3\xb2\x79\x5d\x58\xdc\x0c\x5a\xb0\xeb\xf2\xfe\xd5\xe4\xb1\x6c\xc2\xf2\x8a\x36\xbe\x3d\xc6\x4a\x30\x6c\x10\xaa\x66\x34\x6f\x84\xe5\xf0\x2a\xa2\x1a\xed\x11\x1a\x30\x6d\x84\x93\xed\x2b\xe5\x95\x42\x38\x9d\x13\xa1\xfd\x2e\x18\x1c\x87\xf9\xf8\x72\x80\x9c\x64\xff\xf3\x4b\x25\x5e\x29\x83\x57\x3b\xba\xff\x36\x43\xe3\x16\xbf\x72\xe8\xdb\x8a\xd8\xef\xe1\x7f\x9e\x01\xe7\xb2\x9f\x67\xf1\x49\x9e\x67\xf1\x77\xcf\x7f\x01\x00\x00\xff\xff\x42\xf5\x30\x72\xff\x0c\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 3327, mode: os.FileMode(436), modTime: time.Unix(1518772036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

