// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xdc\x36\x13\x3e\x4b\xbf\x62\x5e\xdf\x23\x21\xc9\xed\x05\x2b\x20\x6d\x51\x74\x81\x38\x0d\x6a\xa7\x45\x8f\xdc\xe5\xec\x92\x35\xc5\x51\xc9\x51\x9c\xc5\xc2\xff\xbd\x20\x45\x7d\x79\xe5\xc0\x40\x4f\x4b\xcd\xe7\x33\xf3\x3c\xd4\x4a\x68\x6e\x6d\x53\x8a\x3d\xa9\x73\x53\x16\x42\xbf\x6d\x7e\x45\x6b\xe9\x7f\xa2\xd6\x6f\x9b\xb2\x2c\x44\xd7\xdc\x6b\x13\xc0\x04\x90\x0e\xf0\x5b\x87\xde\xb4\xe8\x18\x1e\x0d\x6b\xf8\x68\x4e\x9a\x9d\x71\x27\xf8\x84\xfc\x48\xfe\x01\x7c\xef\xe2\x73\x59\x48\x06\x71\x20\x85\x8d\x75\x95\x7e\xf8\xdb\x55\x2d\x8a\x3a\x19\x60\x7f\x2e\x0b\x21\x41\x7b\x3c\xfe\x70\xa3\x99\xbb\xf0\xff\xba\xce\x31\x37\x4d\x3c\x88\x5a\x36\x95\xa8\xbb\x25\x82\x47\xdc\x43\x40\xff\x15\x7d\x04\xf3\x15\x7d\x30\xe4\xca\x62\x68\x72\xb9\x40\x75\x4b\xee\x8f\xc1\xfa\xf4\x34\xb6\x92\x4e\x01\x7e\x33\x81\x03\xb4\xd2\x38\x7b\x06\xa6\xa1\x4a\x59\xb0\xc6\x09\x45\xdd\x22\x7b\x73\x08\x37\xcd\x78\x8a\x10\x00\x9d\xea\xc8\x38\x86\x23\x79\xf8\xec\xa9\x45\xd6\xd8\x87\xb2\x60\x82\x03\x59\x8b\x07\x06\x25\x59\x26\xff\x3f\x3d\x7a\x83\x21\xf5\x3c\x79\xd9\xe9\x90\xcc\xd3\x8e\xca\x62\x5c\x52\x6e\xb1\x98\xf0\x2f\xea\xa1\x95\x67\x90\x36\x10\xec\x11\x8c\x63\xf4\x18\x18\x15\x18\x07\xac\x71\x63\x63\xf3\x62\xeb\x9b\x66\x06\x07\x4a\x06\xbd\x27\xe9\x55\x1c\xa1\x2c\xc2\xc1\xcb\x2e\x52\x34\x00\xf5\xd4\x02\xc7\x7d\x32\x91\x9d\x10\xe8\x77\x4d\x66\x6b\x44\xab\xc6\x15\x1a\x77\x24\x51\xeb\x77\x4d\x59\x5c\x2e\x60\x8e\x50\xed\xc2\xef\x03\xcb\xf0\xe6\xe9\x29\xc1\x7f\x31\x37\x80\x08\xec\xc9\x9d\x9a\x2c\x0c\x51\xe7\xe7\xd4\x39\xe6\xfe\xd6\x7b\x30\x2a\x85\x4e\x54\xee\xdc\x91\xaa\x4f\xa4\x70\xa7\x26\x2e\x07\xac\x11\x43\x92\x5e\xf5\xc1\x1a\x19\x26\x04\xb1\x8a\x4c\x96\x55\x21\xd8\x48\x47\x1b\x10\x72\xda\x17\xf7\xe0\xe8\xd1\xe5\xd4\x48\x17\xf5\x1e\xa2\xc5\x91\xc2\x29\xe7\x4d\x54\x02\x2c\x5b\x29\xe5\x31\xa4\x66\xd7\xc0\x3f\x64\xe7\xf3\xde\x39\x37\x4b\x77\x3b\x37\x2b\xf8\xa5\xdc\xbd\xa5\xc3\x83\xc6\xb8\xe8\xed\xfc\x1f\x17\x01\x1b\x35\xfe\x44\x88\x03\x03\x1d\xe1\x72\x01\x8b\x0e\xd2\x9a\x23\xd6\x34\x71\x48\x72\x23\x96\xf6\xbb\x39\x3f\x69\xe9\x1c\xda\x94\x76\x18\xcf\xaf\xca\x4c\xdd\xaa\xcf\x88\x7e\xd1\x93\xb5\x64\x90\x1e\xd3\xf2\xbb\xe8\x9b\x85\xf9\xbe\x49\xc1\xa2\xd6\xef\x93\x81\xe5\xde\x62\x53\x16\x85\x60\x1f\x7f\x0a\xc1\xba\xd9\x29\x51\xb3\x9e\x1e\x93\x34\x56\x96\x8f\x32\x30\x04\x44\xb7\xb2\xe6\x31\x20\xb0\x64\x5c\x79\x7e\xe9\x9d\x8a\x57\x04\xfa\xb0\x6d\x67\x8d\xed\xe8\x11\xf5\x00\xe5\x72\x01\x2f\xdd\x09\xd7\x53\x26\x85\x2e\xd0\xaa\x66\xa6\x6c\x90\x78\x75\xa7\xc9\x2f\xe8\x12\x35\xab\x29\x38\x86\x0d\x52\x8f\xfe\x67\x8e\x38\xd6\xbd\x69\x31\xb0\x6c\xbb\xea\xce\xb8\x03\x3e\x0f\x9b\x9b\x8d\xa4\x55\x77\x71\xdc\x97\xdb\xc5\x2b\xbe\x24\x78\x95\x7b\x6b\xac\x35\x77\x92\x29\x68\x73\x4f\x5f\x62\x31\x1f\xdf\x04\x43\xdc\x70\x4b\xfe\x43\xc1\x7b\x8d\xed\xf7\x4a\xce\xab\x5e\x5c\xc9\x3a\x6b\xe2\xea\x76\xbf\xe2\xb5\xe4\x88\xe1\xf9\xab\xe9\xfa\xda\x67\x21\xca\x73\xfc\xeb\xcb\x5a\x7c\xa5\x14\x5b\xea\x1d\xaf\x4c\x3f\x63\x60\xe3\x24\x1b\x5a\xab\x71\x22\x72\x65\x8d\x64\xcd\x22\xcc\xf3\xcf\x4a\x1b\x31\x6d\xc8\x2c\xae\x39\xbb\x77\x5b\xb4\x54\xb7\x61\x58\xfb\xbc\xf0\xab\x90\x05\xd6\x2d\xf7\xac\xbd\x78\xda\x8a\x18\xe0\x5f\x33\xb8\x49\xa0\xa8\x87\xef\x10\x51\x0f\x9f\x25\xff\x06\x00\x00\xff\xff\x8f\x9b\x96\x4b\x9e\x08\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 2206, mode: os.FileMode(436), modTime: time.Unix(1518193041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

