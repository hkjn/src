// Package gen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// probes.yaml
// tmpl/base.tmpl
// tmpl/index.tmpl
// tmpl/links.tmpl
// tmpl/prober.tmpl
// tmpl/scripts.tmpl
// tmpl/style.tmpl
package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _probesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x4f\xe3\x3c\x10\xbd\xf7\x57\x8c\xca\xb9\x6e\x93\xc0\xc7\xa7\x68\xd9\x5d\x24\xa4\x55\x2f\x08\x2d\x07\xb4\xc7\x89\x33\xb8\xde\xc6\x76\x64\x3b\x1b\xf8\xf7\xab\x84\x96\xba\xc4\x25\xa5\x4b\x4f\x8d\xfd\xde\xbc\x79\xf6\x1b\x9f\xc1\x03\x15\x50\x5b\x53\x10\x38\xf2\x5e\x6a\xe1\xd8\xa4\xa5\xa2\x5f\x72\xf9\x04\x60\x06\x1e\xad\x20\x9f\xc3\xca\xfb\xda\xe5\xf3\xf9\x6a\xfd\x5b\x33\x45\x13\x00\x00\x8d\x8a\x72\xb8\xc5\x35\x95\x4b\x5d\xd2\xd3\x4f\x2a\xa5\x25\xee\xfb\xcd\x16\xb5\xcf\x61\x2e\xbb\x8d\xd7\x05\xe7\xd1\x37\x2e\x87\x6c\x91\xbe\x57\x3d\x60\xbd\xd5\x08\x6a\x2f\xa1\x92\x6b\x02\x7a\x7c\x94\x5c\x92\xe6\xcf\x03\x99\x74\xb1\x88\xca\xb4\x6d\xcb\x86\x46\x1e\xa8\xf8\x24\x1b\x41\xfd\x81\x95\xad\xca\xa7\x18\xd9\x8a\x94\xe8\x56\x85\x41\x5b\x06\x42\x3f\x4c\x85\x5a\xdc\x21\x5f\xa3\xa0\x1b\xc3\x5d\xa0\xb8\xe5\x0b\x53\x1a\xce\x8c\x15\x07\x2a\x8d\xf5\xb0\xf1\xea\x9a\xca\xa3\x7e\x36\x02\x19\x37\x2a\xe8\xe1\x97\x11\x38\x74\x8b\x0a\xae\x6d\xa3\xf1\x74\x9b\xdf\x84\x99\x09\xf2\x57\xc9\x21\xbf\x4b\x55\x1b\x1b\xde\xe0\x17\x45\x1e\x7b\xe4\xd5\x54\x98\x99\xec\xf7\xa7\xc0\x8d\xf6\xa4\xfd\xd5\x74\x20\x01\x42\xfa\xdd\x39\x49\xbf\x6a\x8a\xce\x5c\xdf\xcb\x0e\x35\xfd\xfa\x61\x13\x2f\xd3\x35\xdf\xce\xd9\x61\x2b\xf7\x4d\xf1\xaf\x6e\x5e\xb4\xde\xb5\xf2\x02\x39\xc1\x47\xbb\x22\xbb\x37\x3e\xdd\xf7\xf5\xdd\x32\x32\x3e\x9b\xa8\x70\xa3\xea\xc6\xa3\xa5\x05\xc3\xba\x76\xb5\xf1\x7d\x1b\x7d\xa1\xb9\xa2\xef\xe1\x48\x8e\x8d\xd9\x07\xcb\xed\xb7\x18\xb4\xb6\xc3\x41\x8b\x0e\x2a\x74\x1e\x1c\x91\x8e\x1e\xc7\xe4\x0c\x6e\x6e\xef\x07\x4f\x66\xa9\x5d\xf4\xc9\x0c\xf4\x2d\x71\x63\xcb\x1e\xd0\xfd\x70\xfb\xa7\xc3\x27\xff\x65\x2c\xb9\x4c\x59\x72\x99\xb1\x74\xf1\xff\x66\x47\x3d\x85\x98\x95\x71\x3e\x07\x74\xb5\x7a\x62\x15\x13\xc6\x88\x8a\x3a\xb7\xec\x15\x03\x50\x5b\x7a\xcc\x21\x19\xb2\x2a\x9f\xb0\x63\xa8\x17\x31\x6a\x7a\x2a\xb5\x63\xa5\x1b\x92\x42\x59\x1d\x68\x77\x11\x67\x66\xc7\x33\xb5\x0b\x4f\x4a\xbb\x19\xaf\x4c\x53\xce\x78\xb2\x29\x51\x1a\x85\x52\xbb\xfd\x2a\x21\x30\x3d\x16\x98\x1d\x0b\x3c\x8f\x03\x77\xd9\x88\xbc\x98\x6f\x22\x72\xf2\xfd\x47\x0e\xf4\xd8\x00\xa4\x51\xee\x71\x09\x88\x71\x3b\xda\xf9\xe8\x45\x66\x07\x98\x17\x27\x33\xc7\x63\x77\x88\x39\x1e\xbb\x2c\x1e\xbb\x52\xbb\x73\xd6\xbd\x32\x33\x47\xf6\x8f\xe4\x34\x48\x47\xa9\x5d\x32\x8a\x48\x47\x11\xd9\x28\xe2\x22\x86\xf8\x1b\x00\x00\xff\xff\x97\xfc\xca\x0d\xed\x09\x00\x00")

func probesYamlBytes() ([]byte, error) {
	return bindataRead(
		_probesYaml,
		"probes.yaml",
	)
}

func probesYaml() (*asset, error) {
	bytes, err := probesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "probes.yaml", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1574460512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4e\xc3\x30\x10\x86\x77\x3f\xc5\xe1\xb1\x22\x09\x6c\x48\xc4\x59\x80\x19\x24\x58\x18\xdd\xf8\xaa\x9e\x64\x9f\xa3\xf8\x9a\xaa\xb2\xfc\xee\x28\x4e\xcb\xd0\xc9\xf2\xfd\xfe\xee\xd3\xef\x9c\xbb\x1d\xec\x6d\xc2\x56\xc2\xe4\x5f\x61\x8e\x51\x40\x30\x4c\xde\x0a\xc2\xae\x2b\x45\xe5\xec\xf0\x40\x8c\xa0\xd7\x77\xba\x14\xd5\x3f\xbc\x7f\xbe\xfd\xfc\x7e\x7d\xc0\x51\x82\x1f\x54\x7f\x3b\xd0\xba\x41\xf5\x01\xc5\xc2\x78\xb4\x73\x42\x31\xfa\x24\x87\xe6\x45\x0f\xaa\x9a\xbe\x47\xeb\x11\x16\xc2\xf3\x14\x67\x01\x62\x98\x31\x45\x7f\x12\x8a\xdc\x10\x3b\x9c\x90\x1d\xb2\xc0\xd9\x5e\xda\x4d\xbf\xad\x63\x1b\xd0\xe8\x1b\xa8\x61\x8c\x2c\xc8\x62\xf4\x99\x9c\x1c\x8d\xc3\x85\x46\x6c\xea\xe5\x11\x88\x49\xc8\xfa\x26\xad\x36\xf3\xdc\x3e\x55\xfd\x7f\x2b\x9d\xc6\x99\x26\x49\xb5\x4a\x92\x8b\xc7\xbb\x78\x1d\xd5\xb0\xbb\xa6\x7d\x77\xad\xb6\x8f\xee\x32\x28\xd5\x3b\x5a\x80\x9c\xd1\xc1\x12\xdf\x2d\xaf\x23\x68\x2b\xee\x68\x59\xe1\x8d\xea\xbb\xed\x9b\x72\x46\x76\xa5\xa8\xbf\x00\x00\x00\xff\xff\xd0\x10\x5c\x52\x7b\x01\x00\x00")

func tmplBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplBaseTmpl,
		"tmpl/base.tmpl",
	)
}

func tmplBaseTmpl() (*asset, error) {
	bytes, err := tmplBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/base.tmpl", size: 379, mode: os.FileMode(420), modTime: time.Unix(1563947973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6e\xc5\x20\x0c\x45\x77\xbe\xc2\x62\x7c\x43\x50\xd6\x8a\xc7\x54\xa9\x4b\x87\x4e\xdd\x49\x71\x1f\x56\xc1\x20\x40\x6d\x25\x8b\x7f\xaf\x9a\x64\xc8\x74\x2d\xfb\xc8\xe7\x8a\x98\x1b\x10\x07\xfc\x5d\x46\xae\xe9\x09\x3a\xe5\x9a\x10\x72\x61\x1a\xa5\x11\x3f\x20\xf8\x1e\xb7\xe2\x5b\x80\x9b\x99\x53\x89\x04\xfc\x24\x46\xd0\xd9\x13\xeb\x39\x95\xb2\x71\x75\x2f\x25\x17\xb6\x26\xae\x4e\xd9\x0a\x14\xee\xfa\x1b\x5b\xa7\xc2\xda\xd9\x3e\x5a\xe1\x87\x7b\x3f\x16\x20\xb2\x9c\xe3\x9c\xd6\x9c\x47\x6b\xaa\x53\x22\x03\x73\x4d\x7e\x20\xe8\x44\xfc\xd5\x35\x2c\xaf\xff\xb9\x7b\x7f\x68\x44\x58\xde\x5a\xd9\xb0\x3d\x53\xf7\x5b\xc2\x30\xa7\x02\xb0\x71\x85\x8f\xe4\x7b\xbf\xeb\xcd\x07\xed\x0e\x04\xc2\xc9\x1c\xad\x44\x30\x75\xdc\xf9\xab\xa6\xee\xac\x3e\xff\x1e\x22\xe4\x70\xc9\xbf\x00\x00\x00\xff\xff\xad\x8e\xff\xbc\x23\x01\x00\x00")

func tmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexTmpl,
		"tmpl/index.tmpl",
	)
}

func tmplIndexTmpl() (*asset, error) {
	bytes, err := tmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1563947973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLinksTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x41\x8a\xc3\x30\x0c\x45\xf7\x3e\x85\x30\x59\x85\x21\x26\xdb\xe0\xe8\x04\x61\x16\x03\x73\x00\x43\x94\xda\x54\x71\x4b\x5c\xd3\x85\xd0\xdd\x8b\xd3\xd2\x9d\x9e\x1e\xef\x8b\xb8\x1e\x38\xe5\x6b\x19\x1e\xfb\x9d\x27\x28\xf1\xf6\x2c\x50\x0b\x6d\x95\xdf\x02\x7a\xa7\x6a\x44\x56\xda\x52\x26\xb0\xe7\xd3\xaa\x1a\x1f\x47\x5c\x1a\x78\x17\x47\x34\xbe\x32\xa4\x75\xfe\x78\x34\x22\x47\xc8\x17\x82\x2e\xfd\x40\xc7\x30\xcd\x30\xb4\x88\x13\xfa\x00\xf1\xa0\x6d\xb6\x22\x1d\x0f\xff\x7f\x8b\xaa\xc5\xf3\xfe\x0d\x3b\xa9\x7a\x17\xd0\x3b\x4e\x6d\x83\xf2\xda\x2a\x57\x19\xcd\x17\x5f\x01\x00\x00\xff\xff\xc3\x60\x3f\xe2\xb6\x00\x00\x00")

func tmplLinksTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplLinksTmpl,
		"tmpl/links.tmpl",
	)
}

func tmplLinksTmpl() (*asset, error) {
	bytes, err := tmplLinksTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/links.tmpl", size: 182, mode: os.FileMode(420), modTime: time.Unix(1563947973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProberTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6b\xdc\x30\x10\x3d\xdb\xbf\x62\x50\x7d\x68\x43\xb0\x49\x72\x5b\xb4\x82\x94\x50\x9a\x4b\x09\x69\xef\x45\xbb\x1a\xaf\x54\x6c\x49\x48\xca\x07\x08\xfd\x8a\x5e\xfb\xeb\xfa\x4b\x8a\x2c\x7b\xeb\xa4\xdb\x42\x4f\x46\xe3\x37\xef\xcd\x7b\x33\x31\x76\x67\x60\x9d\xd9\xa1\x6b\xc3\x68\x87\x0d\x78\x69\x9e\x7c\x29\x81\x43\xff\x30\x04\x0f\x67\x5d\x4a\x75\x8c\x02\x7b\xa5\x11\x48\xc1\x93\x94\x6a\x2a\x2f\xd8\xdd\x1a\x4a\x3b\x79\xc1\x6a\xca\x41\x3a\xec\xb7\xe4\x0d\x81\xfd\xc0\xbd\xdf\x92\x4c\x0b\x52\x09\x81\x9a\xb0\xcf\xf9\x61\x5f\xf6\xf1\x93\x6d\x52\x09\x24\xec\xa3\x12\x78\x0a\x2f\xd4\x23\x28\xb1\x2d\x03\x7d\x55\xba\x37\x84\xd5\x31\x3a\xae\x0f\x08\x8d\x3a\x87\xc6\xc2\x66\x0b\xed\x34\xe9\x25\xfb\xcd\x1f\x63\x63\xdb\x4f\x7c\xc4\x94\x08\x5b\x3d\x32\x2d\xed\xe4\xe5\x34\x8b\xe6\x23\x6e\xc9\x1a\x0a\x5d\xa6\x57\x3d\x34\xb6\xbd\x51\x9e\xef\x06\x14\x99\xdb\x2e\xe3\xee\xb8\x20\x6c\xf9\x43\x3b\x9b\xe1\x38\x78\x9c\x40\x45\xe8\x06\xfd\x3e\x0b\x59\x56\x53\x79\x05\x31\x3e\xa9\x20\x33\xe1\xad\xbf\x1e\xd0\x05\xa5\x0f\x29\xad\xe8\x62\x44\x2d\x52\x62\xef\xb9\xd0\xe8\xfd\x06\x26\x96\xf9\x95\x89\xe4\xd5\xca\xf3\xb7\x73\x68\x5c\xf6\xdc\xd8\xf6\x1e\xf7\xc6\x09\x0f\xd3\xee\xf2\xd0\xae\xbd\x9f\xd2\x6b\xef\xb8\xf7\x65\xf2\x9c\xe0\x2c\x56\x42\x2c\xf9\xc2\xc1\x18\x41\x58\x5d\x51\x1f\x9c\xd1\x07\x08\x2a\x0c\x25\x0c\xd7\x7e\x51\x23\xfa\xc0\x47\x9b\x12\xbc\x9d\x2a\xd7\x07\x93\xd2\x3b\xc2\x7e\xfe\xf8\x4e\xbb\xd2\xc1\x6a\xda\x09\xf5\xb8\x0e\xe0\x6f\x5a\x53\x68\xff\x2b\xf5\x7c\x4a\x28\x07\x75\xfc\xd2\x9d\x5b\xe4\x7a\xf5\xdc\x0f\x86\x87\x79\x81\x4b\xe2\x73\x40\xf9\x8b\x3a\x7c\xe0\x6a\x78\x70\xe8\xa7\x63\xb9\x62\xa5\x08\xab\xf5\x43\x3f\x23\x4a\xe6\xd5\x8b\x43\x73\xcb\xa1\x55\x7f\xfa\x9c\xfb\xb2\xc9\x2a\x53\xff\xd3\xda\x4c\x5e\x95\x7b\x39\xae\xec\x56\xf7\x66\x3e\x9b\x6a\x36\x5c\xbd\x76\xfc\xfa\xbb\x24\x73\x2c\xfc\x0a\x00\x00\xff\xff\x76\x8c\x24\x75\xee\x03\x00\x00")

func tmplProberTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProberTmpl,
		"tmpl/prober.tmpl",
	)
}

func tmplProberTmpl() (*asset, error) {
	bytes, err := tmplProberTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/prober.tmpl", size: 1006, mode: os.FileMode(420), modTime: time.Unix(1563947973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScriptsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6e\xc3\x20\x10\x45\xf7\x9c\x02\xa1\x2c\x60\x33\x28\x5d\xd6\xa9\xef\xe2\xc2\x24\x1e\xd7\x06\x17\x70\x9b\x08\x71\xf7\xca\x31\x4e\xd5\xac\xba\x9b\x19\xbd\xff\xbe\x20\x67\x8b\x67\x72\xc8\x45\x34\x81\xe6\x14\x45\x29\xec\xb4\xcd\x3c\x06\xf3\x26\xfa\x94\xe6\xf8\xaa\x75\x37\x74\x57\xb8\x78\x7f\x19\xb1\x9b\x29\x82\xf1\xd3\xfd\xa6\x47\x7a\x8f\x7a\xf8\x5c\x30\xdc\xf4\x0b\x1c\xe1\x58\x17\x98\xc8\xc1\x10\x45\x7b\xd2\x9b\xaf\xdd\xc5\x2d\x3b\x2f\xce\x24\xf2\x8e\x93\xa3\x24\x15\xcf\x8c\xf3\x83\x14\xd0\x93\xb5\xe8\x84\x5a\x07\x94\xaa\xa9\xe7\xd8\xfb\x6f\xa1\xc0\x8c\x64\x3e\xe4\x9e\xad\xb1\x95\x48\x3d\xc5\x3d\x03\x0e\xaf\x49\xaa\x7b\xe6\x79\x63\x9c\x97\x87\x74\xc5\xff\x2d\x9d\x03\x7e\x3d\x34\xcd\x1f\xa2\x36\x6c\x60\x6d\x28\x8c\x1d\xa4\xf5\x66\x99\xd0\x25\x05\x01\x3b\x7b\x7b\xee\xd8\x9e\xde\xb0\x95\xff\xfd\xa2\x9c\xd1\xd9\x52\xd8\x4f\x00\x00\x00\xff\xff\x2f\x8a\xbb\x2e\x99\x01\x00\x00")

func tmplScriptsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScriptsTmpl,
		"tmpl/scripts.tmpl",
	)
}

func tmplScriptsTmpl() (*asset, error) {
	bytes, err := tmplScriptsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scripts.tmpl", size: 409, mode: os.FileMode(420), modTime: time.Unix(1563947973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplStyleTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x6a\xc3\x30\x10\x85\xf7\x3a\xc5\x90\xd2\x4d\xa0\x4a\x52\x28\x18\x79\x9f\x6b\x14\xd9\x1a\xfd\x50\x59\x63\xa4\x09\x49\x11\xba\x7b\xa9\x12\x8a\x17\xcd\xf2\xcd\x7b\xdf\xc7\xd4\x7a\xd8\x43\xe1\xef\x88\x92\x97\x35\x8e\x30\x97\x72\xcf\xb0\x3f\xb4\x26\x6a\x35\x68\x43\x42\xd8\xf5\xe3\xae\x35\x21\x8b\xa7\x2b\x48\x1f\x0c\x42\x15\x00\x8b\xce\x2e\x24\x05\x27\x5c\x46\xd1\x84\x74\x44\xa6\x17\x93\x9e\xbf\x5c\xa6\x4b\x32\x6f\x33\x45\xca\x0a\x5e\x86\xf3\x30\x0a\x00\x8f\xc1\x79\x56\x70\x92\x1f\x0f\x68\xd2\x4f\x99\xf3\xf0\x3f\xc3\x78\x63\x9d\x51\x77\xee\x1a\x0c\x7b\x05\xc3\xf1\x75\xbb\x7d\x3f\x3e\xf4\x6b\xa6\x09\x3f\x33\x96\x4b\xe4\xed\xbe\xff\xbc\x71\xdf\xe3\xaa\x8d\x09\xc9\xfd\x65\x1b\x49\xb3\x82\x88\x96\xbb\xcd\x86\x5b\x3f\x75\xd3\x1c\x51\x67\x05\x13\xb1\xff\x2d\x6b\xc5\x64\x5a\x13\x3f\x01\x00\x00\xff\xff\xdf\x78\xd8\x43\x59\x01\x00\x00")

func tmplStyleTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplStyleTmpl,
		"tmpl/style.tmpl",
	)
}

func tmplStyleTmpl() (*asset, error) {
	bytes, err := tmplStyleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/style.tmpl", size: 345, mode: os.FileMode(420), modTime: time.Unix(1563947973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"probes.yaml":       probesYaml,
	"tmpl/base.tmpl":    tmplBaseTmpl,
	"tmpl/index.tmpl":   tmplIndexTmpl,
	"tmpl/links.tmpl":   tmplLinksTmpl,
	"tmpl/prober.tmpl":  tmplProberTmpl,
	"tmpl/scripts.tmpl": tmplScriptsTmpl,
	"tmpl/style.tmpl":   tmplStyleTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"probes.yaml": &bintree{probesYaml, map[string]*bintree{}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"base.tmpl":    &bintree{tmplBaseTmpl, map[string]*bintree{}},
		"index.tmpl":   &bintree{tmplIndexTmpl, map[string]*bintree{}},
		"links.tmpl":   &bintree{tmplLinksTmpl, map[string]*bintree{}},
		"prober.tmpl":  &bintree{tmplProberTmpl, map[string]*bintree{}},
		"scripts.tmpl": &bintree{tmplScriptsTmpl, map[string]*bintree{}},
		"style.tmpl":   &bintree{tmplStyleTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
