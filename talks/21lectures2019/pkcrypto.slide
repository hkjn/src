Public Key Cryptography basics
08:00 22 Jan 2019

Henrik Jonsson
Team Lead
Shift Crypto
me@hkjn.me
hkjn@shiftcrypto.ch
https://hkjn.me

* Public Key cryptography basics

- private / public keys
- signatures
- encryption
- ecdsa
: elliptic curve digital signature algorithm

- secp256k1
: the bitcoin curve

* Private / public keys

- easy to go from private to public
- infeasible to go from public to private
- bitcoin address: a hash of public key

* Signing
- signing: proving you control private key without sharing it
- encryption: not used in Bitcoin!
- ECDSA: elliptic curve digital signature algorithm
- ECDSA: elliptic curves over finite fields of prime order
: elliptic curves:
:   - equations with form y^2 = x^3 + ax + b
:   - diagram: example curve over reals
:   - exercise: verify that the point (5, 30) is on the curve y^2 = x^3 + x + 1
:   - can define arithmetic operations over curve points just like we can for
:     natural numbers, real, complex, ..
:   - convention: lower case s is scalar, upper case G is curve point
: finite fields:
:   - F_7 has elements {0, 1, 2, 3, 4, 5, 6}, + - * / operations wrap around
: elliptic curves over finite fields:
:   - can define addition, etc over curve points so adding two curve points produces another
:     point on the curve
:   - generator point: if we have an elliptic curve over a finite field, can pick generator
:     point G, and keep adding it to itself until it becomes point at infinity: G, G+G, 3*G, 4*G, .., n*G = 0
:   - this generates all elements in the finite field: {0, G, 2*G, .., (n-1)*G}
: discrete log problem:
:   - P = s*G, finding s is hard given P, but finding P is easy given s
:   - easy / hard is computational statements
:   - choosing finite field of large order like 2^256 makes it infeasible to find s
:   - this is how we generate a private and public key in Bitcoin!
:   - a private key is a randomly chosen number
:   - a public key is a point on the secp256k1 curve
:   - params are y^2 = x^3 + 7, finite field over p = 2^256 - 2^32 - 977
:   - G is (0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798,
:           0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)
:   - verify that (x, y) of G lie on the curve: (y**2) % p == (x**3 + 7) % p
: ECDSA signatures:
:  - calculate (r, s), cryptographically committing to hash of message being signed
:  - given (r, s), someone who knows your public key P can verify mathematically
:    that you know s!

* Questions / discussion

- questions?
- link to these slides: [[https://talks.hkjn.me/21lectures2019/pkcrypto.slide]]
- contact details: [[https://hkjn.me]]
- Shift Crypto: [[https://shiftcrypto.ch]]

Thanks!
