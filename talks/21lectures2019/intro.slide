Intro
27 June 2019

Henrik Jonsson
`D6187A03A40A3D5662F54B4603EFBF839A5FDC15`
Rōnin Coder
me@hkjn.me
https://hkjn.me

: Henrik Jonsson / hkjn @ { hkjn.me, twitter.com, github.com }
: thanks to Lucas for inviting me and all of you for coming
: used to work for Google, also fintech and Bitcoin startups

* Intro / disclaimer

- don't trust, verify
: not particularly qualified, but neither is anyone
:   this is one person's view, not my company's or anything official (there is no one official)
:   we are all still learning what the system is, if I am wrong on major points look forward to learning together

- been around for a while
:   followed since 2010 v0.3 release hit Slashdot
:   was on cryptography list where Satoshi announced whitepaper and v0.1, but it ended up in spam filter
:   left Google 2014 partly to focus more on learning about and contributing to Bitcoin project

- earlier with [[https://google.com][Google]], [[https://safello.com/][Safello]], [[https://shiftcrypto.ch][Shift Crypto]], ..
:   just left Shift after ~9 months
:   building hardware wallets, BitBox02 in beta, worked on full node project called BitBox Base with Stadicus,
:     2018 Advanced Course student

- been working for Bitcoin since ~2015
:   Bitcoin has been my main professional focus since 2015
:   teaching others main focus; we need 100x more developers working on building Bitcoin +
:   building on top of Bitcoin
:   still very early; everyone feels like they were latecomers when they first get deeply
:     into Bitcoin

- thanks for coming to this experiment!
- all slides: [[https://talks.hkjn.me/21lectures2019]]

- who are you?
- what would you like to get out of this?

* Other courses

- [[https://www.21lectures.com/advanced-course][21 Lectures Advanced Course]] by James Chiang et al

: James is currently in NYC for Chaincode Labs residency

- [[https://programmingbitcoin.com/programming-blockchain/][Programming Blockchain]] by Jimmy Song

: I took Jimmy Song's Programming Blockchain course in Jan 2018,
: good overview of the protocol, high pace, he has a book out called
: Programming Bitcoin

- [[https://mooniversity.io/][Mooniversity]] by Justin Moon

: Justin Moon and https://mooniversity.io/ teaches Bitcoiners to Code,
: while at 21Lectures we teach coders how to Bitcoin

- [[https://cryptoadvance.io/][Cryptoadvance]] by Stepan Snigirev

- not crowded!
- need _many_ more people to understand Bitcoin, how to build on it
- teaching is best way to learn

* Course goals

: via Lucas:
:   "At our beginner course you will learn the essential knowledge about Bitcoin. You will learn what nodes are,
:   how mining works, how public / private key cryptography works, how addresses are built and everything else
:   for a solid understanding of Bitcoin from a technical perspective. This course is the perfect introduction
:   to Bitcoin for developers and technologists. It also provides the necessary knowledge for our Advanced Course."
: last goal used to be "hands-on experience with tools and concepts to be ready for Advanced Course"

: change of plans, new goals:
:   get more people building on top of Bitcoin, and using tools others build
:   short notice for guest lecturers

- give practical knowledge on what Bitcoin is, how to use it
- describe core concepts as we go
- give some understanding of Bitcoin protocol
- what are nodes?
- what are addresses and wallets?
- how does public key cryptography work?
- how does mining work?

* Course structure

- mostly application, some theory
- focus mainly on how how to work with tools
- only as much math as we need
- many concepts interlock, need scaffolding
- disclaimer: not polished, not portable, not "finished"
: i.e might have rough edges, not guaranteed to work everywhere (non
: Debian Linux), does not focus on reliability or security of software
: installation and operation

* Course overview: Day 1

- 09:00 — 09:45 [[intro.slide][Course intro (you are here)]]

- 09:45 — 11:15: [[fullnodes.slide][Full nodes]]

: cryptography underlying bitcoin
: private / public keys
: signing: proving you control private key without sharing it
: encryption: not used in Bitcoin!
: ECDSA: elliptic curve digital signature algorithm used in Bitcoin

- 11:15 — 11:30 Break

- 11:30 — 12:15 [[encoding.slide][Common encoding formats]]

: different ways to represent private and public keys and addresses

- 12:15 — 13:30 Lunch

- 13:30 — 14:15 [[history.slide][History of Bitcoin]]

: what is the history of Bitcoin, and its potential future?

- 14:15 — 15:00 [[address.slide][Bitcoin address basics]]

: what is a Bitcoin address anyway?

- 15:00 — 15:15 Break

- 15:15 — 16:00 [[theory_and_practice.slide][Theory and practice]]

: how did we get here; where might we go?

- 16:00 — 16:45 [[tx.slide][Transaction basics]]

: transactions and Script

* Course overview: Day 2

- 09:00 — 09:45 HD wallets and seed phrases
- 09:45 — 10:30 Mining basics
- 10:30 — 10:45 Break
- 09:45 — 10:30 Networking basics
- 11:30 — 12:15 Consensus basics
- 12:15 — 13:30 Lunch
- 13:30 — 14:15 Forks basics
- 14:15 — 15:00 [[applications.slide][Applications]]
- 15:00 — 15:15 Break
- 15:15 — 16:00 [[pkcrypto.slide][Public key crypto basics]]
- 16:00 — 16:45 Q&A / Open discussion

* Logistics (1/2)

- let us know if pace is too slow / too fast
- lunch / social events
- follow along in your local Linux environment, or on shared server:
  $ ping 21.hkjn.me
- let's look at the genesis block:
  https://blockstream.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
- PGP and verifying cryptographic signatures
  $ gpg --recv-keys D6187A03A40A3D5662F54B4603EFBF839A5FDC15
  $ gpg -k me@hkjn.me
:   web-of-trust: let's sign keys later!

* Logistics (2/2)

- configure environment to connect to `21.hkjn.me`
  $ wget https://j.mp/21-client{,-sig}
  $ gpg --verify 21-client-sig 21-client
  $ rm 21-client-sig
  $ less 21-client
  $ bash 21-client
  $ ssh 21
  $ tmux attach
- TOFU fingerprint
  SHA256:UW3jEzYRagjTZX6X5hYo0Oh773xI2x6UEes0b8Pdraw
- web-of-trust is a good idea

* Appendix 1: PGP fallback slide
- ... or we can try another keyserver
  $ gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D6187A03A40A3D5662F54B4603EFBF839A5FDC15
- ... or we can just fetch it ourselves
  $ wget https://hkjn.me/static/pub.asc && gpg --import pub.asc
