Intro
08:00 5 Jan 2019

Henrik Jonsson
Team Lead
Shift Crypto
me@hkjn.me
hkjn@shiftcrypto.ch
https://hkjn.me

: Henrik Jonsson / hkjn @ { hkjn.me, shiftcrypto.ch, twitter.com, github.com }
: thanks to Lucas for inviting me and all of you for coming
: Henrik used to work for Google, also fintech and Bitcoin startups

* Intro / disclaimer

- don't trust, verify
: not particularly qualified, but neither is anyone
:   this is one person's view, not my company's or anything official (there is no one official)
:   we are all still learning what the system is, if I am wrong on major points look forward to learning together

- been around for a while
:   followed since 2010 v0.3 release hit Slashdot
:   was on cryptography list where Satoshi announced whitepaper and v0.1 but it ended up in spam filter
:   left Google 2014 partly to focus more on learning about and contributing to Bitcoin project
:   my main project most of the time since 2015

- now with [[https://shiftcrypto.ch][Shift Crypto]]
:   joined ~2 months ago
:   jonas schnelli co-founder
:   privacy / security: rights, should be accessible to everyone, not sacrificed for convenience
:   equip people to keep their valuable information secure
:   simple + safe
:   hardware wallet called bitbox, new hw wallet coming Soon (tm)
:   working on more stuff, come to talk next week

- who are you?
- what would you like to get from the course?

* Course goals

: At our beginner course you will learn the essential knowledge about Bitcoin. You will learn what nodes are,
: how mining works, how public / private key cryptography works, how addresses are built and everything else
: for a solid understanding of Bitcoin from a technical perspective. This course is the perfect introduction
: to Bitcoin for developers and technologists. It also provides the necessary knowledge for our Advanced Course.

- introduce Bitcoin to technical audience
- allow understanding of key concepts
- introduce Bitcoin protocol
- what are nodes?
- how does mining work?
- how does public key cryptography work?
- what are addresses and wallets?
- hands-on experience with tools and concepts for advanced course

* Course structure

- mix of theory and application
- focus on how high-level concepts and how to work with tools
- no proofs, limited math
- many concepts interlock, need scaffolding to build understanding
- tools used: go, bx

* Course overview: Day 1

- 09:00 — 09:45 Course intro (you are here)

- 10:00 - 11:15: Public key crypto basics

: private / public keys
: signing: proving you control private key without sharing it
: encryption: not used in Bitcoin!
: ECDSA: elliptic curve digital signature algorithm
: ECDSA: elliptic curves over finite fields of prime order
: elliptic curves:
:   - equations with form y^2 = x^3 + ax + b
:   - diagram: example curve over reals
:   - exercise: verify that the point (5, 30) is on the curve y^2 = x^3 + 5
:   - can define arithmetic operations over curve points just like we can for
:     natural numbers, real, complex, ..
:   - convention: lower case s is scalar, upper case G is curve point
: finite fields:
:   - F_7 has elements {0, 1, 2, 3, 4, 5, 6}, + - * / operations wrap around
: elliptic curves over finite fields:
:   - can define addition, etc over curve points so adding two curve points produces another
:     point on the curve
:   - generator point: if we have an elliptic curve over a finite field, can pick generator
:     point G, and keep adding it to itself until it becomes point at infinity: G, G+G, 3*G, 4*G, .., n*G = 0
:   - this generates all elements in the finite field: {0, G, 2*G, .., (n-1)*G}
: discrete log problem:
:   - P = s*G, finding s is hard given P, but finding P is easy given s
:   - easy / hard is computational statements
:   - choosing finite field of large order like 2^256 makes it infeasible to find s
:   - this is how we generate a private and public key in Bitcoin!
:   - a private key is a randomly chosen number
:   - a public key is a point on the secp256k1 curve
:   - params are y^2 = x^3 + 7, finite field over p = 2^256 - 2^32 - 977
:   - G is (0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798,
:           0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)
:   - verify that (x, y) of G lie on the curve: (y**2) % p == (x**3 + 7) % p
: ECDSA signatures:
:  - calculate (r, s), cryptographically committing to hash of message being signed
:  - given (r, s), someone who knows your public key P can verify mathematically
:    that you know s!

- 11:15 — 11:30 Break

- 11:30 — 12:15 Bitcoin history
: i.e "what is the history of Bitcoin and potential future?"

- 12:00 — 13:15 Lunch

- 13:15 - 14:00 Bitcoin addresses: they don't exist

: so what is an addr?
:   - providing a P2PKH address to someone is to say "here's the hash of my pubkey,
:     please create a tx which locks an output locked to the corresponding privkey"
:   - P2SH: "here's the hash of a lock script which if satisfied can spend"
:   - P2WPKH: like P2PKH but post-SegWit
:   - P2WSH: like P2SH but post-SegWit

: bitcoin address:
:   - compressed/uncompressed pubkey in SEC format
:   - a P2PKH bitcoin address is sha256 + ripemd160 of pubkey in SEC format, with checksum,
:     encoded as base58
:   - exercise: generate a testnet addr and get some funds from a faucet
:   - there's P2PK, P2PKH, P2M (raw multisig), P2SH, P2WSH, P2WPKH, ..
:   - but these are simplifications to make it easier for people to follow:
:     a bitcoin tx always assigns funds from one script to another
:   - tx when created unlocks earlier outputs that it consumes, and sets lock script
:     to specify conditions which allow funds to be spent in the future
:   - if we spend 1 BTC UTXO in a tx, we provide an unlock script
:     which mathematically proves that we control the private key which
:     was specified in the lock script, and then create a new output
:     which locks the value to a new script
:   - lock script is run together with unlock script, and if they verify
:     the tx is valid
:   - sending a tx is making a statement that some mathematical properties
:     holds
:   - addresses, wallets and many other abstractions don't really exist on protocol level!
:   - txns with inputs and outputs, ordered into blocks coming with PoW are fundamental units
:   - tx: version, inputs, outputs, locktime
:   - tx input is reference to earlier tx output, along with unlock script (ScriptSig), as well as sequence field (RBF)
:   - tx input does not contain amount or the lock script, this needs to be looked up from referenced tx
:   - tx output has amount (can be zero, OP_RETURN) and lock script (ScriptPubKey)
:   - tx fee is implicit difference from sum(inputs)-sum(outputs)
:   - utxo are always spent fully, can't spend half, so use change address to send back extra funds
:     and avoid accidentally donating to miners
:   - exercise: decode raw tx

- 14:00 — 14:45 Theory and practice
: i.e "how did we get here; where might we go?"

- 14:45 — 15:00 Break

- 15:00 — 15:45 Transactions basics

: Bitcoin script: limited stack-based language, not turing complete
: conceptually lock script and unlock script are concatenated and run together
: scripts can express anything, lock script "2 + 2 = ?" and unlock script "4"


- 15:45 — 16:30 Mining basics

* Course overview: Day 2

- 09:00 — 09:45 Consensus basics
- 09:45 — 10:30 Forks basics
- 10:30 — 10:45 Break
- 10:45 — 11:30 TBD
- 11:30 — 12:00 TBD
- 12:00 — 13:15 Lunch
- 13:15 — 14:00 TBD
- 14:00 — 14:45 TBD
- 14:45 — 15:00 Break
- 15:00 — 15:45 TBD
- 15:45 — 16:30 TBD


* Questions / discussion

- these slides: [[https://talks.hkjn.me/21lectures2019/intro.slide]]
- contact details: [[https://hkjn.me]]
- my employer: [[https://shiftcrypto.ch]]

Thanks!
