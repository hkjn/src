Address basics
27 Jun 2019

Henrik Jonsson
`D6187A03A40A3D5662F54B4603EFBF839A5FDC15`
Rōnin Coder
me@hkjn.me
https://hkjn.me

* Addresses

- what is an address?
- typically, hash of pubkey
- "here's the hash of my pubkey, lock an output to corresponding privkey"
- sending a transaction typically means signing a message
- in general, transactions have locks on their outputs
- spending from those outputs in further transactions needs to unlock them
- lock/unlock scripts are in small programming language

* SegWit

- upgrade in 2017 that addressed issues on several fronts
- transaction malleability made second layer tech harder
- better accounting for cost to network in transaction weight
- modest capacity increase
- new encoding format for addresses

* Address types

- P2PK: pay-to-pubkey (discouraged)
- P2PKH: typical old-style addresses starting with `1`
- P2SH: pay-to-script-hash, starts with `3`
- P2WPKH: pay-to-witness-pubkey-hash
- P2WSH: like P2SH but for SegWit addresses
- P2SH-P2WPKH: P2SH-wrapped SegWit, "compatibility format"

: cryptographic hashes
:   - SHA256
:   - RIPEMD160
: -> 160 bit hash of public key, encoded as base58

: bitcoin address:
:   - compressed/uncompressed pubkey in SEC format
:   - a P2PKH bitcoin address is sha256 + ripemd160 of pubkey in SEC format, with checksum,
:     encoded as base58
:   - exercise: generate a testnet addr and get some funds from a faucet
:   - there's P2PK, P2PKH, P2M (raw multisig), P2SH, P2WSH, P2WPKH, ..
:   - but these are simplifications to make it easier for people to follow:
:     a bitcoin tx always assigns funds from one script to another
:   - tx when created unlocks earlier outputs that it consumes, and sets lock script
:     to specify conditions which allow funds to be spent in the future
:   - if we spend 1 BTC UTXO in a tx, we provide an unlock script
:     which mathematically proves that we control the private key which
:     was specified in the lock script, and then create a new output
:     which locks the value to a new script
:   - lock script is run together with unlock script, and if they verify
:     the tx is valid
:   - sending a tx is making a statement that some mathematical properties
:     holds
:   - addresses, wallets and many other abstractions don't really exist on protocol level!
:   - txns with inputs and outputs, ordered into blocks coming with PoW are fundamental units
:   - tx: version, inputs, outputs, locktime
:   - tx input is reference to earlier tx output, along with unlock script (ScriptSig), as well as sequence field (RBF)
:   - tx input does not contain amount or the lock script, this needs to be looked up from referenced tx
:   - tx output has amount (can be zero, OP_RETURN) and lock script (ScriptPubKey)
:   - tx fee is implicit difference from sum(inputs)-sum(outputs)
:   - utxo are always spent fully, can't spend half, so use change address to send back extra funds
:     and avoid accidentally donating to miners
:   - exercise: decode raw tx
