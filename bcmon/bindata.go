// Code generated by go-bindata.
// sources:
// bcmon.tmpl
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bcmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x8f\x14\x3f\x0c\xc5\xfb\xf9\x14\xef\xbf\xcd\xbf\xe1\x26\xba\x2b\x51\x48\x41\x05\x1d\x42\x34\x94\x99\x8d\x77\x13\x6e\x62\x8f\x62\x2f\x7b\xab\xd5\x7d\x77\x94\xd9\xb9\x03\x81\x90\xe8\x66\x2c\xe7\xbd\xe7\x9f\xed\xb3\xd5\x39\x0c\x7e\x92\x74\x09\x83\xcf\xf7\xe1\x03\xcd\xb3\xfc\xe7\x5d\xbe\x0f\x83\x5f\xc2\x97\x5c\x14\x45\x11\x19\xf4\xb4\x50\x2b\x95\xd8\x70\x2e\x96\xf1\xbe\xd8\x5e\x0a\xa3\x9d\x98\x0b\x1f\x11\x0d\x7e\x2f\x89\xc2\xcc\x63\x7e\xfc\xc6\x63\x25\xef\xd6\x02\xa6\x0b\x7c\x44\x6e\x74\x78\xb7\xcb\x66\x8b\xbe\x75\x6e\x6b\xd9\x85\xfe\xe1\x5d\x0c\xa3\x77\x4b\x18\x6e\xa6\x84\xe5\xd4\x16\x51\xea\xde\x26\x98\x29\x36\x46\x95\x46\x88\x93\x9c\x0c\x96\x09\x85\x99\x1a\xce\xd2\x1e\x0b\x1f\x15\x72\x78\x8d\x34\x5d\x50\x63\xaf\xa2\x18\x28\x6a\xa1\xd6\x55\x64\xa1\x16\x8d\x06\xcb\xa4\x84\x14\xa9\x0a\xeb\x1b\x44\x4e\xbf\x36\x4d\x4a\xed\x3b\xe1\x9c\xe3\x6a\x73\xf9\xbf\x11\x92\x14\x3e\xfe\x0c\xf8\x55\x4e\xa8\xf1\x82\x38\xab\x60\xea\x49\x8c\x1a\xa9\x51\x42\xe1\x35\xdb\x1f\xe3\x56\x79\xa5\xe2\x66\x76\x7b\x61\x95\x99\xd4\x15\x4e\xf4\x34\xf6\x35\xec\xc2\xa7\x26\x95\x2c\xd3\x49\x91\xa2\xe6\x49\x62\x4b\x9d\x0c\x74\xdf\xe2\xd2\xc7\x49\xd1\xe2\x70\x68\x52\x61\x79\x25\x23\xf3\x4b\xaa\xfc\x10\x6e\xf8\xa7\x1b\x84\xf4\x02\xbf\xf0\x41\xbc\xcb\x0f\x61\xb8\x5e\x51\x0e\x18\x3f\xea\xe7\x6d\x65\x77\xcf\xcf\x7d\x9c\xbf\xbc\x53\x78\xb5\x26\x7c\x0c\xdb\x8a\xbd\xdb\xfe\x57\xcb\xeb\x15\x34\x2b\xe1\x1f\x35\x58\x0c\xbf\xeb\x8c\x9b\xd0\x1d\x88\x53\x17\x1a\xbc\xdb\x4e\xd1\xdd\x2e\xf3\x47\x00\x00\x00\xff\xff\x08\xf4\x68\x0a\xa1\x02\x00\x00")

func bcmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bcmonTmpl,
		"bcmon.tmpl",
	)
}

func bcmonTmpl() (*asset, error) {
	bytes, err := bcmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bcmon.tmpl", size: 673, mode: os.FileMode(436), modTime: time.Unix(1518017431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcd\x6e\xe4\x36\x0c\x3e\xc7\x4f\xc1\xe6\xd2\x4b\xd7\xc2\xee\xde\x0a\x55\x40\xb2\x40\xd1\x00\x69\xba\x68\x66\x5b\xf4\xa8\x19\x71\x46\x6a\x64\xd2\x90\xe8\xcd\x06\x46\xde\xbd\x90\xc6\xce\x78\x32\x49\x11\xec\xc5\xb0\x48\x7e\xe4\xc7\x3f\x49\x7b\xe9\xa2\x69\xf4\x9a\xdd\x83\x69\xb4\x7f\x6f\x7e\xc3\x18\xf9\x07\xad\xfc\x7b\xd3\xe8\xde\xac\x7c\xc8\x10\x32\x58\x02\xfc\xd6\x63\x0a\x1d\x92\xc0\x7d\x10\x0f\x97\x41\x36\x1c\x08\x2c\x39\xb8\x0e\x3b\x2f\x14\x68\x07\x37\x28\xf7\x9c\xee\x20\x0d\x54\xcf\x56\x40\x6f\xd8\xa1\x89\xd4\xfa\xbb\x7f\xa9\xed\x50\xab\x2a\x80\xf5\x03\x68\x0b\x3e\xe1\xf6\x97\x73\x2f\xd2\xe7\x9f\x95\x9a\x4c\xce\x4d\xf9\xd1\xca\x9a\x56\xab\xde\x34\x7b\x2a\x08\xfd\x90\x7a\xce\x58\x18\x09\x43\x44\x9b\x08\x3a\x4e\x08\x76\xcd\x83\x80\x78\x84\x40\x84\x09\x0a\x87\x40\xbb\x0c\xbc\x3d\x22\x5a\x2c\xae\x6f\x4a\xe8\xce\x16\x03\x08\x02\x68\x73\xc0\x54\x1c\x72\x8f\xc9\x0a\x36\xe2\x31\x23\x38\x8b\x1d\x53\xfe\xa9\x02\x17\x46\xeb\x8c\xe9\x2b\xc2\xbd\xb7\x35\xe2\xc3\x8f\x09\xc1\x71\xa0\xdd\x81\xeb\x3f\x3c\x40\x67\x1f\xc0\xc6\xcc\xb0\x2e\xa4\x04\x13\x66\x41\x07\x81\x2a\x89\x93\xcc\x3b\x7e\x2a\x90\x8a\xa4\x36\x4c\x99\x23\x66\x15\xc8\xe1\xb7\xb6\xf4\xe9\xdc\x7c\x4e\xdc\xa1\x78\x1c\x32\x38\x9b\xfd\x9a\x6d\x72\xa5\x48\x90\x37\xc9\xf6\x25\x1d\x67\xc5\x36\xdb\xc4\x1d\x88\xaf\x45\xe2\x38\xb3\xf2\x1f\xcc\xd4\x89\xb9\x59\x6e\xee\x44\xa0\x2d\x6b\xe5\x3f\x98\x66\x1c\x21\x6c\xa1\xbd\xca\x7f\x4e\xfd\x7b\xf7\xf8\x58\x12\x7a\x15\x99\x41\x67\x49\x4c\x3b\x33\x75\x5c\xab\xe9\x5c\xc3\xea\xde\xfc\x31\x24\x08\xae\x5a\x56\xcc\x38\x42\x7b\x45\x5b\x6e\x6f\xd8\xe1\x95\x7b\x7c\x9c\x7c\xed\x79\x8e\xe3\x7e\xba\xda\x8b\x18\x6c\x9e\xc3\x17\x1f\xb6\x0a\x8e\xdc\xc0\x29\x18\x63\x46\xd8\x83\xbe\xd0\x1d\xf1\x3d\x4d\xc0\x2d\x27\xe0\x21\x41\x91\x10\x3b\x9c\x11\xef\x00\xc9\xc1\x22\x8c\x73\x09\x73\x0d\x74\x4a\xf9\x62\x52\x3e\x8b\x3b\x41\xbf\x62\xca\x81\xe9\x65\xe8\x5f\x93\xf2\x65\xe8\x3a\xf2\xe6\xce\x63\xa9\xef\xcb\xf0\xcb\x85\xc1\xa9\x8b\xbf\x11\x4a\xae\x65\xda\xc7\x11\x22\x12\xd4\xea\x16\xa2\x35\xd9\x5c\xc7\x8e\xc5\xc6\xff\x83\x7c\xf2\x96\x08\x63\x45\x6d\xe6\xff\xb7\x00\x6b\xac\xf6\x33\x62\x5a\x44\x94\xb2\x1f\x36\x61\xad\x7a\x5f\x74\x4f\x93\xf8\xd1\x54\x5b\xad\xfc\xc7\x72\x16\xbb\x8e\x68\x9a\x33\x2d\xc9\x34\x67\x67\x5a\xbc\xb9\x72\x5a\x89\x9f\x4f\x75\x16\x96\x82\x6b\x9b\x05\x32\x22\x2d\x85\x13\x7d\xc8\x62\x05\x97\x8a\x5f\x07\x72\xf5\xc2\x18\xf2\x8b\x62\xf1\xd8\x4d\x0a\xad\x2a\x87\x71\x84\x64\x69\x87\xc7\xa9\x95\x61\x3c\x90\x74\xe6\xd0\xa2\xfd\x28\xb7\xb7\x9e\xd3\xa2\x3d\x5a\x89\x9b\x6d\x8b\xd5\x7e\xa4\x8b\xfa\x58\x5e\xb2\x59\x85\x0e\xb3\xd8\xae\x6f\x6f\x03\x6d\xf0\x99\xd5\x21\xd2\xdc\xa3\xf6\xb6\x64\xf9\x6a\xac\xb2\xc4\xcb\x76\x1e\x41\x7f\x0f\x31\x86\x5b\x2b\x9c\x7d\x58\xf1\x97\xdc\x5e\xe4\xcb\xd5\xa7\xc9\x6c\xbf\x0d\xdf\xef\x6e\xe5\xb1\x7b\xdd\xe1\x53\x7d\x0f\x6b\xa7\xa6\xf6\x37\x7a\x28\x4f\x91\x2a\xdf\x67\x9b\xfc\x86\xdb\x87\x58\xe0\xf9\x0d\x74\xb2\xe2\x8d\x56\xd3\x4b\xa7\xf6\x0f\xdf\x7f\x01\x00\x00\xff\xff\xbf\xdf\x04\x83\x00\x07\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1792, mode: os.FileMode(436), modTime: time.Unix(1518014503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bcmon.tmpl": bcmonTmpl,
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bcmon.tmpl": &bintree{bcmonTmpl, map[string]*bintree{}},
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

