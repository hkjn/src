// Code generated by go-bindata.
// sources:
// bcmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bcmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xbf\x8e\x14\x31\x0c\x87\xeb\x9d\xa7\x30\xdb\xdf\x44\x77\x25\x0a\x29\xa8\xa0\x43\x88\x86\x32\x33\xf1\x6c\x02\x89\x3d\xc4\x5e\xee\x56\xa7\x7b\x77\x94\xd9\x0c\xb7\x20\x21\xd1\x79\xfe\xe4\xcb\x67\xff\x6c\xa3\x96\xec\x06\x3b\x71\xb8\xb8\xe1\x60\xe3\xbd\xfb\x80\x39\x33\x2c\x95\x0b\xd8\x99\x03\xba\x69\x2e\x4c\xd6\x6c\xf5\x1b\x6b\xe2\xbd\x1b\x86\x83\x5d\xdd\x97\x98\x04\x92\x80\x27\xc0\xa7\x15\x6b\x2a\x48\x0a\x8f\x49\x23\xbc\x4f\x3a\x73\x22\xa8\x67\xa2\x44\x27\xf0\xda\x59\x99\xc6\xf8\xfd\x1b\x8d\x05\x3b\x10\xa6\x0b\x58\x0f\xb1\xe2\xf2\xee\x18\x55\x57\x79\x6b\x4c\xff\xe5\xe8\x5a\x61\x8d\x77\xa3\x35\xeb\xed\xad\x8f\x38\x81\x60\xfd\x89\x15\xf0\x29\x89\x0a\x14\x9f\x28\x5f\x40\xf9\xfa\x1e\x34\xe2\x2b\xd7\x14\xd4\x9a\x66\x39\xba\xbd\x6a\x50\x40\x0a\x2b\x27\x52\x58\xb8\xc2\xa7\xca\x05\x35\xe2\x59\x1a\x64\xe6\x9c\x71\x56\x08\x5e\xfd\x70\x68\xdf\x7f\x9c\xb1\x26\x6c\xdd\x06\x38\x55\xbf\x46\xd9\x8e\xed\x9d\x76\xee\x8d\xe8\x57\x3e\x43\xf1\x17\xf0\x59\x18\x26\x84\x44\x8a\x15\x45\x31\x40\xa2\x3f\xfd\xf6\xbe\x5f\xa7\x63\x8e\xee\x46\x28\x78\x89\x13\xfb\x1a\x36\x6d\x99\xab\x5f\xdb\x54\xbb\x5c\x4b\x4a\xdb\x54\x94\x39\xff\x16\x88\x0f\xae\xc7\x77\x35\x0c\xfb\xc0\x13\x2d\x6c\x4d\x7c\x70\xc3\xe1\xf9\x19\xd2\x02\xe3\x47\xf9\xdc\x73\xba\x7b\x79\xd9\xdc\xff\x71\x52\xc0\x8a\x56\xa6\x93\xeb\xc1\x5a\xd3\x9f\xb7\x5b\x1b\x0f\xb3\x20\xfc\x2f\x85\x58\xe1\x6f\xd2\xb8\xa3\xee\x5a\x3e\x0d\x35\x58\x73\x5d\x4f\x6b\xae\xdb\xfa\x2b\x00\x00\xff\xff\xb9\x8a\x17\x6d\xb5\x02\x00\x00")

func bcmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bcmonTmpl,
		"bcmon.tmpl",
	)
}

func bcmonTmpl() (*asset, error) {
	bytes, err := bcmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bcmon.tmpl", size: 693, mode: os.FileMode(436), modTime: time.Unix(1518099559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bcmon.tmpl": bcmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bcmon.tmpl": &bintree{bcmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

