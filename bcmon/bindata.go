// Code generated by go-bindata.
// sources:
// index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x8f\x13\x31\x10\xc5\xeb\xec\xa7\x18\xd2\xdf\x5a\x77\x25\x32\x2e\x10\x05\x48\x14\x08\xd1\x50\x7a\xd7\xb3\xb1\x39\x7b\x66\xf1\x4c\x38\xa2\x28\xdf\x1d\x79\x77\x93\xbb\x43\x42\xa2\xf3\x1f\xf9\xcd\xef\xbd\x67\x1b\xb5\x64\xd7\xd9\x81\xc3\xc9\x75\x3b\x1b\xef\xdd\x47\xcc\x99\x61\xaa\x5c\xc0\x8e\x1c\xd0\x0d\x63\x61\xb2\x66\x59\xbf\xb1\x26\xde\xbb\xae\xdb\xd9\xd9\x7d\x8b\x49\x20\x09\x78\x28\x4c\x49\xb9\x26\x3a\x40\xf0\x12\x07\xf6\x35\xc0\xc4\x15\xde\x27\x1d\x39\x11\xd4\x23\x51\xbb\xb5\x1e\x62\xc5\xe9\xdd\x3e\xaa\xce\xf2\xd6\x98\xf8\xf8\x83\xfa\x82\x26\x53\x61\xda\xbb\x75\xe0\xb2\xd9\x06\x5a\xe3\x5d\x6f\xcd\xfc\x72\xe6\x13\x0e\x20\x58\x7f\x61\x05\xfc\x9d\x44\x05\x8a\x4f\x94\x4f\xa0\xbc\x9e\x83\x46\x7c\x9e\x65\x0a\x6a\x4d\xa3\xec\xdd\x75\xd5\x44\x01\x29\xcc\x9c\x48\x17\xd0\x2f\x95\x0b\x6a\xc4\xa3\x34\x91\x91\x73\xc6\x51\x21\x78\xf5\xdd\xae\xdd\xff\x3c\x62\x4d\x28\xe0\x29\xc0\xa1\xfa\x39\xca\x2b\x7f\x9b\xee\x15\xf4\x7c\x86\xa7\xa4\x11\xfa\x0f\xd7\x34\x3e\x27\x7a\x84\xcb\xa5\xdb\x35\x13\xdf\xf9\x08\xc5\x9f\xc0\x67\x61\x18\x10\x12\x29\x56\x14\xc5\x00\x89\x5e\xb3\x9f\xcf\xd0\xc3\xe5\xb2\x77\x2f\x00\x6f\x11\x2f\x36\x64\xac\x7e\x5e\x93\x6f\xb0\xbb\xa5\x38\x6d\x31\x29\x73\x5e\x89\x1a\x10\x52\x68\x00\xad\xe3\x87\x2d\xe7\x61\xa5\x0f\x5b\xd4\x90\x68\x62\x6b\xe2\xc3\xfa\x20\x4d\xd0\x7f\x92\xaf\x5b\x73\x77\x0d\xde\xce\xff\x7a\x29\x60\x45\x2b\xd3\xc1\x6d\x55\x5b\xb3\xed\x9f\x01\xb2\x20\xfc\xaf\x0a\xb1\xc2\xdf\x4a\x37\x2f\x77\x37\x33\xd6\xac\x1f\xd7\x9a\xf5\x1f\xff\x09\x00\x00\xff\xff\x65\x6d\xda\xa4\xcf\x02\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 719, mode: os.FileMode(436), modTime: time.Unix(1518713145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

