#
# This is a sample iptables config that can be used for hosts that act
# as OpenVPN servers.
#
*filter
# Default policy is DROP; we need to explicitly allow any packets we
# do want.
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
:DOCKER - [0:0]
:inputdrop - [0:0]
:forwarddrop - [0:0]
:outputdrop - [0:0]

########################
### INPUT CHAIN      ###
########################

# Accept loopback packets.
-A INPUT -i lo -j ACCEPT

# Accept SSH connections on a nonstandard port.
-A INPUT -p tcp -m tcp --dport 6200 -j ACCEPT

# Accept HTTP(s) traffic.
-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 443 -j ACCEPT

# Allow DHCP discovery.
-A INPUT -p udp --sport 67 --dport 68 -j ACCEPT
-A INPUT -p udp --sport 68 --dport 67 -j ACCEPT

# Accept connections to docker0 interface - these are coming
# from containers, headed for the shared bridge.
-A INPUT -m addrtype -p tcp -i docker0 --dst-type LOCAL -j ACCEPT

# Allow inbound OpenVPN traffic for the tunnel itself.
-A INPUT -p udp --sport 1199 -j ACCEPT
-A INPUT -p udp --dport 1199 -j ACCEPT

# Allow inbound UDP traffic to the mosh-server ports.
-A INPUT -p udp --dport 60001:60010 -j ACCEPT

# Allow inbound TCP/UDP traffic to geth.
-A INPUT -p tcp --dport 30303 -j ACCEPT
-A INPUT -p udp --dport 30303 -j ACCEPT

# Allow inbound TCP traffic to prototest server.
-A INPUT -p tcp --dport 50051 -j ACCEPT

# Allow inbound ICMP type 0, 3 and 8 ("Echo Reply", "Destination
# Unreachable" and "Echo", i.e. ping).
-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

# Allow inbound OpenVPN tcp, udp traffic over the tunnel.
-A INPUT -p tcp -i tun1199 -s 10.0.0.0/16 -d 10.0.0.0/16 -j ACCEPT
-A INPUT -p udp -i tun1199 -s 10.0.0.0/16 -d 10.0.0.0/16 -j ACCEPT

# Allow inbound traffic coming from and going to the internal subnets.
-A INPUT -p tcp -m tcp -i tun0 -s 10.0.0.0/16 -d 10.0.0.0/16 -j ACCEPT

# Explicitly whitelist established / related connections. This is a
# last-ditch safeguard to avoid locking yourself out if a too-restrictive
# rule would be applied - your current SSH connections will remain,
# giving you one last chance so you can fix the issue.
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Anything making it here is not allowed; send it to logging chain.
# Dropped packets can be checked with `journalctl -k | grep "IN=.*OUT=.*"`
-A INPUT -j inputdrop

########################
### FORWARD CHAIN    ###
########################

# Allow DNS query responses to reach docker containers.
-A FORWARD -m udp -p udp -i docker0 --dport 53 -j ACCEPT

# Forward all packets from and to the OpenVPN tun1199 interface.
-A FORWARD -i tun1199 -j ACCEPT
-A FORWARD -o tun1199 -j ACCEPT

# Forwarding traffic from containers to the internal subnets is also okay.
-A FORWARD -m tcp -p tcp -i docker0 -o tun0 -s 172.17.0.0/16 -d 10.0.0.0/16 -j ACCEPT

# Allow forwarding traffic from docker containers to HTTP(S) targets.
-A FORWARD -m tcp -p tcp -i docker0 -s 172.17.0.0/16 --dport 80 -j ACCEPT
-A FORWARD -m tcp -p tcp -i docker0 -s 172.17.0.0/16 --dport 443 -j ACCEPT

-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT

# Explicitly whitelist established / related connections. This is a
# last-ditch safeguard to avoid locking yourself out if a too-restrictive
# rule would be applied - your current SSH connections will remain,
# giving you one last chance so you can fix the issue.
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Anything making it here is not allowed; send it to logging chain.
# Dropped packets can be checked with `journalctl -k | grep "IN=.*OUT=.*"`
-A FORWARD -j forwarddrop


########################
### DOCKER CHAIN     ###
########################

-A DOCKER -d 172.17.0.0/16 ! -i docker0 -o docker0 -p tcp -m tcp --dport 443 -j ACCEPT
-A DOCKER -d 172.17.0.0/16 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT

########################
### OUTPUT CHAIN     ###
########################

# Allow local connections.
-A OUTPUT -m tcp -p tcp -o lo -j ACCEPT
-A OUTPUT -m udp -p udp -o lo -j ACCEPT

# Allow OUTPUT for docker0 interface.
-A OUTPUT -o docker0 -j ACCEPT

# Allow outbound SSH from a nonstandard port.
-A OUTPUT -p tcp -m tcp --sport 6200 -j ACCEPT

# Allow outbound SSH.
-A OUTPUT -p tcp -m tcp --dport 6200 -j ACCEPT

# Allow outbound HTTP / HTTPS.
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT

# Allow DHCP lookups.
-A OUTPUT -p udp --sport 67 --dport 68 -j ACCEPT
-A OUTPUT -p udp --sport 68 --dport 67 -j ACCEPT

# Allow DNS lookups.
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

# Allow outbound LLMNR.
-A OUTPUT -p udp -d 224.0.0.252 --sport 5355 --dport 5355 -j ACCEPT

# Allow IGMP multicast: http://en.wikipedia.org/wiki/Multicast_address
-A OUTPUT -p igmp -d 224.0.0.22 -j ACCEPT

# Allow NTP lookups.
-A OUTPUT -p udp -m udp --dport 123 -j ACCEPT

# Allow ICMP type 0 and 8 ("Echo Reply" and "Echo", i.e. ping).
-A OUTPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
-A OUTPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

# Allow outbound TCP traffic to sshd port.
-A OUTPUT -p tcp --dport 22 -j ACCEPT

# Allow outbound TCP traffic from geth port.
-A OUTPUT -p tcp --sport 30303 -j ACCEPT

# Allow outbound TCP traffic to bitcoin JSON-RPC port.
-A OUTPUT -p tcp --dport 8332 -j ACCEPT

# Allow outbound TCP traffic to bitcoin port.
-A OUTPUT -p tcp --dport 8333 -j ACCEPT

# Allow outbound TCP traffic to prototest server.
-A OUTPUT -p tcp --dport 50051 -j ACCEPT

# Explicitly whitelist established / related connections. This is a
# last-ditch safeguard to avoid locking yourself out if a too-restrictive
# rule would be applied - your current SSH connections will remain,
# giving you one last chance so you can fix the issue.
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Allow outbound traffic from the VPN interface to the VPN network, to
# allow the traffic within the tunnel to flow. Note that we need both
# the tun0 (VPN client sending to server) and tun1199 interface (VPN
# server to client).
-A OUTPUT -p tcp -m tcp -o tun0 -s 10.0.0.0/16 -d 10.0.0.0/16 -j ACCEPT
-A OUTPUT -p tcp -m tcp -o tun1199 -s 10.0.0.0/16 -d 10.0.0.0/16 -j ACCEPT

# Anything making it here is not allowed; send it to logging chain.
# Dropped packets can be checked with `journalctl -k | grep "IN=.*OUT=.*"`
-A OUTPUT -j outputdrop

# Configure 'drop' chains, which just jump to LOG -> DROP.
-A forwarddrop -m limit --limit 2/min -j LOG --log-prefix "[FORWARD] IPTables-Dropped: "
-A forwarddrop -j DROP
-A inputdrop -m limit --limit 2/min -j LOG --log-prefix "[INPUT] IPTables-Dropped: "
-A inputdrop -j DROP
-A outputdrop -m limit --limit 2/min -j LOG --log-prefix "[OUTPUT] IPTables-Dropped: "
-A outputdrop -j DROP
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:DOCKER - [0:0]
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
# Allow docker-originating traffic to masquerade as originating from
# the host itself.
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A POSTROUTING -s 10.0.0.0/16 ! -d 10.0.0.0/16 -j MASQUERADE
-A POSTROUTING -s 172.17.0.0/16 -d 172.17.0.0/16 -p tcp -m tcp --dport 80 -j MASQUERADE
-A POSTROUTING -s 172.17.0.0/16 -d 172.17.0.0/16 -p tcp -m tcp --dport 443 -j MASQUERADE

-A POSTROUTING -s 172.0.0.0/8 -o eno1 -j MASQUERADE
# Allow traffic from the VPN to masquarade as originating from the host.
-A POSTROUTING -s 10.0.0.0/16 -o eth0 -j MASQUERADE


COMMIT
