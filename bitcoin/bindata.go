// Code generated by go-bindata.
// sources:
// lnmon.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lnmonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x5c\xef\xb5\xd0\xf6\x36\x70\x02\xda\xd3\x0a\x0c\xdd\xb0\xbf\x67\x25\xa2\x23\x2d\x0a\x15\x48\x4a\xb3\xc2\xc8\x77\x1f\xa4\x28\x81\xf3\xc7\x6d\xd0\x8b\x11\x3b\x7c\x3f\x3e\x3e\x5a\x46\x93\x16\x4e\x36\x38\xf1\xfa\x45\x36\x68\x6e\xe4\x67\x72\xce\x7f\x40\x61\x6e\x64\x83\x4b\xf9\xd3\xd8\x08\x36\x82\x62\xa0\x7f\x4b\x0a\x76\x41\x9c\x20\xac\x98\x2d\xcf\x40\x25\x70\xdc\x9a\xf9\x5f\x6e\x17\x04\x6b\x9b\x0c\x7c\xb1\x33\x93\xca\x9f\x4f\x94\xd6\x3e\xcc\x41\xb1\x86\x07\x9b\xa6\xde\x32\x4c\x5e\x00\x15\x98\x40\xdd\xa7\x2b\x93\xd2\x32\x7e\x14\xa2\xca\xaf\x64\xfe\x81\x42\xc9\x16\xc5\x52\x36\x0d\x9a\x5b\x89\x53\xaf\x49\x4e\xb6\x6a\x8d\xa2\xdc\x82\xe5\xce\xa3\x30\xb7\xb2\xe9\x7b\xb0\x1d\xb4\x15\xaf\xdb\xc7\xf8\xbd\x5a\xbb\xde\x6c\xb2\xff\x11\x40\x04\x8c\x29\x78\x9e\xc9\x3a\x0a\x8a\x7a\xbf\x6d\xde\xf7\x40\x2e\x12\x5c\x08\x61\xbf\xcf\xe4\x04\x74\x0d\xc4\x3a\x83\x06\x03\xb9\x5d\x48\xe3\x23\xed\x73\x1c\x1d\xea\x0c\x64\x7c\xac\x62\x06\x97\xf2\xeb\x2a\x80\xd5\xa5\xb2\x68\xfa\xfe\xb0\x15\x77\xbe\x7d\xf2\x9a\x1e\xf5\x66\x53\xb1\xfb\x44\xca\x7e\x87\xd5\xf7\xce\xaa\xb8\x33\x95\xc9\xaa\x3c\x38\x80\xc3\x29\x67\x90\xec\x2f\x9e\xb3\x5f\x73\x15\x76\x3e\x80\x5f\x05\xc8\x4f\xd8\x6b\x3a\x89\x70\xd7\x46\xeb\x40\xb1\x34\x7a\x75\x90\xfb\x5a\x77\x64\xa1\x52\x9e\x29\x44\xeb\xf9\x4d\xca\xef\x5a\x77\x9e\x32\x71\x7e\x3a\x37\x94\x35\x6f\x92\x1e\x06\xb5\x47\xb4\x06\xcd\x9d\xfc\x43\x60\xd4\x33\xc1\x91\xf6\x1b\x51\x88\xf5\xfa\x23\x85\xfc\x22\x64\xb5\xb9\x93\x0d\xae\x5c\x89\x34\x28\x9e\xd1\x98\x68\xbb\x21\x67\xe5\xb9\xad\xa0\x70\xf6\x30\x63\x91\x99\x3b\x3f\x79\x3d\xe0\xbb\x63\x4b\xf9\x15\x89\xf5\x7a\xb1\xa5\x81\xe8\x3d\x96\xce\x9d\xc9\x57\xcf\xc0\x85\xa7\x52\xd4\x8f\x9f\xd8\x7e\x0b\xff\x07\x00\x00\xff\xff\xd1\xa4\x9b\x9e\x13\x05\x00\x00")

func lnmonTmplBytes() ([]byte, error) {
	return bindataRead(
		_lnmonTmpl,
		"lnmon.tmpl",
	)
}

func lnmonTmpl() (*asset, error) {
	bytes, err := lnmonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lnmon.tmpl", size: 1299, mode: os.FileMode(436), modTime: time.Unix(1517315900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lnmon.tmpl": lnmonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lnmon.tmpl": &bintree{lnmonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

